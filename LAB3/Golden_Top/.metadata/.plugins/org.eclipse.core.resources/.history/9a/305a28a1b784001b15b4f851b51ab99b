
#include <stdio.h>
#include "system.h"
#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <sys/alt_stdio.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "altera_avalon_pio_regs.h"


#define TRUE 1
#define FALSE 0
//Acceleration
struct ListAxis{
    long int data[1098];
    int cursor;
    int length;
};

struct ListConstants{
    long int data[1098];
};

void insert(struct ListAxis* list, long int data){
    list->cursor--;
    if(list->cursor < 0){
        list->cursor += list->length;
    }
    list->data[list->cursor] = data;
}

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
        cursor = (i + a->cursor) % a->length;
        data = ((a->data[cursor])*(alpha->data[i]));
        data >>= 20;
        total += data;
    }
    return total;
}

struct Acceleration{
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
}

long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
}

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
}

//Accelerometer
struct ListAccelerometer{
    long int data[1975];
    int cursor;
    int length;
};

struct ListConstantsAccelerometer{
    long int data[1975];
};

struct Accelerometer{
    struct Acceleration* x;
    struct Acceleration* y;
    struct Acceleration* z;
    struct ListAccelerometer* a;
    struct ListConstantsAccelerometer* alpha;
};

void insertA(struct ListAccelerometer* list, long int data){
    list->cursor--;
    if(list->cursor < 0){
        list->cursor += list->length;
    }
    list->data[list->cursor] = data;
}

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insert(accelerometer->x->a,x);
    insert(accelerometer->y->a,y);
    insert(accelerometer->z->a,z);
}

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
    fir(accelerometer->x);
    fir(accelerometer->y);
    fir(accelerometer->z);
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
    return (x_sum + y_sum + z_sum);
}

long int firAccelerometer(struct Accelerometer* accelerometer){
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
        cursor = (i + accelerometer->a->cursor) % accelerometer->a->length;
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
        data >>= 19;
        total += data;
    }
    return total;
}

long int filter(struct Accelerometer* accelerometer){
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
    return firAccelerometer(accelerometer);
}

//StepDetection
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insertAccelerometer(accelerometer,x,y,z);
    return filter(accelerometer);
}

int main(){
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 1098; x.length = 1098;
    struct ListAxis y; y.cursor = 1098; y.length = 1098;
    struct ListAxis z; z.cursor = 1098; z.length = 1098;
    struct ListConstants alphaAxis = {.data = {  1147 ,  16 ,  17 ,  18 ,  19 ,  20 ,  21 ,  22 ,  23 ,  24 ,  26 ,  27 ,  29 ,  30 ,  32 ,  32 ,  32 ,  35 ,  36 ,  37 ,  39 ,  40 ,  41 ,  43 ,  44 ,  46 ,  47 ,  49 ,  50 ,  52 ,  53 ,  55 ,  57 ,  58 ,  60 ,  61 ,  63 ,  64 ,  66 ,  67 ,  69 ,  71 ,  73 ,  74 ,  76 ,  78 ,  80 ,  81 ,  83 ,  85 ,  87 ,  89 ,  91 ,  92 ,  94 ,  96 ,  98 ,  100 ,  102 ,  104 ,  106 ,  108 ,  110 ,  112 ,  115 ,  117 ,  119 ,  121 ,  123 ,  125 ,  128 ,  130 ,  132 ,  134 ,  137 ,  139 ,  141 ,  143 ,  146 ,  148 ,  151 ,  153 ,  155 ,  158 ,  160 ,  163 ,  165 ,  168 ,  170 ,  173 ,  175 ,  178 ,  181 ,  183 ,  186 ,  188 ,  191 ,  194 ,  197 ,  199 ,  202 ,  205 ,  208 ,  210 ,  213 ,  216 ,  219 ,  222 ,  225 ,  228 ,  231 ,  234 ,  237 ,  240 ,  243 ,  246 ,  249 ,  252 ,  255 ,  258 ,  262 ,  265 ,  268 ,  271 ,  275 ,  278 ,  281 ,  284 ,  288 ,  291 ,  294 ,  298 ,  301 ,  304 ,  308 ,  311 ,  315 ,  318 ,  322 ,  325 ,  329 ,  333 ,  336 ,  340 ,  343 ,  347 ,  351 ,  354 ,  358 ,  362 ,  366 ,  369 ,  373 ,  377 ,  381 ,  385 ,  389 ,  392 ,  396 ,  400 ,  404 ,  408 ,  412 ,  416 ,  420 ,  424 ,  428 ,  432 ,  436 ,  440 ,  445 ,  449 ,  453 ,  457 ,  461 ,  465 ,  470 ,  474 ,  478 ,  482 ,  487 ,  491 ,  495 ,  500 ,  504 ,  508 ,  513 ,  517 ,  522 ,  526 ,  531 ,  535 ,  540 ,  544 ,  549 ,  553 ,  558 ,  563 ,  567 ,  572 ,  577 ,  581 ,  586 ,  590 ,  595 ,  600 ,  605 ,  609 ,  614 ,  619 ,  624 ,  629 ,  633 ,  638 ,  643 ,  648 ,  653 ,  658 ,  663 ,  668 ,  673 ,  677 ,  682 ,  687 ,  692 ,  697 ,  702 ,  707 ,  712 ,  717 ,  723 ,  728 ,  733 ,  738 ,  743 ,  748 ,  753 ,  758 ,  764 ,  769 ,  774 ,  779 ,  784 ,  790 ,  795 ,  800 ,  805 ,  811 ,  816 ,  821 ,  826 ,  832 ,  837 ,  842 ,  848 ,  853 ,  858 ,  864 ,  869 ,  875 ,  880 ,  885 ,  891 ,  896 ,  902 ,  907 ,  912 ,  918 ,  923 ,  929 ,  934 ,  940 ,  945 ,  951 ,  956 ,  962 ,  967 ,  973 ,  978 ,  984 ,  989 ,  995 ,  1000 ,  1006 ,  1011 ,  1017 ,  1022 ,  1028 ,  1033 ,  1039 ,  1045 ,  1050 ,  1056 ,  1061 ,  1067 ,  1072 ,  1078 ,  1083 ,  1089 ,  1095 ,  1100 ,  1106 ,  1111 ,  1117 ,  1122 ,  1128 ,  1134 ,  1139 ,  1145 ,  1150 ,  1156 ,  1161 ,  1167 ,  1172 ,  1178 ,  1184 ,  1189 ,  1195 ,  1200 ,  1206 ,  1211 ,  1217 ,  1222 ,  1228 ,  1234 ,  1239 ,  1245 ,  1250 ,  1256 ,  1261 ,  1267 ,  1272 ,  1278 ,  1283 ,  1289 ,  1294 ,  1300 ,  1305 ,  1310 ,  1316 ,  1321 ,  1327 ,  1332 ,  1338 ,  1343 ,  1348 ,  1354 ,  1359 ,  1365 ,  1370 ,  1375 ,  1381 ,  1386 ,  1391 ,  1397 ,  1402 ,  1407 ,  1412 ,  1418 ,  1423 ,  1428 ,  1433 ,  1439 ,  1444 ,  1449 ,  1454 ,  1460 ,  1465 ,  1470 ,  1475 ,  1480 ,  1485 ,  1490 ,  1495 ,  1500 ,  1505 ,  1511 ,  1515 ,  1521 ,  1525 ,  1531 ,  1535 ,  1540 ,  1545 ,  1550 ,  1555 ,  1560 ,  1565 ,  1570 ,  1575 ,  1579 ,  1584 ,  1589 ,  1594 ,  1598 ,  1603 ,  1608 ,  1612 ,  1617 ,  1622 ,  1626 ,  1631 ,  1636 ,  1640 ,  1645 ,  1649 ,  1654 ,  1658 ,  1663 ,  1667 ,  1671 ,  1676 ,  1680 ,  1684 ,  1689 ,  1693 ,  1697 ,  1702 ,  1706 ,  1710 ,  1714 ,  1718 ,  1722 ,  1727 ,  1731 ,  1735 ,  1739 ,  1743 ,  1747 ,  1751 ,  1755 ,  1758 ,  1762 ,  1766 ,  1770 ,  1774 ,  1778 ,  1781 ,  1785 ,  1789 ,  1792 ,  1796 ,  1800 ,  1803 ,  1807 ,  1810 ,  1814 ,  1817 ,  1821 ,  1824 ,  1828 ,  1831 ,  1834 ,  1838 ,  1841 ,  1844 ,  1847 ,  1850 ,  1854 ,  1857 ,  1860 ,  1863 ,  1866 ,  1869 ,  1872 ,  1875 ,  1878 ,  1881 ,  1883 ,  1886 ,  1889 ,  1892 ,  1894 ,  1897 ,  1900 ,  1902 ,  1905 ,  1908 ,  1910 ,  1913 ,  1915 ,  1917 ,  1920 ,  1922 ,  1925 ,  1927 ,  1929 ,  1931 ,  1933 ,  1936 ,  1938 ,  1940 ,  1942 ,  1944 ,  1946 ,  1948 ,  1950 ,  1952 ,  1953 ,  1955 ,  1957 ,  1959 ,  1960 ,  1962 ,  1964 ,  1965 ,  1967 ,  1968 ,  1970 ,  1971 ,  1973 ,  1974 ,  1976 ,  1977 ,  1978 ,  1979 ,  1981 ,  1982 ,  1983 ,  1984 ,  1985 ,  1986 ,  1987 ,  1988 ,  1989 ,  1990 ,  1991 ,  1991 ,  1992 ,  1993 ,  1994 ,  1994 ,  1995 ,  1996 ,  1996 ,  1997 ,  1997 ,  1998 ,  1998 ,  1998 ,  1999 ,  1999 ,  1999 ,  1999 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  2000 ,  1999 ,  1999 ,  1999 ,  1999 ,  1998 ,  1998 ,  1998 ,  1997 ,  1997 ,  1996 ,  1996 ,  1995 ,  1994 ,  1994 ,  1993 ,  1992 ,  1991 ,  1991 ,  1990 ,  1989 ,  1988 ,  1987 ,  1986 ,  1985 ,  1984 ,  1983 ,  1982 ,  1981 ,  1979 ,  1978 ,  1977 ,  1976 ,  1974 ,  1973 ,  1971 ,  1970 ,  1968 ,  1967 ,  1965 ,  1964 ,  1962 ,  1960 ,  1959 ,  1957 ,  1955 ,  1953 ,  1952 ,  1950 ,  1948 ,  1946 ,  1944 ,  1942 ,  1940 ,  1938 ,  1936 ,  1933 ,  1931 ,  1929 ,  1927 ,  1925 ,  1922 ,  1920 ,  1917 ,  1915 ,  1913 ,  1910 ,  1908 ,  1905 ,  1902 ,  1900 ,  1897 ,  1894 ,  1892 ,  1889 ,  1886 ,  1883 ,  1881 ,  1878 ,  1875 ,  1872 ,  1869 ,  1866 ,  1863 ,  1860 ,  1857 ,  1854 ,  1850 ,  1847 ,  1844 ,  1841 ,  1838 ,  1834 ,  1831 ,  1828 ,  1824 ,  1821 ,  1817 ,  1814 ,  1810 ,  1807 ,  1803 ,  1800 ,  1796 ,  1792 ,  1789 ,  1785 ,  1781 ,  1778 ,  1774 ,  1770 ,  1766 ,  1762 ,  1758 ,  1755 ,  1751 ,  1747 ,  1743 ,  1739 ,  1735 ,  1731 ,  1727 ,  1722 ,  1718 ,  1714 ,  1710 ,  1706 ,  1702 ,  1697 ,  1693 ,  1689 ,  1684 ,  1680 ,  1676 ,  1671 ,  1667 ,  1663 ,  1658 ,  1654 ,  1649 ,  1645 ,  1640 ,  1636 ,  1631 ,  1626 ,  1622 ,  1617 ,  1612 ,  1608 ,  1603 ,  1598 ,  1594 ,  1589 ,  1584 ,  1579 ,  1575 ,  1570 ,  1565 ,  1560 ,  1555 ,  1550 ,  1545 ,  1540 ,  1535 ,  1531 ,  1525 ,  1521 ,  1515 ,  1511 ,  1505 ,  1500 ,  1495 ,  1490 ,  1485 ,  1480 ,  1475 ,  1470 ,  1465 ,  1460 ,  1454 ,  1449 ,  1444 ,  1439 ,  1433 ,  1428 ,  1423 ,  1418 ,  1412 ,  1407 ,  1402 ,  1397 ,  1391 ,  1386 ,  1381 ,  1375 ,  1370 ,  1365 ,  1359 ,  1354 ,  1348 ,  1343 ,  1338 ,  1332 ,  1327 ,  1321 ,  1316 ,  1310 ,  1305 ,  1300 ,  1294 ,  1289 ,  1283 ,  1278 ,  1272 ,  1267 ,  1261 ,  1256 ,  1250 ,  1245 ,  1239 ,  1234 ,  1228 ,  1222 ,  1217 ,  1211 ,  1206 ,  1200 ,  1195 ,  1189 ,  1184 ,  1178 ,  1172 ,  1167 ,  1161 ,  1156 ,  1150 ,  1145 ,  1139 ,  1134 ,  1128 ,  1122 ,  1117 ,  1111 ,  1106 ,  1100 ,  1095 ,  1089 ,  1083 ,  1078 ,  1072 ,  1067 ,  1061 ,  1056 ,  1050 ,  1045 ,  1039 ,  1033 ,  1028 ,  1022 ,  1017 ,  1011 ,  1006 ,  1000 ,  995 ,  989 ,  984 ,  978 ,  973 ,  967 ,  962 ,  956 ,  951 ,  945 ,  940 ,  934 ,  929 ,  923 ,  918 ,  912 ,  907 ,  902 ,  896 ,  891 ,  885 ,  880 ,  875 ,  869 ,  864 ,  858 ,  853 ,  848 ,  842 ,  837 ,  832 ,  826 ,  821 ,  816 ,  811 ,  805 ,  800 ,  795 ,  790 ,  784 ,  779 ,  774 ,  769 ,  764 ,  758 ,  753 ,  748 ,  743 ,  738 ,  733 ,  728 ,  723 ,  717 ,  712 ,  707 ,  702 ,  697 ,  692 ,  687 ,  682 ,  677 ,  673 ,  668 ,  663 ,  658 ,  653 ,  648 ,  643 ,  638 ,  633 ,  629 ,  624 ,  619 ,  614 ,  609 ,  605 ,  600 ,  595 ,  590 ,  586 ,  581 ,  577 ,  572 ,  567 ,  563 ,  558 ,  553 ,  549 ,  544 ,  540 ,  535 ,  531 ,  526 ,  522 ,  517 ,  513 ,  508 ,  504 ,  500 ,  495 ,  491 ,  487 ,  482 ,  478 ,  474 ,  470 ,  465 ,  461 ,  457 ,  453 ,  449 ,  445 ,  440 ,  436 ,  432 ,  428 ,  424 ,  420 ,  416 ,  412 ,  408 ,  404 ,  400 ,  396 ,  392 ,  389 ,  385 ,  381 ,  377 ,  373 ,  369 ,  366 ,  362 ,  358 ,  354 ,  351 ,  347 ,  343 ,  340 ,  336 ,  333 ,  329 ,  325 ,  322 ,  318 ,  315 ,  311 ,  308 ,  304 ,  301 ,  298 ,  294 ,  291 ,  288 ,  284 ,  281 ,  278 ,  275 ,  271 ,  268 ,  265 ,  262 ,  258 ,  255 ,  252 ,  249 ,  246 ,  243 ,  240 ,  237 ,  234 ,  231 ,  228 ,  225 ,  222 ,  219 ,  216 ,  213 ,  210 ,  208 ,  205 ,  202 ,  199 ,  197 ,  194 ,  191 ,  188 ,  186 ,  183 ,  181 ,  178 ,  175 ,  173 ,  170 ,  168 ,  165 ,  163 ,  160 ,  158 ,  155 ,  153 ,  151 ,  148 ,  146 ,  143 ,  141 ,  139 ,  137 ,  134 ,  132 ,  130 ,  128 ,  125 ,  123 ,  121 ,  119 ,  117 ,  115 ,  112 ,  110 ,  108 ,  106 ,  104 ,  102 ,  100 ,  98 ,  96 ,  94 ,  92 ,  91 ,  89 ,  87 ,  85 ,  83 ,  81 ,  80 ,  78 ,  76 ,  74 ,  73 ,  71 ,  69 ,  67 ,  66 ,  64 ,  63 ,  61 ,  60 ,  58 ,  57 ,  55 ,  53 ,  52 ,  50 ,  49 ,  47 ,  46 ,  44 ,  43 ,  41 ,  40 ,  39 ,  37 ,  36 ,  35 ,  32 ,  32 ,  32 ,  30 ,  29 ,  27 ,  26 ,  24 ,  23 ,  22 ,  21 ,  20 ,  19 ,  18 ,  17 ,  16 ,  1147}};
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 1975;
    struct ListConstantsAccelerometer alphaA = {.data = {  716 ,  18 ,  18 ,  18 ,  18 ,  18 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  17 ,  17 ,  17 ,  15 ,  16 ,  15 ,  15 ,  15 ,  14 ,  14 ,  13 ,  13 ,  12 ,  12 ,  11 ,  11 ,  10 ,  9 ,  9 ,  8 ,  8 ,  7 ,  6 ,  5 ,  5 ,  4 ,  3 ,  3 ,  2 ,  1 ,  0 ,  0 ,  -1 ,  -2 ,  -2 ,  -3 ,  -4 ,  -5 ,  -6 ,  -7 ,  -8 ,  -9 ,  -10 ,  -10 ,  -11 ,  -12 ,  -13 ,  -14 ,  -15 ,  -16 ,  -17 ,  -18 ,  -19 ,  -20 ,  -21 ,  -22 ,  -23 ,  -24 ,  -25 ,  -26 ,  -27 ,  -28 ,  -29 ,  -30 ,  -31 ,  -32 ,  -33 ,  -34 ,  -35 ,  -36 ,  -37 ,  -38 ,  -39 ,  -39 ,  -40 ,  -41 ,  -42 ,  -43 ,  -44 ,  -44 ,  -45 ,  -46 ,  -47 ,  -47 ,  -48 ,  -49 ,  -49 ,  -50 ,  -51 ,  -51 ,  -52 ,  -52 ,  -53 ,  -53 ,  -54 ,  -54 ,  -55 ,  -55 ,  -55 ,  -56 ,  -56 ,  -56 ,  -56 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -56 ,  -56 ,  -56 ,  -55 ,  -55 ,  -55 ,  -54 ,  -54 ,  -53 ,  -53 ,  -52 ,  -52 ,  -51 ,  -51 ,  -50 ,  -49 ,  -49 ,  -48 ,  -47 ,  -46 ,  -46 ,  -45 ,  -44 ,  -43 ,  -42 ,  -41 ,  -40 ,  -39 ,  -38 ,  -37 ,  -36 ,  -35 ,  -34 ,  -33 ,  -32 ,  -31 ,  -29 ,  -28 ,  -27 ,  -26 ,  -25 ,  -23 ,  -22 ,  -21 ,  -20 ,  -18 ,  -17 ,  -16 ,  -15 ,  -13 ,  -12 ,  -11 ,  -10 ,  -8 ,  -7 ,  -6 ,  -5 ,  -3 ,  -2 ,  -1 ,  0 ,  1 ,  2 ,  3 ,  4 ,  6 ,  7 ,  8 ,  9 ,  10 ,  11 ,  13 ,  14 ,  15 ,  16 ,  17 ,  18 ,  19 ,  20 ,  21 ,  22 ,  23 ,  23 ,  24 ,  25 ,  26 ,  27 ,  27 ,  28 ,  29 ,  29 ,  30 ,  31 ,  31 ,  32 ,  32 ,  32 ,  33 ,  33 ,  34 ,  34 ,  34 ,  34 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  34 ,  34 ,  34 ,  33 ,  33 ,  33 ,  32 ,  32 ,  31 ,  31 ,  30 ,  30 ,  29 ,  29 ,  28 ,  28 ,  27 ,  26 ,  26 ,  25 ,  24 ,  23 ,  23 ,  22 ,  21 ,  20 ,  20 ,  19 ,  18 ,  17 ,  16 ,  16 ,  15 ,  14 ,  13 ,  12 ,  11 ,  11 ,  10 ,  9 ,  8 ,  8 ,  7 ,  6 ,  5 ,  5 ,  4 ,  3 ,  3 ,  2 ,  1 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  -1 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -3 ,  -3 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -1 ,  0 ,  0 ,  0 ,  0 ,  1 ,  2 ,  2 ,  3 ,  4 ,  5 ,  6 ,  7 ,  8 ,  10 ,  11 ,  12 ,  14 ,  15 ,  16 ,  18 ,  20 ,  21 ,  23 ,  25 ,  27 ,  29 ,  31 ,  33 ,  35 ,  37 ,  39 ,  41 ,  43 ,  46 ,  48 ,  51 ,  53 ,  55 ,  58 ,  61 ,  63 ,  66 ,  69 ,  71 ,  74 ,  77 ,  80 ,  82 ,  85 ,  88 ,  91 ,  94 ,  97 ,  100 ,  103 ,  106 ,  109 ,  112 ,  115 ,  118 ,  121 ,  123 ,  126 ,  129 ,  132 ,  135 ,  138 ,  141 ,  143 ,  146 ,  149 ,  152 ,  154 ,  157 ,  159 ,  162 ,  164 ,  166 ,  169 ,  171 ,  173 ,  175 ,  177 ,  179 ,  181 ,  183 ,  184 ,  186 ,  187 ,  189 ,  190 ,  191 ,  192 ,  193 ,  194 ,  195 ,  195 ,  196 ,  196 ,  196 ,  196 ,  196 ,  196 ,  196 ,  195 ,  195 ,  194 ,  193 ,  192 ,  191 ,  190 ,  188 ,  187 ,  185 ,  183 ,  181 ,  178 ,  176 ,  173 ,  170 ,  167 ,  164 ,  161 ,  158 ,  154 ,  150 ,  146 ,  142 ,  138 ,  133 ,  128 ,  124 ,  118 ,  113 ,  108 ,  102 ,  97 ,  91 ,  85 ,  79 ,  72 ,  66 ,  59 ,  52 ,  45 ,  38 ,  31 ,  23 ,  16 ,  8 ,  0 ,  -7 ,  -15 ,  -24 ,  -32 ,  -41 ,  -49 ,  -58 ,  -67 ,  -76 ,  -85 ,  -94 ,  -104 ,  -113 ,  -123 ,  -132 ,  -142 ,  -152 ,  -161 ,  -171 ,  -181 ,  -191 ,  -201 ,  -211 ,  -221 ,  -232 ,  -242 ,  -252 ,  -262 ,  -272 ,  -282 ,  -293 ,  -303 ,  -313 ,  -323 ,  -333 ,  -343 ,  -353 ,  -363 ,  -373 ,  -383 ,  -392 ,  -402 ,  -412 ,  -421 ,  -431 ,  -440 ,  -449 ,  -458 ,  -467 ,  -476 ,  -484 ,  -493 ,  -501 ,  -509 ,  -517 ,  -525 ,  -532 ,  -540 ,  -547 ,  -554 ,  -560 ,  -567 ,  -573 ,  -579 ,  -585 ,  -591 ,  -596 ,  -601 ,  -606 ,  -610 ,  -615 ,  -618 ,  -622 ,  -625 ,  -629 ,  -631 ,  -634 ,  -636 ,  -638 ,  -639 ,  -640 ,  -641 ,  -641 ,  -641 ,  -641 ,  -641 ,  -640 ,  -638 ,  -637 ,  -635 ,  -632 ,  -629 ,  -626 ,  -623 ,  -619 ,  -614 ,  -610 ,  -605 ,  -599 ,  -593 ,  -587 ,  -580 ,  -573 ,  -566 ,  -558 ,  -550 ,  -541 ,  -532 ,  -523 ,  -513 ,  -503 ,  -493 ,  -482 ,  -471 ,  -459 ,  -447 ,  -435 ,  -422 ,  -409 ,  -395 ,  -382 ,  -367 ,  -353 ,  -338 ,  -323 ,  -307 ,  -292 ,  -276 ,  -259 ,  -242 ,  -225 ,  -208 ,  -190 ,  -172 ,  -154 ,  -136 ,  -117 ,  -98 ,  -79 ,  -60 ,  -40 ,  -20 ,  0 ,  19 ,  39 ,  60 ,  81 ,  102 ,  123 ,  144 ,  165 ,  187 ,  208 ,  230 ,  251 ,  273 ,  295 ,  317 ,  339 ,  361 ,  383 ,  404 ,  426 ,  448 ,  470 ,  492 ,  513 ,  535 ,  557 ,  578 ,  599 ,  620 ,  641 ,  662 ,  683 ,  704 ,  724 ,  744 ,  764 ,  784 ,  803 ,  822 ,  841 ,  860 ,  878 ,  896 ,  914 ,  931 ,  948 ,  965 ,  981 ,  997 ,  1013 ,  1028 ,  1042 ,  1057 ,  1071 ,  1084 ,  1097 ,  1109 ,  1121 ,  1133 ,  1144 ,  1155 ,  1165 ,  1174 ,  1183 ,  1191 ,  1199 ,  1206 ,  1213 ,  1219 ,  1225 ,  1230 ,  1234 ,  1238 ,  1241 ,  1244 ,  1246 ,  1247 ,  1248 ,  1248 ,  1247 ,  1246 ,  1244 ,  1241 ,  1238 ,  1234 ,  1230 ,  1225 ,  1219 ,  1212 ,  1205 ,  1197 ,  1189 ,  1180 ,  1170 ,  1160 ,  1148 ,  1137 ,  1124 ,  1111 ,  1097 ,  1083 ,  1068 ,  1052 ,  1036 ,  1019 ,  1002 ,  983 ,  965 ,  945 ,  925 ,  905 ,  883 ,  862 ,  839 ,  817 ,  793 ,  769 ,  745 ,  720 ,  694 ,  668 ,  642 ,  615 ,  587 ,  559 ,  531 ,  502 ,  473 ,  443 ,  414 ,  383 ,  352 ,  321 ,  290 ,  258 ,  226 ,  194 ,  162 ,  129 ,  96 ,  62 ,  29 ,  -4 ,  -37 ,  -71 ,  -105 ,  -140 ,  -174 ,  -208 ,  -243 ,  -277 ,  -312 ,  -347 ,  -381 ,  -416 ,  -450 ,  -484 ,  -519 ,  -553 ,  -587 ,  -621 ,  -655 ,  -689 ,  -722 ,  -755 ,  -788 ,  -821 ,  -854 ,  -886 ,  -918 ,  -949 ,  -981 ,  -1012 ,  -1042 ,  -1072 ,  -1102 ,  -1131 ,  -1160 ,  -1188 ,  -1216 ,  -1244 ,  -1271 ,  -1297 ,  -1323 ,  -1348 ,  -1373 ,  -1397 ,  -1421 ,  -1443 ,  -1466 ,  -1487 ,  -1508 ,  -1528 ,  -1548 ,  -1567 ,  -1585 ,  -1603 ,  -1619 ,  -1635 ,  -1650 ,  -1665 ,  -1678 ,  -1691 ,  -1703 ,  -1714 ,  -1725 ,  -1734 ,  -1743 ,  -1751 ,  -1758 ,  -1764 ,  -1770 ,  -1774 ,  -1778 ,  -1781 ,  -1782 ,  -1783 ,  -1783 ,  -1783 ,  -1781 ,  -1778 ,  -1775 ,  -1770 ,  -1765 ,  -1759 ,  -1752 ,  -1744 ,  -1735 ,  -1725 ,  -1714 ,  -1703 ,  -1690 ,  -1677 ,  -1663 ,  -1648 ,  -1632 ,  -1615 ,  -1597 ,  -1579 ,  -1559 ,  -1539 ,  -1518 ,  -1497 ,  -1474 ,  -1451 ,  -1426 ,  -1401 ,  -1376 ,  -1349 ,  -1322 ,  -1294 ,  -1265 ,  -1236 ,  -1206 ,  -1175 ,  -1144 ,  -1112 ,  -1079 ,  -1046 ,  -1012 ,  -978 ,  -943 ,  -907 ,  -871 ,  -835 ,  -798 ,  -760 ,  -722 ,  -684 ,  -645 ,  -606 ,  -566 ,  -526 ,  -486 ,  -445 ,  -404 ,  -363 ,  -321 ,  -280 ,  -238 ,  -196 ,  -153 ,  -111 ,  -68 ,  -26 ,  16 ,  59 ,  102 ,  145 ,  187 ,  230 ,  273 ,  316 ,  358 ,  401 ,  443 ,  485 ,  527 ,  569 ,  611 ,  652 ,  693 ,  734 ,  774 ,  815 ,  854 ,  894 ,  933 ,  971 ,  1009 ,  1047 ,  1084 ,  1121 ,  1157 ,  1193 ,  1228 ,  1262 ,  1296 ,  1330 ,  1362 ,  1394 ,  1426 ,  1456 ,  1486 ,  1515 ,  1544 ,  1572 ,  1599 ,  1625 ,  1650 ,  1675 ,  1699 ,  1722 ,  1744 ,  1765 ,  1786 ,  1805 ,  1824 ,  1842 ,  1859 ,  1875 ,  1890 ,  1904 ,  1917 ,  1929 ,  1940 ,  1951 ,  1960 ,  1968 ,  1976 ,  1982 ,  1988 ,  1992 ,  1996 ,  1998 ,  2000 ,  2000 ,  2000 ,  1998 ,  1996 ,  1992 ,  1988 ,  1982 ,  1976 ,  1968 ,  1960 ,  1951 ,  1940 ,  1929 ,  1917 ,  1904 ,  1890 ,  1875 ,  1859 ,  1842 ,  1824 ,  1805 ,  1786 ,  1765 ,  1744 ,  1722 ,  1699 ,  1675 ,  1650 ,  1625 ,  1599 ,  1572 ,  1544 ,  1515 ,  1486 ,  1456 ,  1426 ,  1394 ,  1362 ,  1330 ,  1296 ,  1262 ,  1228 ,  1193 ,  1157 ,  1121 ,  1084 ,  1047 ,  1009 ,  971 ,  933 ,  894 ,  854 ,  815 ,  774 ,  734 ,  693 ,  652 ,  611 ,  569 ,  527 ,  485 ,  443 ,  401 ,  358 ,  316 ,  273 ,  230 ,  187 ,  145 ,  102 ,  59 ,  16 ,  -26 ,  -68 ,  -111 ,  -153 ,  -196 ,  -238 ,  -280 ,  -321 ,  -363 ,  -404 ,  -445 ,  -486 ,  -526 ,  -566 ,  -606 ,  -645 ,  -684 ,  -722 ,  -760 ,  -798 ,  -835 ,  -871 ,  -907 ,  -943 ,  -978 ,  -1012 ,  -1046 ,  -1079 ,  -1112 ,  -1144 ,  -1175 ,  -1206 ,  -1236 ,  -1265 ,  -1294 ,  -1322 ,  -1349 ,  -1376 ,  -1401 ,  -1426 ,  -1451 ,  -1474 ,  -1497 ,  -1518 ,  -1539 ,  -1559 ,  -1579 ,  -1597 ,  -1615 ,  -1632 ,  -1648 ,  -1663 ,  -1677 ,  -1690 ,  -1703 ,  -1714 ,  -1725 ,  -1735 ,  -1744 ,  -1752 ,  -1759 ,  -1765 ,  -1770 ,  -1775 ,  -1778 ,  -1781 ,  -1783 ,  -1783 ,  -1783 ,  -1782 ,  -1781 ,  -1778 ,  -1774 ,  -1770 ,  -1764 ,  -1758 ,  -1751 ,  -1743 ,  -1734 ,  -1725 ,  -1714 ,  -1703 ,  -1691 ,  -1678 ,  -1665 ,  -1650 ,  -1635 ,  -1619 ,  -1603 ,  -1585 ,  -1567 ,  -1548 ,  -1528 ,  -1508 ,  -1487 ,  -1466 ,  -1443 ,  -1421 ,  -1397 ,  -1373 ,  -1348 ,  -1323 ,  -1297 ,  -1271 ,  -1244 ,  -1216 ,  -1188 ,  -1160 ,  -1131 ,  -1102 ,  -1072 ,  -1042 ,  -1012 ,  -981 ,  -949 ,  -918 ,  -886 ,  -854 ,  -821 ,  -788 ,  -755 ,  -722 ,  -689 ,  -655 ,  -621 ,  -587 ,  -553 ,  -519 ,  -484 ,  -450 ,  -416 ,  -381 ,  -347 ,  -312 ,  -277 ,  -243 ,  -208 ,  -174 ,  -140 ,  -105 ,  -71 ,  -37 ,  -4 ,  29 ,  62 ,  96 ,  129 ,  162 ,  194 ,  226 ,  258 ,  290 ,  321 ,  352 ,  383 ,  414 ,  443 ,  473 ,  502 ,  531 ,  559 ,  587 ,  615 ,  642 ,  668 ,  694 ,  720 ,  745 ,  769 ,  793 ,  817 ,  839 ,  862 ,  883 ,  905 ,  925 ,  945 ,  965 ,  983 ,  1002 ,  1019 ,  1036 ,  1052 ,  1068 ,  1083 ,  1097 ,  1111 ,  1124 ,  1137 ,  1148 ,  1160 ,  1170 ,  1180 ,  1189 ,  1197 ,  1205 ,  1212 ,  1219 ,  1225 ,  1230 ,  1234 ,  1238 ,  1241 ,  1244 ,  1246 ,  1247 ,  1248 ,  1248 ,  1247 ,  1246 ,  1244 ,  1241 ,  1238 ,  1234 ,  1230 ,  1225 ,  1219 ,  1213 ,  1206 ,  1199 ,  1191 ,  1183 ,  1174 ,  1165 ,  1155 ,  1144 ,  1133 ,  1121 ,  1109 ,  1097 ,  1084 ,  1071 ,  1057 ,  1042 ,  1028 ,  1013 ,  997 ,  981 ,  965 ,  948 ,  931 ,  914 ,  896 ,  878 ,  860 ,  841 ,  822 ,  803 ,  784 ,  764 ,  744 ,  724 ,  704 ,  683 ,  662 ,  641 ,  620 ,  599 ,  578 ,  557 ,  535 ,  513 ,  492 ,  470 ,  448 ,  426 ,  404 ,  383 ,  361 ,  339 ,  317 ,  295 ,  273 ,  251 ,  230 ,  208 ,  187 ,  165 ,  144 ,  123 ,  102 ,  81 ,  60 ,  39 ,  19 ,  0 ,  -20 ,  -40 ,  -60 ,  -79 ,  -98 ,  -117 ,  -136 ,  -154 ,  -172 ,  -190 ,  -208 ,  -225 ,  -242 ,  -259 ,  -276 ,  -292 ,  -307 ,  -323 ,  -338 ,  -353 ,  -367 ,  -382 ,  -395 ,  -409 ,  -422 ,  -435 ,  -447 ,  -459 ,  -471 ,  -482 ,  -493 ,  -503 ,  -513 ,  -523 ,  -532 ,  -541 ,  -550 ,  -558 ,  -566 ,  -573 ,  -580 ,  -587 ,  -593 ,  -599 ,  -605 ,  -610 ,  -614 ,  -619 ,  -623 ,  -626 ,  -629 ,  -632 ,  -635 ,  -637 ,  -638 ,  -640 ,  -641 ,  -641 ,  -641 ,  -641 ,  -641 ,  -640 ,  -639 ,  -638 ,  -636 ,  -634 ,  -631 ,  -629 ,  -625 ,  -622 ,  -618 ,  -615 ,  -610 ,  -606 ,  -601 ,  -596 ,  -591 ,  -585 ,  -579 ,  -573 ,  -567 ,  -560 ,  -554 ,  -547 ,  -540 ,  -532 ,  -525 ,  -517 ,  -509 ,  -501 ,  -493 ,  -484 ,  -476 ,  -467 ,  -458 ,  -449 ,  -440 ,  -431 ,  -421 ,  -412 ,  -402 ,  -392 ,  -383 ,  -373 ,  -363 ,  -353 ,  -343 ,  -333 ,  -323 ,  -313 ,  -303 ,  -293 ,  -282 ,  -272 ,  -262 ,  -252 ,  -242 ,  -232 ,  -221 ,  -211 ,  -201 ,  -191 ,  -181 ,  -171 ,  -161 ,  -152 ,  -142 ,  -132 ,  -123 ,  -113 ,  -104 ,  -94 ,  -85 ,  -76 ,  -67 ,  -58 ,  -49 ,  -41 ,  -32 ,  -24 ,  -15 ,  -7 ,  0 ,  8 ,  16 ,  23 ,  31 ,  38 ,  45 ,  52 ,  59 ,  66 ,  72 ,  79 ,  85 ,  91 ,  97 ,  102 ,  108 ,  113 ,  118 ,  124 ,  128 ,  133 ,  138 ,  142 ,  146 ,  150 ,  154 ,  158 ,  161 ,  164 ,  167 ,  170 ,  173 ,  176 ,  178 ,  181 ,  183 ,  185 ,  187 ,  188 ,  190 ,  191 ,  192 ,  193 ,  194 ,  195 ,  195 ,  196 ,  196 ,  196 ,  196 ,  196 ,  196 ,  196 ,  195 ,  195 ,  194 ,  193 ,  192 ,  191 ,  190 ,  189 ,  187 ,  186 ,  184 ,  183 ,  181 ,  179 ,  177 ,  175 ,  173 ,  171 ,  169 ,  166 ,  164 ,  162 ,  159 ,  157 ,  154 ,  152 ,  149 ,  146 ,  143 ,  141 ,  138 ,  135 ,  132 ,  129 ,  126 ,  123 ,  121 ,  118 ,  115 ,  112 ,  109 ,  106 ,  103 ,  100 ,  97 ,  94 ,  91 ,  88 ,  85 ,  82 ,  80 ,  77 ,  74 ,  71 ,  69 ,  66 ,  63 ,  61 ,  58 ,  55 ,  53 ,  51 ,  48 ,  46 ,  43 ,  41 ,  39 ,  37 ,  35 ,  33 ,  31 ,  29 ,  27 ,  25 ,  23 ,  21 ,  20 ,  18 ,  16 ,  15 ,  14 ,  12 ,  11 ,  10 ,  8 ,  7 ,  6 ,  5 ,  4 ,  3 ,  2 ,  2 ,  1 ,  0 ,  0 ,  0 ,  0 ,  -1 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -3 ,  -3 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  1 ,  1 ,  2 ,  3 ,  3 ,  4 ,  5 ,  5 ,  6 ,  7 ,  8 ,  8 ,  9 ,  10 ,  11 ,  11 ,  12 ,  13 ,  14 ,  15 ,  16 ,  16 ,  17 ,  18 ,  19 ,  20 ,  20 ,  21 ,  22 ,  23 ,  23 ,  24 ,  25 ,  26 ,  26 ,  27 ,  28 ,  28 ,  29 ,  29 ,  30 ,  30 ,  31 ,  31 ,  32 ,  32 ,  33 ,  33 ,  33 ,  34 ,  34 ,  34 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  34 ,  34 ,  34 ,  34 ,  33 ,  33 ,  32 ,  32 ,  32 ,  31 ,  31 ,  30 ,  29 ,  29 ,  28 ,  27 ,  27 ,  26 ,  25 ,  24 ,  23 ,  23 ,  22 ,  21 ,  20 ,  19 ,  18 ,  17 ,  16 ,  15 ,  14 ,  13 ,  11 ,  10 ,  9 ,  8 ,  7 ,  6 ,  4 ,  3 ,  2 ,  1 ,  0 ,  -1 ,  -2 ,  -3 ,  -5 ,  -6 ,  -7 ,  -8 ,  -10 ,  -11 ,  -12 ,  -13 ,  -15 ,  -16 ,  -17 ,  -18 ,  -20 ,  -21 ,  -22 ,  -23 ,  -25 ,  -26 ,  -27 ,  -28 ,  -29 ,  -31 ,  -32 ,  -33 ,  -34 ,  -35 ,  -36 ,  -37 ,  -38 ,  -39 ,  -40 ,  -41 ,  -42 ,  -43 ,  -44 ,  -45 ,  -46 ,  -46 ,  -47 ,  -48 ,  -49 ,  -49 ,  -50 ,  -51 ,  -51 ,  -52 ,  -52 ,  -53 ,  -53 ,  -54 ,  -54 ,  -55 ,  -55 ,  -55 ,  -56 ,  -56 ,  -56 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -57 ,  -56 ,  -56 ,  -56 ,  -56 ,  -55 ,  -55 ,  -55 ,  -54 ,  -54 ,  -53 ,  -53 ,  -52 ,  -52 ,  -51 ,  -51 ,  -50 ,  -49 ,  -49 ,  -48 ,  -47 ,  -47 ,  -46 ,  -45 ,  -44 ,  -44 ,  -43 ,  -42 ,  -41 ,  -40 ,  -39 ,  -39 ,  -38 ,  -37 ,  -36 ,  -35 ,  -34 ,  -33 ,  -32 ,  -31 ,  -30 ,  -29 ,  -28 ,  -27 ,  -26 ,  -25 ,  -24 ,  -23 ,  -22 ,  -21 ,  -20 ,  -19 ,  -18 ,  -17 ,  -16 ,  -15 ,  -14 ,  -13 ,  -12 ,  -11 ,  -10 ,  -10 ,  -9 ,  -8 ,  -7 ,  -6 ,  -5 ,  -4 ,  -3 ,  -2 ,  -2 ,  -1 ,  0 ,  0 ,  1 ,  2 ,  3 ,  3 ,  4 ,  5 ,  5 ,  6 ,  7 ,  8 ,  8 ,  9 ,  9 ,  10 ,  11 ,  11 ,  12 ,  12 ,  13 ,  13 ,  14 ,  14 ,  15 ,  15 ,  15 ,  16 ,  15 ,  17 ,  17 ,  17 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  18 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  19 ,  18 ,  18 ,  18 ,  18 ,  18 ,  716}};
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
    accelerometer.a = &a;
    accelerometer.alpha = &alphaA;
    long int data;

    int count = 0;
    int below = TRUE;
    long int peakMag = 10000000;
    long int lowMag = 0;

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
    }

    int test_count = 0;
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
        //fprintf(fp," %ld ",x_read);

        data = run_filter(&accelerometer,x_read,y_read,z_read);
        if(below){
            if(data > peakMag){
                count += 1;
                below = FALSE;
            }
        }else{
            if(data < lowMag){
                below = TRUE;
            }
        }
        if((test_count % 100) == 0){
            printf("%ld ",data);
        }
        test_count += 1;



    }
    //printf("%d ",count);
}
