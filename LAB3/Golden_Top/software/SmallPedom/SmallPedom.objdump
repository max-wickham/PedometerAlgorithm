
SmallPedom.elf:     file format elf32-littlenios2
SmallPedom.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000045a0 memsz 0x000045a0 flags r-x
    LOAD off    0x000055c0 vaddr 0x000145c0 paddr 0x0001474c align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x000058d8 vaddr 0x000148d8 paddr 0x000148d8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  0000574c  2**0
                  CONTENTS
  2 .text         00003e40  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000760  00013e60  00013e60  00004e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  000145c0  0001474c  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000148d8  000148d8  000058d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000148e8  000148e8  0000574c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000520  00000000  00000000  00005770  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007ab4  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028ce  00000000  00000000  0000d744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003578  00000000  00000000  00010012  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008d8  00000000  00000000  0001358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f90  00000000  00000000  00013e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007f06  00000000  00000000  00015df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001dcfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c28  00000000  00000000  0001dd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002011a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e0c7  00000000  00000000  00025195  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00013e60 l    d  .rodata	00000000 .rodata
000145c0 l    d  .rwdata	00000000 .rwdata
000148d8 l    d  .bss	00000000 .bss
000148e8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SmallPedom_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000145c0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013328 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000146a0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00013d3c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00013ae8 g     F .text	0000002c alt_main
000105c0 g     F .text	00000130 sqrt
0001474c g       *ABS*	00000000 __flash_rwdata_start
00010154 g     F .text	00000024 userA
000132dc g     F .text	0000004c printf
00014730 g     O .rwdata	00000004 jtag_uart
00013e28 g     F .text	00000008 altera_nios2_gen2_irq_init
00013268 g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
00013c30 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000148d8 g     O .bss	00000004 errno
000148e0 g     O .bss	00000004 alt_argv
0001c724 g       *ABS*	00000000 _gp
000146cc g     O .rwdata	00000030 alt_fd_list
00013db0 g     F .text	00000074 alt_find_dev
00013278 g     F .text	00000028 memcpy
00013128 g     F .text	000000dc .hidden __floatsidf
00011e4c g     F .text	000000f4 .hidden __ltdf2
00010978 g     F .text	00000074 __fpclassifyd
000132a0 g     F .text	0000003c _printf_r
00010aec g     F .text	00000064 .hidden __udivsi3
00010180 g     F .text	00000034 insertA
00014734 g     O .rwdata	00000004 alt_max_fd
00010bd0 g     F .text	000008ac .hidden __adddf3
00014724 g     O .rwdata	00000004 __fdlib_version
00014728 g     O .rwdata	00000004 _global_impure_ptr
000148e8 g       *ABS*	00000000 __bss_end
000146fc g     O .rwdata	00000028 alt_dev_null
00013d38 g     F .text	00000004 alt_dcache_flush_all
000130a8 g     F .text	00000080 .hidden __fixdfsi
0001474c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00014738 g     O .rwdata	00000008 alt_dev_list
00013b14 g     F .text	00000060 write
000145c0 g       *ABS*	00000000 __ram_rodata_end
000102bc g     F .text	000000a0 firAccelerometer
00011e4c g     F .text	000000f4 .hidden __ledf2
00010b50 g     F .text	00000058 .hidden __umodsi3
000148e8 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00013204 g     F .text	00000064 .hidden __clzsi2
000101b4 g     F .text	00000060 insertAccelerometer
00013ba4 g     F .text	00000034 altera_avalon_jtag_uart_write
00013394 g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00013b94 g     F .text	00000010 alt_sys_init
00013be0 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
0001035c g     F .text	00000040 filter
00010214 g     F .text	000000a8 userAccelerationGravitationalDirection
00010ba8 g     F .text	00000028 .hidden __mulsi3
000145c0 g       *ABS*	00000000 __ram_rwdata_start
00013e60 g       *ABS*	00000000 __ram_rodata_start
00010178 g     F .text	00000008 gravitationalA
00013c88 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00013e30 g     F .text	00000030 memcmp
000148e8 g       *ABS*	00000000 __alt_stack_base
0001147c g     F .text	000009d0 .hidden __divdf3
00011f40 g     F .text	0000086c .hidden __muldf3
00013d44 g     F .text	0000006c alt_dev_llist_insert
000138dc g     F .text	000000b8 __sfvwrite_small_dev
000148d8 g       *ABS*	00000000 __bss_start
000103c4 g     F .text	000001fc main
000148dc g     O .bss	00000004 alt_envp
000109ec g     F .text	00000008 matherr
00014748 g     O .rwdata	00000004 alt_errno
0001039c g     F .text	00000028 run_filter
000109f4 g     F .text	00000084 .hidden __divsi3
00013e60 g       *ABS*	00000000 __flash_rodata_start
00013b74 g     F .text	00000020 alt_irq_init
000144b1 g     O .rodata	00000100 .hidden __clz_tab
000139b0 g     F .text	00000058 _write_r
0001472c g     O .rwdata	00000004 _impure_ptr
000148e4 g     O .bss	00000004 alt_argc
00014740 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013bd8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000106f0 g     F .text	00000288 __ieee754_sqrt
0001474c g       *ABS*	00000000 _edata
000148e8 g       *ABS*	00000000 _end
00010090 g     F .text	00000094 filterProduct
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010a78 g     F .text	00000074 .hidden __modsi3
00013ce0 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
0001005c g     F .text	00000034 insert
0001000c g       .entry	00000000 _exit
00013bf4 g     F .text	00000020 alt_up_accelerometer_spi_read
00013c14 g     F .text	0000001c alt_up_accelerometer_spi_write
00013994 g     F .text	0000001c strlen
00013e24 g     F .text	00000004 alt_icache_flush_all
000138c0 g     F .text	0000001c __vfprintf_internal
000127ac g     F .text	000008fc .hidden __subdf3
00013a08 g     F .text	000000e0 alt_load
00010124 g     F .text	00000030 fir



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6b1c914 	ori	gp,gp,50980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10923614 	ori	r2,r2,18648

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18d23a14 	ori	r3,r3,18664

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0013a080 	call	13a08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0013ae80 	call	13ae8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <insert>:
struct ListConstants{
    long int data[137];
};

void insert(struct ListAxis* list, long int data){
    list->cursor--;
   1005c:	20c08917 	ldw	r3,548(r4)
   10060:	18ffffc4 	addi	r3,r3,-1
   10064:	20c08915 	stw	r3,548(r4)
    if(list->cursor < 0){
   10068:	1800030e 	bge	r3,zero,10078 <insert+0x1c>
        list->cursor += list->length;
   1006c:	20808a17 	ldw	r2,552(r4)
   10070:	10c7883a 	add	r3,r2,r3
   10074:	20c08915 	stw	r3,548(r4)
    }
    list->data[list->cursor] = data;
   10078:	20808917 	ldw	r2,548(r4)
   1007c:	1085883a 	add	r2,r2,r2
   10080:	1085883a 	add	r2,r2,r2
   10084:	2089883a 	add	r4,r4,r2
   10088:	21400015 	stw	r5,0(r4)
   1008c:	f800283a 	ret

00010090 <filterProduct>:
}

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   10090:	defffa04 	addi	sp,sp,-24
   10094:	dd000415 	stw	r20,16(sp)
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   10098:	25008a17 	ldw	r20,552(r4)
        list->cursor += list->length;
    }
    list->data[list->cursor] = data;
}

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   1009c:	dcc00315 	stw	r19,12(sp)
   100a0:	dc800215 	stw	r18,8(sp)
   100a4:	dc400115 	stw	r17,4(sp)
   100a8:	dc000015 	stw	r16,0(sp)
   100ac:	dfc00515 	stw	ra,20(sp)
   100b0:	2027883a 	mov	r19,r4
   100b4:	2825883a 	mov	r18,r5
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   100b8:	0021883a 	mov	r16,zero
    }
    list->data[list->cursor] = data;
}

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
    long int total = 0;
   100bc:	0023883a 	mov	r17,zero
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   100c0:	85000f0e 	bge	r16,r20,10100 <filterProduct+0x70>
        cursor = (i + a->cursor) % a->length;
        data = ((a->data[cursor])*(alpha->data[i]));
   100c4:	99008917 	ldw	r4,548(r19)
   100c8:	a00b883a 	mov	r5,r20
   100cc:	94800104 	addi	r18,r18,4
   100d0:	8109883a 	add	r4,r16,r4
   100d4:	0010a780 	call	10a78 <__modsi3>
   100d8:	1085883a 	add	r2,r2,r2
   100dc:	1085883a 	add	r2,r2,r2
   100e0:	9885883a 	add	r2,r19,r2
   100e4:	917fff17 	ldw	r5,-4(r18)
   100e8:	11000017 	ldw	r4,0(r2)

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   100ec:	84000044 	addi	r16,r16,1
        cursor = (i + a->cursor) % a->length;
        data = ((a->data[cursor])*(alpha->data[i]));
   100f0:	0010ba80 	call	10ba8 <__mulsi3>
        data >>= 19;
        total += data;
   100f4:	1005d4fa 	srai	r2,r2,19
   100f8:	88a3883a 	add	r17,r17,r2
   100fc:	003ff006 	br	100c0 <filterProduct+0x30>
    }
    return total;
}
   10100:	8805883a 	mov	r2,r17
   10104:	dfc00517 	ldw	ra,20(sp)
   10108:	dd000417 	ldw	r20,16(sp)
   1010c:	dcc00317 	ldw	r19,12(sp)
   10110:	dc800217 	ldw	r18,8(sp)
   10114:	dc400117 	ldw	r17,4(sp)
   10118:	dc000017 	ldw	r16,0(sp)
   1011c:	dec00604 	addi	sp,sp,24
   10120:	f800283a 	ret

00010124 <fir>:
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
   10124:	defffe04 	addi	sp,sp,-8
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10128:	21400117 	ldw	r5,4(r4)
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
   1012c:	dc000015 	stw	r16,0(sp)
   10130:	2021883a 	mov	r16,r4
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10134:	21000017 	ldw	r4,0(r4)
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
   10138:	dfc00115 	stw	ra,4(sp)
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   1013c:	00100900 	call	10090 <filterProduct>
   10140:	80800215 	stw	r2,8(r16)
}
   10144:	dfc00117 	ldw	ra,4(sp)
   10148:	dc000017 	ldw	r16,0(sp)
   1014c:	dec00204 	addi	sp,sp,8
   10150:	f800283a 	ret

00010154 <userA>:

long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
   10154:	20c00017 	ldw	r3,0(r4)
   10158:	18808917 	ldw	r2,548(r3)
   1015c:	1085883a 	add	r2,r2,r2
   10160:	1085883a 	add	r2,r2,r2
   10164:	1885883a 	add	r2,r3,r2
   10168:	10c00017 	ldw	r3,0(r2)
   1016c:	20800217 	ldw	r2,8(r4)
}
   10170:	1885c83a 	sub	r2,r3,r2
   10174:	f800283a 	ret

00010178 <gravitationalA>:

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
}
   10178:	20800217 	ldw	r2,8(r4)
   1017c:	f800283a 	ret

00010180 <insertA>:
    struct ListAccelerometer* a;
    struct ListConstantsAccelerometer* alpha;
};

void insertA(struct ListAccelerometer* list, long int data){
    list->cursor--;
   10180:	20c10217 	ldw	r3,1032(r4)
   10184:	18ffffc4 	addi	r3,r3,-1
   10188:	20c10215 	stw	r3,1032(r4)
    if(list->cursor < 0){
   1018c:	1800030e 	bge	r3,zero,1019c <insertA+0x1c>
        list->cursor += list->length;
   10190:	20810317 	ldw	r2,1036(r4)
   10194:	10c7883a 	add	r3,r2,r3
   10198:	20c10215 	stw	r3,1032(r4)
    }
    list->data[list->cursor] = data;
   1019c:	20810217 	ldw	r2,1032(r4)
   101a0:	1085883a 	add	r2,r2,r2
   101a4:	1085883a 	add	r2,r2,r2
   101a8:	2089883a 	add	r4,r4,r2
   101ac:	21400015 	stw	r5,0(r4)
   101b0:	f800283a 	ret

000101b4 <insertAccelerometer>:
}

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insert(accelerometer->x->a,x);
   101b4:	20800017 	ldw	r2,0(r4)
        list->cursor += list->length;
    }
    list->data[list->cursor] = data;
}

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101b8:	defffc04 	addi	sp,sp,-16
   101bc:	dc000015 	stw	r16,0(sp)
   101c0:	2021883a 	mov	r16,r4
    insert(accelerometer->x->a,x);
   101c4:	11000017 	ldw	r4,0(r2)
        list->cursor += list->length;
    }
    list->data[list->cursor] = data;
}

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101c8:	dfc00315 	stw	ra,12(sp)
   101cc:	dc800215 	stw	r18,8(sp)
   101d0:	dc400115 	stw	r17,4(sp)
   101d4:	3025883a 	mov	r18,r6
   101d8:	3823883a 	mov	r17,r7
    insert(accelerometer->x->a,x);
   101dc:	001005c0 	call	1005c <insert>
    insert(accelerometer->y->a,y);
   101e0:	80800117 	ldw	r2,4(r16)
   101e4:	900b883a 	mov	r5,r18
   101e8:	11000017 	ldw	r4,0(r2)
   101ec:	001005c0 	call	1005c <insert>
    insert(accelerometer->z->a,z);
   101f0:	80800217 	ldw	r2,8(r16)
   101f4:	880b883a 	mov	r5,r17
   101f8:	11000017 	ldw	r4,0(r2)
}
   101fc:	dfc00317 	ldw	ra,12(sp)
   10200:	dc800217 	ldw	r18,8(sp)
   10204:	dc400117 	ldw	r17,4(sp)
   10208:	dc000017 	ldw	r16,0(sp)
   1020c:	dec00404 	addi	sp,sp,16
}

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insert(accelerometer->x->a,x);
    insert(accelerometer->y->a,y);
    insert(accelerometer->z->a,z);
   10210:	001005c1 	jmpi	1005c <insert>

00010214 <userAccelerationGravitationalDirection>:
}

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10214:	defffb04 	addi	sp,sp,-20
   10218:	dc000015 	stw	r16,0(sp)
   1021c:	2021883a 	mov	r16,r4
    fir(accelerometer->x);
   10220:	21000017 	ldw	r4,0(r4)
    insert(accelerometer->x->a,x);
    insert(accelerometer->y->a,y);
    insert(accelerometer->z->a,z);
}

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10224:	dfc00415 	stw	ra,16(sp)
   10228:	dcc00315 	stw	r19,12(sp)
   1022c:	dc800215 	stw	r18,8(sp)
   10230:	dc400115 	stw	r17,4(sp)
    fir(accelerometer->x);
   10234:	00101240 	call	10124 <fir>
    fir(accelerometer->y);
   10238:	81000117 	ldw	r4,4(r16)
   1023c:	00101240 	call	10124 <fir>
    fir(accelerometer->z);
   10240:	81000217 	ldw	r4,8(r16)
   10244:	00101240 	call	10124 <fir>
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10248:	84400017 	ldw	r17,0(r16)
   1024c:	8809883a 	mov	r4,r17
   10250:	00101540 	call	10154 <userA>
   10254:	89400217 	ldw	r5,8(r17)
   10258:	1009883a 	mov	r4,r2
   1025c:	0010ba80 	call	10ba8 <__mulsi3>
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10260:	84800117 	ldw	r18,4(r16)

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
    fir(accelerometer->x);
    fir(accelerometer->y);
    fir(accelerometer->z);
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10264:	1027883a 	mov	r19,r2
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10268:	9009883a 	mov	r4,r18
   1026c:	00101540 	call	10154 <userA>
   10270:	91400217 	ldw	r5,8(r18)
   10274:	1009883a 	mov	r4,r2
   10278:	0010ba80 	call	10ba8 <__mulsi3>
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   1027c:	84000217 	ldw	r16,8(r16)
long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
    fir(accelerometer->x);
    fir(accelerometer->y);
    fir(accelerometer->z);
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10280:	1023883a 	mov	r17,r2
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
    return (x_sum + y_sum + z_sum);
   10284:	9c63883a 	add	r17,r19,r17
    fir(accelerometer->x);
    fir(accelerometer->y);
    fir(accelerometer->z);
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   10288:	8009883a 	mov	r4,r16
   1028c:	00101540 	call	10154 <userA>
    return (x_sum + y_sum + z_sum);
   10290:	81400217 	ldw	r5,8(r16)
   10294:	1009883a 	mov	r4,r2
   10298:	0010ba80 	call	10ba8 <__mulsi3>
}
   1029c:	1445883a 	add	r2,r2,r17
   102a0:	dfc00417 	ldw	ra,16(sp)
   102a4:	dcc00317 	ldw	r19,12(sp)
   102a8:	dc800217 	ldw	r18,8(sp)
   102ac:	dc400117 	ldw	r17,4(sp)
   102b0:	dc000017 	ldw	r16,0(sp)
   102b4:	dec00504 	addi	sp,sp,20
   102b8:	f800283a 	ret

000102bc <firAccelerometer>:

long int firAccelerometer(struct Accelerometer* accelerometer){
   102bc:	defffa04 	addi	sp,sp,-24
   102c0:	dc800215 	stw	r18,8(sp)
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102c4:	24800317 	ldw	r18,12(r4)
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
    return (x_sum + y_sum + z_sum);
}

long int firAccelerometer(struct Accelerometer* accelerometer){
   102c8:	dcc00315 	stw	r19,12(sp)
   102cc:	dd000415 	stw	r20,16(sp)
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102d0:	94c10317 	ldw	r19,1036(r18)
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
    return (x_sum + y_sum + z_sum);
}

long int firAccelerometer(struct Accelerometer* accelerometer){
   102d4:	dc400115 	stw	r17,4(sp)
   102d8:	dc000015 	stw	r16,0(sp)
   102dc:	dfc00515 	stw	ra,20(sp)
   102e0:	2029883a 	mov	r20,r4
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102e4:	0021883a 	mov	r16,zero
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
    return (x_sum + y_sum + z_sum);
}

long int firAccelerometer(struct Accelerometer* accelerometer){
    long int total = 0;
   102e8:	0023883a 	mov	r17,zero
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102ec:	84c0120e 	bge	r16,r19,10338 <firAccelerometer+0x7c>
        cursor = (i + accelerometer->a->cursor) % accelerometer->a->length;
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   102f0:	91010217 	ldw	r4,1032(r18)
   102f4:	980b883a 	mov	r5,r19
   102f8:	8109883a 	add	r4,r16,r4
   102fc:	0010a780 	call	10a78 <__modsi3>
   10300:	a1000417 	ldw	r4,16(r20)
   10304:	8407883a 	add	r3,r16,r16
   10308:	1085883a 	add	r2,r2,r2
   1030c:	1085883a 	add	r2,r2,r2
   10310:	18c7883a 	add	r3,r3,r3
   10314:	20c7883a 	add	r3,r4,r3
   10318:	9085883a 	add	r2,r18,r2
   1031c:	19400017 	ldw	r5,0(r3)
   10320:	11000017 	ldw	r4,0(r2)

long int firAccelerometer(struct Accelerometer* accelerometer){
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   10324:	84000044 	addi	r16,r16,1
        cursor = (i + accelerometer->a->cursor) % accelerometer->a->length;
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   10328:	0010ba80 	call	10ba8 <__mulsi3>
        data >>= 18;
        total += data;
   1032c:	1005d4ba 	srai	r2,r2,18
   10330:	88a3883a 	add	r17,r17,r2
   10334:	003fed06 	br	102ec <firAccelerometer+0x30>
    }
    return total;
}
   10338:	8805883a 	mov	r2,r17
   1033c:	dfc00517 	ldw	ra,20(sp)
   10340:	dd000417 	ldw	r20,16(sp)
   10344:	dcc00317 	ldw	r19,12(sp)
   10348:	dc800217 	ldw	r18,8(sp)
   1034c:	dc400117 	ldw	r17,4(sp)
   10350:	dc000017 	ldw	r16,0(sp)
   10354:	dec00604 	addi	sp,sp,24
   10358:	f800283a 	ret

0001035c <filter>:

long int filter(struct Accelerometer* accelerometer){
   1035c:	defffd04 	addi	sp,sp,-12
   10360:	dc400115 	stw	r17,4(sp)
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10364:	24400317 	ldw	r17,12(r4)
        total += data;
    }
    return total;
}

long int filter(struct Accelerometer* accelerometer){
   10368:	dfc00215 	stw	ra,8(sp)
   1036c:	dc000015 	stw	r16,0(sp)
   10370:	2021883a 	mov	r16,r4
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10374:	00102140 	call	10214 <userAccelerationGravitationalDirection>
   10378:	8809883a 	mov	r4,r17
   1037c:	100b883a 	mov	r5,r2
   10380:	00101800 	call	10180 <insertA>
    return firAccelerometer(accelerometer);
   10384:	8009883a 	mov	r4,r16
}
   10388:	dfc00217 	ldw	ra,8(sp)
   1038c:	dc400117 	ldw	r17,4(sp)
   10390:	dc000017 	ldw	r16,0(sp)
   10394:	dec00304 	addi	sp,sp,12
    return total;
}

long int filter(struct Accelerometer* accelerometer){
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
    return firAccelerometer(accelerometer);
   10398:	00102bc1 	jmpi	102bc <firAccelerometer>

0001039c <run_filter>:
}

//StepDetection
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   1039c:	defffe04 	addi	sp,sp,-8
   103a0:	dc000015 	stw	r16,0(sp)
   103a4:	dfc00115 	stw	ra,4(sp)
   103a8:	2021883a 	mov	r16,r4
    insertAccelerometer(accelerometer,x,y,z);
   103ac:	00101b40 	call	101b4 <insertAccelerometer>
    return filter(accelerometer);
   103b0:	8009883a 	mov	r4,r16
}
   103b4:	dfc00117 	ldw	ra,4(sp)
   103b8:	dc000017 	ldw	r16,0(sp)
   103bc:	dec00204 	addi	sp,sp,8
}

//StepDetection
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insertAccelerometer(accelerometer,x,y,z);
    return filter(accelerometer);
   103c0:	001035c1 	jmpi	1035c <filter>

000103c4 <main>:
}

int main(){
   103c4:	defbb704 	addi	sp,sp,-4388
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   103c8:	d8c3a704 	addi	r3,sp,3740
   103cc:	01400074 	movhi	r5,1
    return filter(accelerometer);
}

int main(){
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
   103d0:	00802244 	movi	r2,137
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   103d4:	1809883a 	mov	r4,r3
   103d8:	01808904 	movi	r6,548
   103dc:	294fa004 	addi	r5,r5,16000
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insertAccelerometer(accelerometer,x,y,z);
    return filter(accelerometer);
}

int main(){
   103e0:	dfc44815 	stw	ra,4384(sp)
   103e4:	dd844715 	stw	r22,4380(sp)
   103e8:	dd444615 	stw	r21,4376(sp)
   103ec:	dd044515 	stw	r20,4372(sp)
   103f0:	dcc44415 	stw	r19,4368(sp)
   103f4:	dc844315 	stw	r18,4364(sp)
   103f8:	dc444215 	stw	r17,4360(sp)
   103fc:	dc044115 	stw	r16,4356(sp)
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
   10400:	d883a515 	stw	r2,3732(sp)
   10404:	d883a615 	stw	r2,3736(sp)
    struct ListAxis y; y.cursor = 137; y.length = 137;
   10408:	d8831a15 	stw	r2,3176(sp)
   1040c:	d8831b15 	stw	r2,3180(sp)
    struct ListAxis z; z.cursor = 137; z.length = 137;
   10410:	d8828f15 	stw	r2,2620(sp)
   10414:	d8829015 	stw	r2,2624(sp)
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   10418:	00132780 	call	13278 <memcpy>
   1041c:	1007883a 	mov	r3,r2
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10420:	d8831c04 	addi	r2,sp,3184
   10424:	d8843b15 	stw	r2,4332(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10428:	d8829104 	addi	r2,sp,2628
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   1042c:	d8c43c15 	stw	r3,4336(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10430:	d8843815 	stw	r2,4320(sp)
   10434:	d8c43915 	stw	r3,4324(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10438:	d8820604 	addi	r2,sp,2072
   1043c:	d8c43615 	stw	r3,4312(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   10440:	01400074 	movhi	r5,1
   10444:	d8c10404 	addi	r3,sp,1040
   10448:	1809883a 	mov	r4,r3
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   1044c:	d8843515 	stw	r2,4308(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   10450:	01810204 	movi	r6,1032
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
   10454:	00804084 	movi	r2,258
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   10458:	29502904 	addi	r5,r5,16548
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   1045c:	d8043d15 	stw	zero,4340(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10460:	d8043a15 	stw	zero,4328(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10464:	d8043715 	stw	zero,4316(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
   10468:	d8010215 	stw	zero,1032(sp)
   1046c:	d8810315 	stw	r2,1036(sp)
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   10470:	00132780 	call	13278 <memcpy>
   10474:	1007883a 	mov	r3,r2
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10478:	d8843b04 	addi	r2,sp,4332
   1047c:	d8843015 	stw	r2,4288(sp)

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10480:	01000074 	movhi	r4,1
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10484:	d8843804 	addi	r2,sp,4320
   10488:	d8843115 	stw	r2,4292(sp)

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1048c:	210f9804 	addi	r4,r4,15968
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10490:	d8843504 	addi	r2,sp,4308
   10494:	d8843215 	stw	r2,4296(sp)
    accelerometer.a = &a;
   10498:	dec43315 	stw	sp,4300(sp)
    accelerometer.alpha = &alphaA;
   1049c:	d8c43415 	stw	r3,4304(sp)

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104a0:	0013bd80 	call	13bd8 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   104a4:	10003b26 	beq	r2,zero,10594 <main+0x1d0>
   104a8:	1023883a 	mov	r17,r2
   104ac:	04000044 	movi	r16,1
   104b0:	0025883a 	mov	r18,zero
    }

    int test_count = 0;
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   104b4:	d9444004 	addi	r5,sp,4352
   104b8:	8809883a 	mov	r4,r17
   104bc:	0013c300 	call	13c30 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   104c0:	d9443f04 	addi	r5,sp,4348
   104c4:	8809883a 	mov	r4,r17
   104c8:	0013c880 	call	13c88 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   104cc:	d9443e04 	addi	r5,sp,4344
   104d0:	8809883a 	mov	r4,r17
   104d4:	0013ce00 	call	13ce0 <alt_up_accelerometer_spi_read_z_axis>
        //fprintf(fp," %ld ",x_read);

        data = run_filter(&accelerometer,x_read,y_read,z_read);
   104d8:	d9c43e17 	ldw	r7,4344(sp)
   104dc:	d9843f17 	ldw	r6,4348(sp)
   104e0:	d9444017 	ldw	r5,4352(sp)
   104e4:	d9043004 	addi	r4,sp,4288
   104e8:	001039c0 	call	1039c <run_filter>
   104ec:	1029883a 	mov	r20,r2
long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
}

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
   104f0:	d8843017 	ldw	r2,4288(sp)
   104f4:	11400217 	ldw	r5,8(r2)
   104f8:	d8843117 	ldw	r2,4292(sp)

        data = run_filter(&accelerometer,x_read,y_read,z_read);
        gravX = gravitationalA(accelerometer.x);
        gravY = gravitationalA(accelerometer.y);
        gravZ = gravitationalA(accelerometer.z);
        gravTotal = sqrt((gravX*gravX+gravY*gravY+gravZ*gravZ));
   104fc:	2809883a 	mov	r4,r5
long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
}

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
   10500:	15800217 	ldw	r22,8(r2)
   10504:	d8843217 	ldw	r2,4296(sp)
   10508:	15400217 	ldw	r21,8(r2)

        data = run_filter(&accelerometer,x_read,y_read,z_read);
        gravX = gravitationalA(accelerometer.x);
        gravY = gravitationalA(accelerometer.y);
        gravZ = gravitationalA(accelerometer.z);
        gravTotal = sqrt((gravX*gravX+gravY*gravY+gravZ*gravZ));
   1050c:	0010ba80 	call	10ba8 <__mulsi3>
   10510:	b00b883a 	mov	r5,r22
   10514:	b009883a 	mov	r4,r22
   10518:	1027883a 	mov	r19,r2
   1051c:	0010ba80 	call	10ba8 <__mulsi3>
   10520:	a80b883a 	mov	r5,r21
   10524:	a809883a 	mov	r4,r21
   10528:	98a7883a 	add	r19,r19,r2
   1052c:	0010ba80 	call	10ba8 <__mulsi3>
   10530:	9889883a 	add	r4,r19,r2
   10534:	00131280 	call	13128 <__floatsidf>
   10538:	1009883a 	mov	r4,r2
   1053c:	180b883a 	mov	r5,r3
   10540:	00105c00 	call	105c0 <sqrt>
        correctGrav = (gravTotal < 450) & (gravTotal > 350);
        //printf("%ld\n",gravTotal);
        if(correctGrav){
   10544:	180b883a 	mov	r5,r3
   10548:	1009883a 	mov	r4,r2
   1054c:	00130a80 	call	130a8 <__fixdfsi>
   10550:	10bfa844 	addi	r2,r2,-351
   10554:	00c01884 	movi	r3,98
   10558:	18bfd636 	bltu	r3,r2,104b4 <main+0xf0>
            if(below){
   1055c:	80000b26 	beq	r16,zero,1058c <main+0x1c8>
                if(data > peakMag){
   10560:	00855f04 	movi	r2,5500
   10564:	15000216 	blt	r2,r20,10570 <main+0x1ac>
   10568:	04000044 	movi	r16,1
   1056c:	003fd106 	br	104b4 <main+0xf0>
                    count += 1;
   10570:	94800044 	addi	r18,r18,1
                    printf("%ld\n",count);
   10574:	01000074 	movhi	r4,1
   10578:	900b883a 	mov	r5,r18
   1057c:	210f9e04 	addi	r4,r4,15992
   10580:	00132dc0 	call	132dc <printf>
                    below = FALSE;
   10584:	0021883a 	mov	r16,zero
   10588:	003fca06 	br	104b4 <main+0xf0>
                }
            }else{
                if(data < lowMag){
                    below = TRUE;
   1058c:	a020d7fa 	srli	r16,r20,31
   10590:	003fc806 	br	104b4 <main+0xf0>
        }


    }
    //printf("%d ",count);
}
   10594:	00800044 	movi	r2,1
   10598:	dfc44817 	ldw	ra,4384(sp)
   1059c:	dd844717 	ldw	r22,4380(sp)
   105a0:	dd444617 	ldw	r21,4376(sp)
   105a4:	dd044517 	ldw	r20,4372(sp)
   105a8:	dcc44417 	ldw	r19,4368(sp)
   105ac:	dc844317 	ldw	r18,4364(sp)
   105b0:	dc444217 	ldw	r17,4360(sp)
   105b4:	dc044117 	ldw	r16,4356(sp)
   105b8:	dec44904 	addi	sp,sp,4388
   105bc:	f800283a 	ret

000105c0 <sqrt>:
   105c0:	defff104 	addi	sp,sp,-60
   105c4:	dd000d15 	stw	r20,52(sp)
   105c8:	05000074 	movhi	r20,1
   105cc:	dcc00c15 	stw	r19,48(sp)
   105d0:	dc800b15 	stw	r18,44(sp)
   105d4:	dc400a15 	stw	r17,40(sp)
   105d8:	dc000915 	stw	r16,36(sp)
   105dc:	dfc00e15 	stw	ra,56(sp)
   105e0:	a511c904 	addi	r20,r20,18212
   105e4:	2027883a 	mov	r19,r4
   105e8:	2825883a 	mov	r18,r5
   105ec:	00106f00 	call	106f0 <__ieee754_sqrt>
   105f0:	1821883a 	mov	r16,r3
   105f4:	a0c00017 	ldw	r3,0(r20)
   105f8:	1023883a 	mov	r17,r2
   105fc:	00bfffc4 	movi	r2,-1
   10600:	18800a26 	beq	r3,r2,1062c <sqrt+0x6c>
   10604:	9809883a 	mov	r4,r19
   10608:	900b883a 	mov	r5,r18
   1060c:	00109780 	call	10978 <__fpclassifyd>
   10610:	10000626 	beq	r2,zero,1062c <sqrt+0x6c>
   10614:	000d883a 	mov	r6,zero
   10618:	000f883a 	mov	r7,zero
   1061c:	9809883a 	mov	r4,r19
   10620:	900b883a 	mov	r5,r18
   10624:	0011e4c0 	call	11e4c <__ledf2>
   10628:	10000a16 	blt	r2,zero,10654 <sqrt+0x94>
   1062c:	8805883a 	mov	r2,r17
   10630:	8007883a 	mov	r3,r16
   10634:	dfc00e17 	ldw	ra,56(sp)
   10638:	dd000d17 	ldw	r20,52(sp)
   1063c:	dcc00c17 	ldw	r19,48(sp)
   10640:	dc800b17 	ldw	r18,44(sp)
   10644:	dc400a17 	ldw	r17,40(sp)
   10648:	dc000917 	ldw	r16,36(sp)
   1064c:	dec00f04 	addi	sp,sp,60
   10650:	f800283a 	ret
   10654:	00800044 	movi	r2,1
   10658:	d8800015 	stw	r2,0(sp)
   1065c:	a4000017 	ldw	r16,0(r20)
   10660:	00800074 	movhi	r2,1
   10664:	10912b04 	addi	r2,r2,17580
   10668:	d8800115 	stw	r2,4(sp)
   1066c:	d8000815 	stw	zero,32(sp)
   10670:	dcc00415 	stw	r19,16(sp)
   10674:	dc800515 	stw	r18,20(sp)
   10678:	dcc00215 	stw	r19,8(sp)
   1067c:	dc800315 	stw	r18,12(sp)
   10680:	80000a1e 	bne	r16,zero,106ac <sqrt+0xec>
   10684:	d8000615 	stw	zero,24(sp)
   10688:	d8000715 	stw	zero,28(sp)
   1068c:	d809883a 	mov	r4,sp
   10690:	00109ec0 	call	109ec <matherr>
   10694:	10000e26 	beq	r2,zero,106d0 <sqrt+0x110>
   10698:	d8800817 	ldw	r2,32(sp)
   1069c:	1000101e 	bne	r2,zero,106e0 <sqrt+0x120>
   106a0:	d8800617 	ldw	r2,24(sp)
   106a4:	d8c00717 	ldw	r3,28(sp)
   106a8:	003fe206 	br	10634 <sqrt+0x74>
   106ac:	000d883a 	mov	r6,zero
   106b0:	000f883a 	mov	r7,zero
   106b4:	0009883a 	mov	r4,zero
   106b8:	000b883a 	mov	r5,zero
   106bc:	001147c0 	call	1147c <__divdf3>
   106c0:	d8800615 	stw	r2,24(sp)
   106c4:	d8c00715 	stw	r3,28(sp)
   106c8:	00800084 	movi	r2,2
   106cc:	80bfef1e 	bne	r16,r2,1068c <sqrt+0xcc>
   106d0:	00132680 	call	13268 <__errno>
   106d4:	00c00844 	movi	r3,33
   106d8:	10c00015 	stw	r3,0(r2)
   106dc:	003fee06 	br	10698 <sqrt+0xd8>
   106e0:	00132680 	call	13268 <__errno>
   106e4:	d8c00817 	ldw	r3,32(sp)
   106e8:	10c00015 	stw	r3,0(r2)
   106ec:	003fec06 	br	106a0 <sqrt+0xe0>

000106f0 <__ieee754_sqrt>:
   106f0:	defffd04 	addi	sp,sp,-12
   106f4:	dc400115 	stw	r17,4(sp)
   106f8:	dc000015 	stw	r16,0(sp)
   106fc:	dfc00215 	stw	ra,8(sp)
   10700:	28dffc2c 	andhi	r3,r5,32752
   10704:	009ffc34 	movhi	r2,32752
   10708:	2821883a 	mov	r16,r5
   1070c:	2023883a 	mov	r17,r4
   10710:	200d883a 	mov	r6,r4
   10714:	18807b26 	beq	r3,r2,10904 <__ieee754_sqrt+0x214>
   10718:	01405f0e 	bge	zero,r5,10898 <__ieee754_sqrt+0x1a8>
   1071c:	2815d53a 	srai	r10,r5,20
   10720:	50006a26 	beq	r10,zero,108cc <__ieee754_sqrt+0x1dc>
   10724:	00c00434 	movhi	r3,16
   10728:	52bf0044 	addi	r10,r10,-1023
   1072c:	18ffffc4 	addi	r3,r3,-1
   10730:	80c6703a 	and	r3,r16,r3
   10734:	5080004c 	andi	r2,r10,1
   10738:	18c00434 	orhi	r3,r3,16
   1073c:	1000511e 	bne	r2,zero,10884 <__ieee754_sqrt+0x194>
   10740:	3004d7fa 	srli	r2,r6,31
   10744:	5015d07a 	srai	r10,r10,1
   10748:	18c7883a 	add	r3,r3,r3
   1074c:	10c5883a 	add	r2,r2,r3
   10750:	01400584 	movi	r5,22
   10754:	3187883a 	add	r3,r6,r6
   10758:	0013883a 	mov	r9,zero
   1075c:	000f883a 	mov	r7,zero
   10760:	01000834 	movhi	r4,32
   10764:	390d883a 	add	r6,r7,r4
   10768:	1810d7fa 	srli	r8,r3,31
   1076c:	297fffc4 	addi	r5,r5,-1
   10770:	11800316 	blt	r2,r6,10780 <__ieee754_sqrt+0x90>
   10774:	1185c83a 	sub	r2,r2,r6
   10778:	310f883a 	add	r7,r6,r4
   1077c:	4913883a 	add	r9,r9,r4
   10780:	1085883a 	add	r2,r2,r2
   10784:	4085883a 	add	r2,r8,r2
   10788:	18c7883a 	add	r3,r3,r3
   1078c:	2008d07a 	srli	r4,r4,1
   10790:	283ff41e 	bne	r5,zero,10764 <__ieee754_sqrt+0x74>
   10794:	01200034 	movhi	r4,32768
   10798:	01800804 	movi	r6,32
   1079c:	0011883a 	mov	r8,zero
   107a0:	0019883a 	mov	r12,zero
   107a4:	201b883a 	mov	r13,r4
   107a8:	00000806 	br	107cc <__ieee754_sqrt+0xdc>
   107ac:	38801726 	beq	r7,r2,1080c <__ieee754_sqrt+0x11c>
   107b0:	180ad7fa 	srli	r5,r3,31
   107b4:	1085883a 	add	r2,r2,r2
   107b8:	31bfffc4 	addi	r6,r6,-1
   107bc:	2885883a 	add	r2,r5,r2
   107c0:	18c7883a 	add	r3,r3,r3
   107c4:	2008d07a 	srli	r4,r4,1
   107c8:	30001726 	beq	r6,zero,10828 <__ieee754_sqrt+0x138>
   107cc:	230b883a 	add	r5,r4,r12
   107d0:	38bff60e 	bge	r7,r2,107ac <__ieee754_sqrt+0xbc>
   107d4:	2ae0002c 	andhi	r11,r5,32768
   107d8:	2919883a 	add	r12,r5,r4
   107dc:	5b400826 	beq	r11,r13,10800 <__ieee754_sqrt+0x110>
   107e0:	3817883a 	mov	r11,r7
   107e4:	11c5c83a 	sub	r2,r2,r7
   107e8:	1940012e 	bgeu	r3,r5,107f0 <__ieee754_sqrt+0x100>
   107ec:	10bfffc4 	addi	r2,r2,-1
   107f0:	1947c83a 	sub	r3,r3,r5
   107f4:	4111883a 	add	r8,r8,r4
   107f8:	580f883a 	mov	r7,r11
   107fc:	003fec06 	br	107b0 <__ieee754_sqrt+0xc0>
   10800:	603ff716 	blt	r12,zero,107e0 <__ieee754_sqrt+0xf0>
   10804:	3ac00044 	addi	r11,r7,1
   10808:	003ff606 	br	107e4 <__ieee754_sqrt+0xf4>
   1080c:	19401936 	bltu	r3,r5,10874 <__ieee754_sqrt+0x184>
   10810:	2ae0002c 	andhi	r11,r5,32768
   10814:	2919883a 	add	r12,r5,r4
   10818:	5b404526 	beq	r11,r13,10930 <__ieee754_sqrt+0x240>
   1081c:	1017883a 	mov	r11,r2
   10820:	0005883a 	mov	r2,zero
   10824:	003ff206 	br	107f0 <__ieee754_sqrt+0x100>
   10828:	10c4b03a 	or	r2,r2,r3
   1082c:	10000426 	beq	r2,zero,10840 <__ieee754_sqrt+0x150>
   10830:	00bfffc4 	movi	r2,-1
   10834:	40804026 	beq	r8,r2,10938 <__ieee754_sqrt+0x248>
   10838:	4080004c 	andi	r2,r8,1
   1083c:	4091883a 	add	r8,r8,r2
   10840:	4004d07a 	srli	r2,r8,1
   10844:	4807d07a 	srai	r3,r9,1
   10848:	010ff834 	movhi	r4,16352
   1084c:	4a40004c 	andi	r9,r9,1
   10850:	1909883a 	add	r4,r3,r4
   10854:	4800091e 	bne	r9,zero,1087c <__ieee754_sqrt+0x18c>
   10858:	5006953a 	slli	r3,r10,20
   1085c:	1907883a 	add	r3,r3,r4
   10860:	dfc00217 	ldw	ra,8(sp)
   10864:	dc400117 	ldw	r17,4(sp)
   10868:	dc000017 	ldw	r16,0(sp)
   1086c:	dec00304 	addi	sp,sp,12
   10870:	f800283a 	ret
   10874:	3805883a 	mov	r2,r7
   10878:	003fcd06 	br	107b0 <__ieee754_sqrt+0xc0>
   1087c:	10a00034 	orhi	r2,r2,32768
   10880:	003ff506 	br	10858 <__ieee754_sqrt+0x168>
   10884:	3004d7fa 	srli	r2,r6,31
   10888:	18c7883a 	add	r3,r3,r3
   1088c:	318d883a 	add	r6,r6,r6
   10890:	10c7883a 	add	r3,r2,r3
   10894:	003faa06 	br	10740 <__ieee754_sqrt+0x50>
   10898:	00a00034 	movhi	r2,32768
   1089c:	10bfffc4 	addi	r2,r2,-1
   108a0:	2884703a 	and	r2,r5,r2
   108a4:	1104b03a 	or	r2,r2,r4
   108a8:	10001e26 	beq	r2,zero,10924 <__ieee754_sqrt+0x234>
   108ac:	2800291e 	bne	r5,zero,10954 <__ieee754_sqrt+0x264>
   108b0:	0015883a 	mov	r10,zero
   108b4:	3020d2fa 	srli	r16,r6,11
   108b8:	52bffac4 	addi	r10,r10,-21
   108bc:	300c957a 	slli	r6,r6,21
   108c0:	803ffc26 	beq	r16,zero,108b4 <__ieee754_sqrt+0x1c4>
   108c4:	8080042c 	andhi	r2,r16,16
   108c8:	10001e1e 	bne	r2,zero,10944 <__ieee754_sqrt+0x254>
   108cc:	0005883a 	mov	r2,zero
   108d0:	00000106 	br	108d8 <__ieee754_sqrt+0x1e8>
   108d4:	1805883a 	mov	r2,r3
   108d8:	8421883a 	add	r16,r16,r16
   108dc:	8100042c 	andhi	r4,r16,16
   108e0:	10c00044 	addi	r3,r2,1
   108e4:	203ffb26 	beq	r4,zero,108d4 <__ieee754_sqrt+0x1e4>
   108e8:	01000804 	movi	r4,32
   108ec:	20c9c83a 	sub	r4,r4,r3
   108f0:	3108d83a 	srl	r4,r6,r4
   108f4:	5095c83a 	sub	r10,r10,r2
   108f8:	30cc983a 	sll	r6,r6,r3
   108fc:	2420b03a 	or	r16,r4,r16
   10900:	003f8806 	br	10724 <__ieee754_sqrt+0x34>
   10904:	280f883a 	mov	r7,r5
   10908:	0011f400 	call	11f40 <__muldf3>
   1090c:	880d883a 	mov	r6,r17
   10910:	800f883a 	mov	r7,r16
   10914:	1009883a 	mov	r4,r2
   10918:	180b883a 	mov	r5,r3
   1091c:	0010bd00 	call	10bd0 <__adddf3>
   10920:	003fcf06 	br	10860 <__ieee754_sqrt+0x170>
   10924:	2005883a 	mov	r2,r4
   10928:	2807883a 	mov	r3,r5
   1092c:	003fcc06 	br	10860 <__ieee754_sqrt+0x170>
   10930:	603fba16 	blt	r12,zero,1081c <__ieee754_sqrt+0x12c>
   10934:	003fb306 	br	10804 <__ieee754_sqrt+0x114>
   10938:	4a400044 	addi	r9,r9,1
   1093c:	0005883a 	mov	r2,zero
   10940:	003fc006 	br	10844 <__ieee754_sqrt+0x154>
   10944:	01000804 	movi	r4,32
   10948:	00bfffc4 	movi	r2,-1
   1094c:	0007883a 	mov	r3,zero
   10950:	003fe706 	br	108f0 <__ieee754_sqrt+0x200>
   10954:	200d883a 	mov	r6,r4
   10958:	280f883a 	mov	r7,r5
   1095c:	00127ac0 	call	127ac <__subdf3>
   10960:	100d883a 	mov	r6,r2
   10964:	180f883a 	mov	r7,r3
   10968:	1009883a 	mov	r4,r2
   1096c:	180b883a 	mov	r5,r3
   10970:	001147c0 	call	1147c <__divdf3>
   10974:	003fba06 	br	10860 <__ieee754_sqrt+0x170>

00010978 <__fpclassifyd>:
   10978:	00a00034 	movhi	r2,32768
   1097c:	10bfffc4 	addi	r2,r2,-1
   10980:	2884703a 	and	r2,r5,r2
   10984:	10000726 	beq	r2,zero,109a4 <__fpclassifyd+0x2c>
   10988:	00fffc34 	movhi	r3,65520
   1098c:	019ff834 	movhi	r6,32736
   10990:	28c7883a 	add	r3,r5,r3
   10994:	31bfffc4 	addi	r6,r6,-1
   10998:	30c00536 	bltu	r6,r3,109b0 <__fpclassifyd+0x38>
   1099c:	00800104 	movi	r2,4
   109a0:	f800283a 	ret
   109a4:	2000021e 	bne	r4,zero,109b0 <__fpclassifyd+0x38>
   109a8:	00800084 	movi	r2,2
   109ac:	f800283a 	ret
   109b0:	00dffc34 	movhi	r3,32752
   109b4:	019ff834 	movhi	r6,32736
   109b8:	28cb883a 	add	r5,r5,r3
   109bc:	31bfffc4 	addi	r6,r6,-1
   109c0:	317ff62e 	bgeu	r6,r5,1099c <__fpclassifyd+0x24>
   109c4:	01400434 	movhi	r5,16
   109c8:	297fffc4 	addi	r5,r5,-1
   109cc:	28800236 	bltu	r5,r2,109d8 <__fpclassifyd+0x60>
   109d0:	008000c4 	movi	r2,3
   109d4:	f800283a 	ret
   109d8:	10c00226 	beq	r2,r3,109e4 <__fpclassifyd+0x6c>
   109dc:	0005883a 	mov	r2,zero
   109e0:	f800283a 	ret
   109e4:	2005003a 	cmpeq	r2,r4,zero
   109e8:	f800283a 	ret

000109ec <matherr>:
   109ec:	0005883a 	mov	r2,zero
   109f0:	f800283a 	ret

000109f4 <__divsi3>:
   109f4:	20001b16 	blt	r4,zero,10a64 <__divsi3+0x70>
   109f8:	000f883a 	mov	r7,zero
   109fc:	28001616 	blt	r5,zero,10a58 <__divsi3+0x64>
   10a00:	200d883a 	mov	r6,r4
   10a04:	29001a2e 	bgeu	r5,r4,10a70 <__divsi3+0x7c>
   10a08:	00800804 	movi	r2,32
   10a0c:	00c00044 	movi	r3,1
   10a10:	00000106 	br	10a18 <__divsi3+0x24>
   10a14:	10000d26 	beq	r2,zero,10a4c <__divsi3+0x58>
   10a18:	294b883a 	add	r5,r5,r5
   10a1c:	10bfffc4 	addi	r2,r2,-1
   10a20:	18c7883a 	add	r3,r3,r3
   10a24:	293ffb36 	bltu	r5,r4,10a14 <__divsi3+0x20>
   10a28:	0005883a 	mov	r2,zero
   10a2c:	18000726 	beq	r3,zero,10a4c <__divsi3+0x58>
   10a30:	0005883a 	mov	r2,zero
   10a34:	31400236 	bltu	r6,r5,10a40 <__divsi3+0x4c>
   10a38:	314dc83a 	sub	r6,r6,r5
   10a3c:	10c4b03a 	or	r2,r2,r3
   10a40:	1806d07a 	srli	r3,r3,1
   10a44:	280ad07a 	srli	r5,r5,1
   10a48:	183ffa1e 	bne	r3,zero,10a34 <__divsi3+0x40>
   10a4c:	38000126 	beq	r7,zero,10a54 <__divsi3+0x60>
   10a50:	0085c83a 	sub	r2,zero,r2
   10a54:	f800283a 	ret
   10a58:	014bc83a 	sub	r5,zero,r5
   10a5c:	39c0005c 	xori	r7,r7,1
   10a60:	003fe706 	br	10a00 <__divsi3+0xc>
   10a64:	0109c83a 	sub	r4,zero,r4
   10a68:	01c00044 	movi	r7,1
   10a6c:	003fe306 	br	109fc <__divsi3+0x8>
   10a70:	00c00044 	movi	r3,1
   10a74:	003fee06 	br	10a30 <__divsi3+0x3c>

00010a78 <__modsi3>:
   10a78:	20001716 	blt	r4,zero,10ad8 <__modsi3+0x60>
   10a7c:	000f883a 	mov	r7,zero
   10a80:	2005883a 	mov	r2,r4
   10a84:	28001216 	blt	r5,zero,10ad0 <__modsi3+0x58>
   10a88:	2900162e 	bgeu	r5,r4,10ae4 <__modsi3+0x6c>
   10a8c:	01800804 	movi	r6,32
   10a90:	00c00044 	movi	r3,1
   10a94:	00000106 	br	10a9c <__modsi3+0x24>
   10a98:	30000a26 	beq	r6,zero,10ac4 <__modsi3+0x4c>
   10a9c:	294b883a 	add	r5,r5,r5
   10aa0:	31bfffc4 	addi	r6,r6,-1
   10aa4:	18c7883a 	add	r3,r3,r3
   10aa8:	293ffb36 	bltu	r5,r4,10a98 <__modsi3+0x20>
   10aac:	18000526 	beq	r3,zero,10ac4 <__modsi3+0x4c>
   10ab0:	1806d07a 	srli	r3,r3,1
   10ab4:	11400136 	bltu	r2,r5,10abc <__modsi3+0x44>
   10ab8:	1145c83a 	sub	r2,r2,r5
   10abc:	280ad07a 	srli	r5,r5,1
   10ac0:	183ffb1e 	bne	r3,zero,10ab0 <__modsi3+0x38>
   10ac4:	38000126 	beq	r7,zero,10acc <__modsi3+0x54>
   10ac8:	0085c83a 	sub	r2,zero,r2
   10acc:	f800283a 	ret
   10ad0:	014bc83a 	sub	r5,zero,r5
   10ad4:	003fec06 	br	10a88 <__modsi3+0x10>
   10ad8:	0109c83a 	sub	r4,zero,r4
   10adc:	01c00044 	movi	r7,1
   10ae0:	003fe706 	br	10a80 <__modsi3+0x8>
   10ae4:	00c00044 	movi	r3,1
   10ae8:	003ff106 	br	10ab0 <__modsi3+0x38>

00010aec <__udivsi3>:
   10aec:	200d883a 	mov	r6,r4
   10af0:	2900152e 	bgeu	r5,r4,10b48 <__udivsi3+0x5c>
   10af4:	28001416 	blt	r5,zero,10b48 <__udivsi3+0x5c>
   10af8:	00800804 	movi	r2,32
   10afc:	00c00044 	movi	r3,1
   10b00:	00000206 	br	10b0c <__udivsi3+0x20>
   10b04:	10000e26 	beq	r2,zero,10b40 <__udivsi3+0x54>
   10b08:	28000516 	blt	r5,zero,10b20 <__udivsi3+0x34>
   10b0c:	294b883a 	add	r5,r5,r5
   10b10:	10bfffc4 	addi	r2,r2,-1
   10b14:	18c7883a 	add	r3,r3,r3
   10b18:	293ffa36 	bltu	r5,r4,10b04 <__udivsi3+0x18>
   10b1c:	18000826 	beq	r3,zero,10b40 <__udivsi3+0x54>
   10b20:	0005883a 	mov	r2,zero
   10b24:	31400236 	bltu	r6,r5,10b30 <__udivsi3+0x44>
   10b28:	314dc83a 	sub	r6,r6,r5
   10b2c:	10c4b03a 	or	r2,r2,r3
   10b30:	1806d07a 	srli	r3,r3,1
   10b34:	280ad07a 	srli	r5,r5,1
   10b38:	183ffa1e 	bne	r3,zero,10b24 <__udivsi3+0x38>
   10b3c:	f800283a 	ret
   10b40:	0005883a 	mov	r2,zero
   10b44:	f800283a 	ret
   10b48:	00c00044 	movi	r3,1
   10b4c:	003ff406 	br	10b20 <__udivsi3+0x34>

00010b50 <__umodsi3>:
   10b50:	2005883a 	mov	r2,r4
   10b54:	2900122e 	bgeu	r5,r4,10ba0 <__umodsi3+0x50>
   10b58:	28001116 	blt	r5,zero,10ba0 <__umodsi3+0x50>
   10b5c:	01800804 	movi	r6,32
   10b60:	00c00044 	movi	r3,1
   10b64:	00000206 	br	10b70 <__umodsi3+0x20>
   10b68:	30000c26 	beq	r6,zero,10b9c <__umodsi3+0x4c>
   10b6c:	28000516 	blt	r5,zero,10b84 <__umodsi3+0x34>
   10b70:	294b883a 	add	r5,r5,r5
   10b74:	31bfffc4 	addi	r6,r6,-1
   10b78:	18c7883a 	add	r3,r3,r3
   10b7c:	293ffa36 	bltu	r5,r4,10b68 <__umodsi3+0x18>
   10b80:	18000626 	beq	r3,zero,10b9c <__umodsi3+0x4c>
   10b84:	1806d07a 	srli	r3,r3,1
   10b88:	11400136 	bltu	r2,r5,10b90 <__umodsi3+0x40>
   10b8c:	1145c83a 	sub	r2,r2,r5
   10b90:	280ad07a 	srli	r5,r5,1
   10b94:	183ffb1e 	bne	r3,zero,10b84 <__umodsi3+0x34>
   10b98:	f800283a 	ret
   10b9c:	f800283a 	ret
   10ba0:	00c00044 	movi	r3,1
   10ba4:	003ff706 	br	10b84 <__umodsi3+0x34>

00010ba8 <__mulsi3>:
   10ba8:	0005883a 	mov	r2,zero
   10bac:	20000726 	beq	r4,zero,10bcc <__mulsi3+0x24>
   10bb0:	20c0004c 	andi	r3,r4,1
   10bb4:	2008d07a 	srli	r4,r4,1
   10bb8:	18000126 	beq	r3,zero,10bc0 <__mulsi3+0x18>
   10bbc:	1145883a 	add	r2,r2,r5
   10bc0:	294b883a 	add	r5,r5,r5
   10bc4:	203ffa1e 	bne	r4,zero,10bb0 <__mulsi3+0x8>
   10bc8:	f800283a 	ret
   10bcc:	f800283a 	ret

00010bd0 <__adddf3>:
   10bd0:	02c00434 	movhi	r11,16
   10bd4:	5affffc4 	addi	r11,r11,-1
   10bd8:	2806d7fa 	srli	r3,r5,31
   10bdc:	2ad4703a 	and	r10,r5,r11
   10be0:	3ad2703a 	and	r9,r7,r11
   10be4:	3804d53a 	srli	r2,r7,20
   10be8:	3018d77a 	srli	r12,r6,29
   10bec:	280ad53a 	srli	r5,r5,20
   10bf0:	501490fa 	slli	r10,r10,3
   10bf4:	2010d77a 	srli	r8,r4,29
   10bf8:	481290fa 	slli	r9,r9,3
   10bfc:	380ed7fa 	srli	r7,r7,31
   10c00:	defffb04 	addi	sp,sp,-20
   10c04:	dc800215 	stw	r18,8(sp)
   10c08:	dc400115 	stw	r17,4(sp)
   10c0c:	dc000015 	stw	r16,0(sp)
   10c10:	dfc00415 	stw	ra,16(sp)
   10c14:	dcc00315 	stw	r19,12(sp)
   10c18:	1c803fcc 	andi	r18,r3,255
   10c1c:	2c01ffcc 	andi	r16,r5,2047
   10c20:	5210b03a 	or	r8,r10,r8
   10c24:	202290fa 	slli	r17,r4,3
   10c28:	1081ffcc 	andi	r2,r2,2047
   10c2c:	4b12b03a 	or	r9,r9,r12
   10c30:	300c90fa 	slli	r6,r6,3
   10c34:	91c07526 	beq	r18,r7,10e0c <__adddf3+0x23c>
   10c38:	8087c83a 	sub	r3,r16,r2
   10c3c:	00c0ab0e 	bge	zero,r3,10eec <__adddf3+0x31c>
   10c40:	10002a1e 	bne	r2,zero,10cec <__adddf3+0x11c>
   10c44:	4984b03a 	or	r2,r9,r6
   10c48:	1000961e 	bne	r2,zero,10ea4 <__adddf3+0x2d4>
   10c4c:	888001cc 	andi	r2,r17,7
   10c50:	10000726 	beq	r2,zero,10c70 <__adddf3+0xa0>
   10c54:	888003cc 	andi	r2,r17,15
   10c58:	00c00104 	movi	r3,4
   10c5c:	10c00426 	beq	r2,r3,10c70 <__adddf3+0xa0>
   10c60:	88c7883a 	add	r3,r17,r3
   10c64:	1c63803a 	cmpltu	r17,r3,r17
   10c68:	4451883a 	add	r8,r8,r17
   10c6c:	1823883a 	mov	r17,r3
   10c70:	4080202c 	andhi	r2,r8,128
   10c74:	10005926 	beq	r2,zero,10ddc <__adddf3+0x20c>
   10c78:	84000044 	addi	r16,r16,1
   10c7c:	0081ffc4 	movi	r2,2047
   10c80:	8080ba26 	beq	r16,r2,10f6c <__adddf3+0x39c>
   10c84:	00bfe034 	movhi	r2,65408
   10c88:	10bfffc4 	addi	r2,r2,-1
   10c8c:	4090703a 	and	r8,r8,r2
   10c90:	4004977a 	slli	r2,r8,29
   10c94:	4010927a 	slli	r8,r8,9
   10c98:	8822d0fa 	srli	r17,r17,3
   10c9c:	8401ffcc 	andi	r16,r16,2047
   10ca0:	4010d33a 	srli	r8,r8,12
   10ca4:	9007883a 	mov	r3,r18
   10ca8:	1444b03a 	or	r2,r2,r17
   10cac:	8401ffcc 	andi	r16,r16,2047
   10cb0:	8020953a 	slli	r16,r16,20
   10cb4:	18c03fcc 	andi	r3,r3,255
   10cb8:	01000434 	movhi	r4,16
   10cbc:	213fffc4 	addi	r4,r4,-1
   10cc0:	180697fa 	slli	r3,r3,31
   10cc4:	4110703a 	and	r8,r8,r4
   10cc8:	4410b03a 	or	r8,r8,r16
   10ccc:	40c6b03a 	or	r3,r8,r3
   10cd0:	dfc00417 	ldw	ra,16(sp)
   10cd4:	dcc00317 	ldw	r19,12(sp)
   10cd8:	dc800217 	ldw	r18,8(sp)
   10cdc:	dc400117 	ldw	r17,4(sp)
   10ce0:	dc000017 	ldw	r16,0(sp)
   10ce4:	dec00504 	addi	sp,sp,20
   10ce8:	f800283a 	ret
   10cec:	0081ffc4 	movi	r2,2047
   10cf0:	80bfd626 	beq	r16,r2,10c4c <__adddf3+0x7c>
   10cf4:	4a402034 	orhi	r9,r9,128
   10cf8:	00800e04 	movi	r2,56
   10cfc:	10c09f16 	blt	r2,r3,10f7c <__adddf3+0x3ac>
   10d00:	008007c4 	movi	r2,31
   10d04:	10c0c216 	blt	r2,r3,11010 <__adddf3+0x440>
   10d08:	00800804 	movi	r2,32
   10d0c:	10c5c83a 	sub	r2,r2,r3
   10d10:	488a983a 	sll	r5,r9,r2
   10d14:	30c8d83a 	srl	r4,r6,r3
   10d18:	3084983a 	sll	r2,r6,r2
   10d1c:	48c6d83a 	srl	r3,r9,r3
   10d20:	290cb03a 	or	r6,r5,r4
   10d24:	1004c03a 	cmpne	r2,r2,zero
   10d28:	308cb03a 	or	r6,r6,r2
   10d2c:	898dc83a 	sub	r6,r17,r6
   10d30:	89a3803a 	cmpltu	r17,r17,r6
   10d34:	40d1c83a 	sub	r8,r8,r3
   10d38:	4451c83a 	sub	r8,r8,r17
   10d3c:	3023883a 	mov	r17,r6
   10d40:	4080202c 	andhi	r2,r8,128
   10d44:	10002326 	beq	r2,zero,10dd4 <__adddf3+0x204>
   10d48:	04c02034 	movhi	r19,128
   10d4c:	9cffffc4 	addi	r19,r19,-1
   10d50:	44e6703a 	and	r19,r8,r19
   10d54:	98007626 	beq	r19,zero,10f30 <__adddf3+0x360>
   10d58:	9809883a 	mov	r4,r19
   10d5c:	00132040 	call	13204 <__clzsi2>
   10d60:	10fffe04 	addi	r3,r2,-8
   10d64:	010007c4 	movi	r4,31
   10d68:	20c07716 	blt	r4,r3,10f48 <__adddf3+0x378>
   10d6c:	00800804 	movi	r2,32
   10d70:	10c5c83a 	sub	r2,r2,r3
   10d74:	8884d83a 	srl	r2,r17,r2
   10d78:	98d0983a 	sll	r8,r19,r3
   10d7c:	88e2983a 	sll	r17,r17,r3
   10d80:	1204b03a 	or	r2,r2,r8
   10d84:	1c007416 	blt	r3,r16,10f58 <__adddf3+0x388>
   10d88:	1c21c83a 	sub	r16,r3,r16
   10d8c:	82000044 	addi	r8,r16,1
   10d90:	00c007c4 	movi	r3,31
   10d94:	1a009116 	blt	r3,r8,10fdc <__adddf3+0x40c>
   10d98:	00c00804 	movi	r3,32
   10d9c:	1a07c83a 	sub	r3,r3,r8
   10da0:	8a08d83a 	srl	r4,r17,r8
   10da4:	88e2983a 	sll	r17,r17,r3
   10da8:	10c6983a 	sll	r3,r2,r3
   10dac:	1210d83a 	srl	r8,r2,r8
   10db0:	8804c03a 	cmpne	r2,r17,zero
   10db4:	1906b03a 	or	r3,r3,r4
   10db8:	18a2b03a 	or	r17,r3,r2
   10dbc:	0021883a 	mov	r16,zero
   10dc0:	003fa206 	br	10c4c <__adddf3+0x7c>
   10dc4:	1890b03a 	or	r8,r3,r2
   10dc8:	40017d26 	beq	r8,zero,113c0 <__adddf3+0x7f0>
   10dcc:	1011883a 	mov	r8,r2
   10dd0:	1823883a 	mov	r17,r3
   10dd4:	888001cc 	andi	r2,r17,7
   10dd8:	103f9e1e 	bne	r2,zero,10c54 <__adddf3+0x84>
   10ddc:	4004977a 	slli	r2,r8,29
   10de0:	8822d0fa 	srli	r17,r17,3
   10de4:	4010d0fa 	srli	r8,r8,3
   10de8:	9007883a 	mov	r3,r18
   10dec:	1444b03a 	or	r2,r2,r17
   10df0:	0101ffc4 	movi	r4,2047
   10df4:	81002426 	beq	r16,r4,10e88 <__adddf3+0x2b8>
   10df8:	8120703a 	and	r16,r16,r4
   10dfc:	01000434 	movhi	r4,16
   10e00:	213fffc4 	addi	r4,r4,-1
   10e04:	4110703a 	and	r8,r8,r4
   10e08:	003fa806 	br	10cac <__adddf3+0xdc>
   10e0c:	8089c83a 	sub	r4,r16,r2
   10e10:	01005e0e 	bge	zero,r4,10f8c <__adddf3+0x3bc>
   10e14:	10002b26 	beq	r2,zero,10ec4 <__adddf3+0x2f4>
   10e18:	0081ffc4 	movi	r2,2047
   10e1c:	80bf8b26 	beq	r16,r2,10c4c <__adddf3+0x7c>
   10e20:	4a402034 	orhi	r9,r9,128
   10e24:	00800e04 	movi	r2,56
   10e28:	1100a40e 	bge	r2,r4,110bc <__adddf3+0x4ec>
   10e2c:	498cb03a 	or	r6,r9,r6
   10e30:	300ac03a 	cmpne	r5,r6,zero
   10e34:	0013883a 	mov	r9,zero
   10e38:	2c4b883a 	add	r5,r5,r17
   10e3c:	2c63803a 	cmpltu	r17,r5,r17
   10e40:	4a11883a 	add	r8,r9,r8
   10e44:	8a11883a 	add	r8,r17,r8
   10e48:	2823883a 	mov	r17,r5
   10e4c:	4080202c 	andhi	r2,r8,128
   10e50:	103fe026 	beq	r2,zero,10dd4 <__adddf3+0x204>
   10e54:	84000044 	addi	r16,r16,1
   10e58:	0081ffc4 	movi	r2,2047
   10e5c:	8080d226 	beq	r16,r2,111a8 <__adddf3+0x5d8>
   10e60:	00bfe034 	movhi	r2,65408
   10e64:	10bfffc4 	addi	r2,r2,-1
   10e68:	4090703a 	and	r8,r8,r2
   10e6c:	880ad07a 	srli	r5,r17,1
   10e70:	400897fa 	slli	r4,r8,31
   10e74:	88c0004c 	andi	r3,r17,1
   10e78:	28e2b03a 	or	r17,r5,r3
   10e7c:	4010d07a 	srli	r8,r8,1
   10e80:	2462b03a 	or	r17,r4,r17
   10e84:	003f7106 	br	10c4c <__adddf3+0x7c>
   10e88:	4088b03a 	or	r4,r8,r2
   10e8c:	20014526 	beq	r4,zero,113a4 <__adddf3+0x7d4>
   10e90:	01000434 	movhi	r4,16
   10e94:	42000234 	orhi	r8,r8,8
   10e98:	213fffc4 	addi	r4,r4,-1
   10e9c:	4110703a 	and	r8,r8,r4
   10ea0:	003f8206 	br	10cac <__adddf3+0xdc>
   10ea4:	18ffffc4 	addi	r3,r3,-1
   10ea8:	1800491e 	bne	r3,zero,10fd0 <__adddf3+0x400>
   10eac:	898bc83a 	sub	r5,r17,r6
   10eb0:	8963803a 	cmpltu	r17,r17,r5
   10eb4:	4251c83a 	sub	r8,r8,r9
   10eb8:	4451c83a 	sub	r8,r8,r17
   10ebc:	2823883a 	mov	r17,r5
   10ec0:	003f9f06 	br	10d40 <__adddf3+0x170>
   10ec4:	4984b03a 	or	r2,r9,r6
   10ec8:	103f6026 	beq	r2,zero,10c4c <__adddf3+0x7c>
   10ecc:	213fffc4 	addi	r4,r4,-1
   10ed0:	2000931e 	bne	r4,zero,11120 <__adddf3+0x550>
   10ed4:	898d883a 	add	r6,r17,r6
   10ed8:	3463803a 	cmpltu	r17,r6,r17
   10edc:	4251883a 	add	r8,r8,r9
   10ee0:	8a11883a 	add	r8,r17,r8
   10ee4:	3023883a 	mov	r17,r6
   10ee8:	003fd806 	br	10e4c <__adddf3+0x27c>
   10eec:	1800541e 	bne	r3,zero,11040 <__adddf3+0x470>
   10ef0:	80800044 	addi	r2,r16,1
   10ef4:	1081ffcc 	andi	r2,r2,2047
   10ef8:	00c00044 	movi	r3,1
   10efc:	1880a00e 	bge	r3,r2,11180 <__adddf3+0x5b0>
   10f00:	8989c83a 	sub	r4,r17,r6
   10f04:	8905803a 	cmpltu	r2,r17,r4
   10f08:	4267c83a 	sub	r19,r8,r9
   10f0c:	98a7c83a 	sub	r19,r19,r2
   10f10:	9880202c 	andhi	r2,r19,128
   10f14:	10006326 	beq	r2,zero,110a4 <__adddf3+0x4d4>
   10f18:	3463c83a 	sub	r17,r6,r17
   10f1c:	4a07c83a 	sub	r3,r9,r8
   10f20:	344d803a 	cmpltu	r6,r6,r17
   10f24:	19a7c83a 	sub	r19,r3,r6
   10f28:	3825883a 	mov	r18,r7
   10f2c:	983f8a1e 	bne	r19,zero,10d58 <__adddf3+0x188>
   10f30:	8809883a 	mov	r4,r17
   10f34:	00132040 	call	13204 <__clzsi2>
   10f38:	10800804 	addi	r2,r2,32
   10f3c:	10fffe04 	addi	r3,r2,-8
   10f40:	010007c4 	movi	r4,31
   10f44:	20ff890e 	bge	r4,r3,10d6c <__adddf3+0x19c>
   10f48:	10bff604 	addi	r2,r2,-40
   10f4c:	8884983a 	sll	r2,r17,r2
   10f50:	0023883a 	mov	r17,zero
   10f54:	1c3f8c0e 	bge	r3,r16,10d88 <__adddf3+0x1b8>
   10f58:	023fe034 	movhi	r8,65408
   10f5c:	423fffc4 	addi	r8,r8,-1
   10f60:	80e1c83a 	sub	r16,r16,r3
   10f64:	1210703a 	and	r8,r2,r8
   10f68:	003f3806 	br	10c4c <__adddf3+0x7c>
   10f6c:	9007883a 	mov	r3,r18
   10f70:	0011883a 	mov	r8,zero
   10f74:	0005883a 	mov	r2,zero
   10f78:	003f4c06 	br	10cac <__adddf3+0xdc>
   10f7c:	498cb03a 	or	r6,r9,r6
   10f80:	300cc03a 	cmpne	r6,r6,zero
   10f84:	0007883a 	mov	r3,zero
   10f88:	003f6806 	br	10d2c <__adddf3+0x15c>
   10f8c:	20009c1e 	bne	r4,zero,11200 <__adddf3+0x630>
   10f90:	80800044 	addi	r2,r16,1
   10f94:	1141ffcc 	andi	r5,r2,2047
   10f98:	01000044 	movi	r4,1
   10f9c:	2140670e 	bge	r4,r5,1113c <__adddf3+0x56c>
   10fa0:	0101ffc4 	movi	r4,2047
   10fa4:	11007f26 	beq	r2,r4,111a4 <__adddf3+0x5d4>
   10fa8:	898d883a 	add	r6,r17,r6
   10fac:	4247883a 	add	r3,r8,r9
   10fb0:	3451803a 	cmpltu	r8,r6,r17
   10fb4:	40d1883a 	add	r8,r8,r3
   10fb8:	402297fa 	slli	r17,r8,31
   10fbc:	300cd07a 	srli	r6,r6,1
   10fc0:	4010d07a 	srli	r8,r8,1
   10fc4:	1021883a 	mov	r16,r2
   10fc8:	89a2b03a 	or	r17,r17,r6
   10fcc:	003f1f06 	br	10c4c <__adddf3+0x7c>
   10fd0:	0081ffc4 	movi	r2,2047
   10fd4:	80bf481e 	bne	r16,r2,10cf8 <__adddf3+0x128>
   10fd8:	003f1c06 	br	10c4c <__adddf3+0x7c>
   10fdc:	843ff844 	addi	r16,r16,-31
   10fe0:	01000804 	movi	r4,32
   10fe4:	1406d83a 	srl	r3,r2,r16
   10fe8:	41005026 	beq	r8,r4,1112c <__adddf3+0x55c>
   10fec:	01001004 	movi	r4,64
   10ff0:	2211c83a 	sub	r8,r4,r8
   10ff4:	1204983a 	sll	r2,r2,r8
   10ff8:	88a2b03a 	or	r17,r17,r2
   10ffc:	8822c03a 	cmpne	r17,r17,zero
   11000:	1c62b03a 	or	r17,r3,r17
   11004:	0011883a 	mov	r8,zero
   11008:	0021883a 	mov	r16,zero
   1100c:	003f7106 	br	10dd4 <__adddf3+0x204>
   11010:	193ff804 	addi	r4,r3,-32
   11014:	00800804 	movi	r2,32
   11018:	4908d83a 	srl	r4,r9,r4
   1101c:	18804526 	beq	r3,r2,11134 <__adddf3+0x564>
   11020:	00801004 	movi	r2,64
   11024:	10c5c83a 	sub	r2,r2,r3
   11028:	4886983a 	sll	r3,r9,r2
   1102c:	198cb03a 	or	r6,r3,r6
   11030:	300cc03a 	cmpne	r6,r6,zero
   11034:	218cb03a 	or	r6,r4,r6
   11038:	0007883a 	mov	r3,zero
   1103c:	003f3b06 	br	10d2c <__adddf3+0x15c>
   11040:	80002a26 	beq	r16,zero,110ec <__adddf3+0x51c>
   11044:	0101ffc4 	movi	r4,2047
   11048:	11006826 	beq	r2,r4,111ec <__adddf3+0x61c>
   1104c:	00c7c83a 	sub	r3,zero,r3
   11050:	42002034 	orhi	r8,r8,128
   11054:	01000e04 	movi	r4,56
   11058:	20c07c16 	blt	r4,r3,1124c <__adddf3+0x67c>
   1105c:	010007c4 	movi	r4,31
   11060:	20c0da16 	blt	r4,r3,113cc <__adddf3+0x7fc>
   11064:	01000804 	movi	r4,32
   11068:	20c9c83a 	sub	r4,r4,r3
   1106c:	4114983a 	sll	r10,r8,r4
   11070:	88cad83a 	srl	r5,r17,r3
   11074:	8908983a 	sll	r4,r17,r4
   11078:	40c6d83a 	srl	r3,r8,r3
   1107c:	5162b03a 	or	r17,r10,r5
   11080:	2008c03a 	cmpne	r4,r4,zero
   11084:	8922b03a 	or	r17,r17,r4
   11088:	3463c83a 	sub	r17,r6,r17
   1108c:	48c7c83a 	sub	r3,r9,r3
   11090:	344d803a 	cmpltu	r6,r6,r17
   11094:	1991c83a 	sub	r8,r3,r6
   11098:	1021883a 	mov	r16,r2
   1109c:	3825883a 	mov	r18,r7
   110a0:	003f2706 	br	10d40 <__adddf3+0x170>
   110a4:	24d0b03a 	or	r8,r4,r19
   110a8:	40001b1e 	bne	r8,zero,11118 <__adddf3+0x548>
   110ac:	0005883a 	mov	r2,zero
   110b0:	0007883a 	mov	r3,zero
   110b4:	0021883a 	mov	r16,zero
   110b8:	003f4d06 	br	10df0 <__adddf3+0x220>
   110bc:	008007c4 	movi	r2,31
   110c0:	11003c16 	blt	r2,r4,111b4 <__adddf3+0x5e4>
   110c4:	00800804 	movi	r2,32
   110c8:	1105c83a 	sub	r2,r2,r4
   110cc:	488e983a 	sll	r7,r9,r2
   110d0:	310ad83a 	srl	r5,r6,r4
   110d4:	3084983a 	sll	r2,r6,r2
   110d8:	4912d83a 	srl	r9,r9,r4
   110dc:	394ab03a 	or	r5,r7,r5
   110e0:	1004c03a 	cmpne	r2,r2,zero
   110e4:	288ab03a 	or	r5,r5,r2
   110e8:	003f5306 	br	10e38 <__adddf3+0x268>
   110ec:	4448b03a 	or	r4,r8,r17
   110f0:	20003e26 	beq	r4,zero,111ec <__adddf3+0x61c>
   110f4:	00c6303a 	nor	r3,zero,r3
   110f8:	18003a1e 	bne	r3,zero,111e4 <__adddf3+0x614>
   110fc:	3463c83a 	sub	r17,r6,r17
   11100:	4a07c83a 	sub	r3,r9,r8
   11104:	344d803a 	cmpltu	r6,r6,r17
   11108:	1991c83a 	sub	r8,r3,r6
   1110c:	1021883a 	mov	r16,r2
   11110:	3825883a 	mov	r18,r7
   11114:	003f0a06 	br	10d40 <__adddf3+0x170>
   11118:	2023883a 	mov	r17,r4
   1111c:	003f0d06 	br	10d54 <__adddf3+0x184>
   11120:	0081ffc4 	movi	r2,2047
   11124:	80bf3f1e 	bne	r16,r2,10e24 <__adddf3+0x254>
   11128:	003ec806 	br	10c4c <__adddf3+0x7c>
   1112c:	0005883a 	mov	r2,zero
   11130:	003fb106 	br	10ff8 <__adddf3+0x428>
   11134:	0007883a 	mov	r3,zero
   11138:	003fbc06 	br	1102c <__adddf3+0x45c>
   1113c:	4444b03a 	or	r2,r8,r17
   11140:	8000871e 	bne	r16,zero,11360 <__adddf3+0x790>
   11144:	1000ba26 	beq	r2,zero,11430 <__adddf3+0x860>
   11148:	4984b03a 	or	r2,r9,r6
   1114c:	103ebf26 	beq	r2,zero,10c4c <__adddf3+0x7c>
   11150:	8985883a 	add	r2,r17,r6
   11154:	4247883a 	add	r3,r8,r9
   11158:	1451803a 	cmpltu	r8,r2,r17
   1115c:	40d1883a 	add	r8,r8,r3
   11160:	40c0202c 	andhi	r3,r8,128
   11164:	1023883a 	mov	r17,r2
   11168:	183f1a26 	beq	r3,zero,10dd4 <__adddf3+0x204>
   1116c:	00bfe034 	movhi	r2,65408
   11170:	10bfffc4 	addi	r2,r2,-1
   11174:	2021883a 	mov	r16,r4
   11178:	4090703a 	and	r8,r8,r2
   1117c:	003eb306 	br	10c4c <__adddf3+0x7c>
   11180:	4444b03a 	or	r2,r8,r17
   11184:	8000291e 	bne	r16,zero,1122c <__adddf3+0x65c>
   11188:	10004b1e 	bne	r2,zero,112b8 <__adddf3+0x6e8>
   1118c:	4990b03a 	or	r8,r9,r6
   11190:	40008b26 	beq	r8,zero,113c0 <__adddf3+0x7f0>
   11194:	4811883a 	mov	r8,r9
   11198:	3023883a 	mov	r17,r6
   1119c:	3825883a 	mov	r18,r7
   111a0:	003eaa06 	br	10c4c <__adddf3+0x7c>
   111a4:	1021883a 	mov	r16,r2
   111a8:	0011883a 	mov	r8,zero
   111ac:	0005883a 	mov	r2,zero
   111b0:	003f0f06 	br	10df0 <__adddf3+0x220>
   111b4:	217ff804 	addi	r5,r4,-32
   111b8:	00800804 	movi	r2,32
   111bc:	494ad83a 	srl	r5,r9,r5
   111c0:	20807d26 	beq	r4,r2,113b8 <__adddf3+0x7e8>
   111c4:	00801004 	movi	r2,64
   111c8:	1109c83a 	sub	r4,r2,r4
   111cc:	4912983a 	sll	r9,r9,r4
   111d0:	498cb03a 	or	r6,r9,r6
   111d4:	300cc03a 	cmpne	r6,r6,zero
   111d8:	298ab03a 	or	r5,r5,r6
   111dc:	0013883a 	mov	r9,zero
   111e0:	003f1506 	br	10e38 <__adddf3+0x268>
   111e4:	0101ffc4 	movi	r4,2047
   111e8:	113f9a1e 	bne	r2,r4,11054 <__adddf3+0x484>
   111ec:	4811883a 	mov	r8,r9
   111f0:	3023883a 	mov	r17,r6
   111f4:	1021883a 	mov	r16,r2
   111f8:	3825883a 	mov	r18,r7
   111fc:	003e9306 	br	10c4c <__adddf3+0x7c>
   11200:	8000161e 	bne	r16,zero,1125c <__adddf3+0x68c>
   11204:	444ab03a 	or	r5,r8,r17
   11208:	28005126 	beq	r5,zero,11350 <__adddf3+0x780>
   1120c:	0108303a 	nor	r4,zero,r4
   11210:	20004d1e 	bne	r4,zero,11348 <__adddf3+0x778>
   11214:	89a3883a 	add	r17,r17,r6
   11218:	4253883a 	add	r9,r8,r9
   1121c:	898d803a 	cmpltu	r6,r17,r6
   11220:	3251883a 	add	r8,r6,r9
   11224:	1021883a 	mov	r16,r2
   11228:	003f0806 	br	10e4c <__adddf3+0x27c>
   1122c:	1000301e 	bne	r2,zero,112f0 <__adddf3+0x720>
   11230:	4984b03a 	or	r2,r9,r6
   11234:	10007126 	beq	r2,zero,113fc <__adddf3+0x82c>
   11238:	4811883a 	mov	r8,r9
   1123c:	3023883a 	mov	r17,r6
   11240:	3825883a 	mov	r18,r7
   11244:	0401ffc4 	movi	r16,2047
   11248:	003e8006 	br	10c4c <__adddf3+0x7c>
   1124c:	4462b03a 	or	r17,r8,r17
   11250:	8822c03a 	cmpne	r17,r17,zero
   11254:	0007883a 	mov	r3,zero
   11258:	003f8b06 	br	11088 <__adddf3+0x4b8>
   1125c:	0141ffc4 	movi	r5,2047
   11260:	11403b26 	beq	r2,r5,11350 <__adddf3+0x780>
   11264:	0109c83a 	sub	r4,zero,r4
   11268:	42002034 	orhi	r8,r8,128
   1126c:	01400e04 	movi	r5,56
   11270:	29006716 	blt	r5,r4,11410 <__adddf3+0x840>
   11274:	014007c4 	movi	r5,31
   11278:	29007016 	blt	r5,r4,1143c <__adddf3+0x86c>
   1127c:	01400804 	movi	r5,32
   11280:	290bc83a 	sub	r5,r5,r4
   11284:	4154983a 	sll	r10,r8,r5
   11288:	890ed83a 	srl	r7,r17,r4
   1128c:	894a983a 	sll	r5,r17,r5
   11290:	4108d83a 	srl	r4,r8,r4
   11294:	51e2b03a 	or	r17,r10,r7
   11298:	280ac03a 	cmpne	r5,r5,zero
   1129c:	8962b03a 	or	r17,r17,r5
   112a0:	89a3883a 	add	r17,r17,r6
   112a4:	2253883a 	add	r9,r4,r9
   112a8:	898d803a 	cmpltu	r6,r17,r6
   112ac:	3251883a 	add	r8,r6,r9
   112b0:	1021883a 	mov	r16,r2
   112b4:	003ee506 	br	10e4c <__adddf3+0x27c>
   112b8:	4984b03a 	or	r2,r9,r6
   112bc:	103e6326 	beq	r2,zero,10c4c <__adddf3+0x7c>
   112c0:	8987c83a 	sub	r3,r17,r6
   112c4:	88c9803a 	cmpltu	r4,r17,r3
   112c8:	4245c83a 	sub	r2,r8,r9
   112cc:	1105c83a 	sub	r2,r2,r4
   112d0:	1100202c 	andhi	r4,r2,128
   112d4:	203ebb26 	beq	r4,zero,10dc4 <__adddf3+0x1f4>
   112d8:	3463c83a 	sub	r17,r6,r17
   112dc:	4a07c83a 	sub	r3,r9,r8
   112e0:	344d803a 	cmpltu	r6,r6,r17
   112e4:	1991c83a 	sub	r8,r3,r6
   112e8:	3825883a 	mov	r18,r7
   112ec:	003e5706 	br	10c4c <__adddf3+0x7c>
   112f0:	4984b03a 	or	r2,r9,r6
   112f4:	10002e26 	beq	r2,zero,113b0 <__adddf3+0x7e0>
   112f8:	4004d0fa 	srli	r2,r8,3
   112fc:	8822d0fa 	srli	r17,r17,3
   11300:	4010977a 	slli	r8,r8,29
   11304:	10c0022c 	andhi	r3,r2,8
   11308:	4462b03a 	or	r17,r8,r17
   1130c:	18000826 	beq	r3,zero,11330 <__adddf3+0x760>
   11310:	4808d0fa 	srli	r4,r9,3
   11314:	20c0022c 	andhi	r3,r4,8
   11318:	1800051e 	bne	r3,zero,11330 <__adddf3+0x760>
   1131c:	300cd0fa 	srli	r6,r6,3
   11320:	4806977a 	slli	r3,r9,29
   11324:	2005883a 	mov	r2,r4
   11328:	3825883a 	mov	r18,r7
   1132c:	19a2b03a 	or	r17,r3,r6
   11330:	8810d77a 	srli	r8,r17,29
   11334:	100490fa 	slli	r2,r2,3
   11338:	882290fa 	slli	r17,r17,3
   1133c:	0401ffc4 	movi	r16,2047
   11340:	4090b03a 	or	r8,r8,r2
   11344:	003e4106 	br	10c4c <__adddf3+0x7c>
   11348:	0141ffc4 	movi	r5,2047
   1134c:	117fc71e 	bne	r2,r5,1126c <__adddf3+0x69c>
   11350:	4811883a 	mov	r8,r9
   11354:	3023883a 	mov	r17,r6
   11358:	1021883a 	mov	r16,r2
   1135c:	003e3b06 	br	10c4c <__adddf3+0x7c>
   11360:	10002f26 	beq	r2,zero,11420 <__adddf3+0x850>
   11364:	4984b03a 	or	r2,r9,r6
   11368:	10001126 	beq	r2,zero,113b0 <__adddf3+0x7e0>
   1136c:	4004d0fa 	srli	r2,r8,3
   11370:	8822d0fa 	srli	r17,r17,3
   11374:	4010977a 	slli	r8,r8,29
   11378:	10c0022c 	andhi	r3,r2,8
   1137c:	4462b03a 	or	r17,r8,r17
   11380:	183feb26 	beq	r3,zero,11330 <__adddf3+0x760>
   11384:	4808d0fa 	srli	r4,r9,3
   11388:	20c0022c 	andhi	r3,r4,8
   1138c:	183fe81e 	bne	r3,zero,11330 <__adddf3+0x760>
   11390:	300cd0fa 	srli	r6,r6,3
   11394:	4806977a 	slli	r3,r9,29
   11398:	2005883a 	mov	r2,r4
   1139c:	19a2b03a 	or	r17,r3,r6
   113a0:	003fe306 	br	11330 <__adddf3+0x760>
   113a4:	0011883a 	mov	r8,zero
   113a8:	0005883a 	mov	r2,zero
   113ac:	003e3f06 	br	10cac <__adddf3+0xdc>
   113b0:	0401ffc4 	movi	r16,2047
   113b4:	003e2506 	br	10c4c <__adddf3+0x7c>
   113b8:	0013883a 	mov	r9,zero
   113bc:	003f8406 	br	111d0 <__adddf3+0x600>
   113c0:	0005883a 	mov	r2,zero
   113c4:	0007883a 	mov	r3,zero
   113c8:	003e8906 	br	10df0 <__adddf3+0x220>
   113cc:	197ff804 	addi	r5,r3,-32
   113d0:	01000804 	movi	r4,32
   113d4:	414ad83a 	srl	r5,r8,r5
   113d8:	19002426 	beq	r3,r4,1146c <__adddf3+0x89c>
   113dc:	01001004 	movi	r4,64
   113e0:	20c7c83a 	sub	r3,r4,r3
   113e4:	40c6983a 	sll	r3,r8,r3
   113e8:	1c46b03a 	or	r3,r3,r17
   113ec:	1806c03a 	cmpne	r3,r3,zero
   113f0:	28e2b03a 	or	r17,r5,r3
   113f4:	0007883a 	mov	r3,zero
   113f8:	003f2306 	br	11088 <__adddf3+0x4b8>
   113fc:	0007883a 	mov	r3,zero
   11400:	5811883a 	mov	r8,r11
   11404:	00bfffc4 	movi	r2,-1
   11408:	0401ffc4 	movi	r16,2047
   1140c:	003e7806 	br	10df0 <__adddf3+0x220>
   11410:	4462b03a 	or	r17,r8,r17
   11414:	8822c03a 	cmpne	r17,r17,zero
   11418:	0009883a 	mov	r4,zero
   1141c:	003fa006 	br	112a0 <__adddf3+0x6d0>
   11420:	4811883a 	mov	r8,r9
   11424:	3023883a 	mov	r17,r6
   11428:	0401ffc4 	movi	r16,2047
   1142c:	003e0706 	br	10c4c <__adddf3+0x7c>
   11430:	4811883a 	mov	r8,r9
   11434:	3023883a 	mov	r17,r6
   11438:	003e0406 	br	10c4c <__adddf3+0x7c>
   1143c:	21fff804 	addi	r7,r4,-32
   11440:	01400804 	movi	r5,32
   11444:	41ced83a 	srl	r7,r8,r7
   11448:	21400a26 	beq	r4,r5,11474 <__adddf3+0x8a4>
   1144c:	01401004 	movi	r5,64
   11450:	2909c83a 	sub	r4,r5,r4
   11454:	4108983a 	sll	r4,r8,r4
   11458:	2448b03a 	or	r4,r4,r17
   1145c:	2008c03a 	cmpne	r4,r4,zero
   11460:	3922b03a 	or	r17,r7,r4
   11464:	0009883a 	mov	r4,zero
   11468:	003f8d06 	br	112a0 <__adddf3+0x6d0>
   1146c:	0007883a 	mov	r3,zero
   11470:	003fdd06 	br	113e8 <__adddf3+0x818>
   11474:	0009883a 	mov	r4,zero
   11478:	003ff706 	br	11458 <__adddf3+0x888>

0001147c <__divdf3>:
   1147c:	defff004 	addi	sp,sp,-64
   11480:	dc800815 	stw	r18,32(sp)
   11484:	2824d53a 	srli	r18,r5,20
   11488:	dd800c15 	stw	r22,48(sp)
   1148c:	282cd7fa 	srli	r22,r5,31
   11490:	dc000615 	stw	r16,24(sp)
   11494:	04000434 	movhi	r16,16
   11498:	843fffc4 	addi	r16,r16,-1
   1149c:	dfc00f15 	stw	ra,60(sp)
   114a0:	df000e15 	stw	fp,56(sp)
   114a4:	ddc00d15 	stw	r23,52(sp)
   114a8:	dd400b15 	stw	r21,44(sp)
   114ac:	dd000a15 	stw	r20,40(sp)
   114b0:	dcc00915 	stw	r19,36(sp)
   114b4:	dc400715 	stw	r17,28(sp)
   114b8:	9481ffcc 	andi	r18,r18,2047
   114bc:	2c20703a 	and	r16,r5,r16
   114c0:	b2003fcc 	andi	r8,r22,255
   114c4:	90006126 	beq	r18,zero,1164c <__divdf3+0x1d0>
   114c8:	0081ffc4 	movi	r2,2047
   114cc:	202b883a 	mov	r21,r4
   114d0:	90803726 	beq	r18,r2,115b0 <__divdf3+0x134>
   114d4:	80800434 	orhi	r2,r16,16
   114d8:	100490fa 	slli	r2,r2,3
   114dc:	2020d77a 	srli	r16,r4,29
   114e0:	202a90fa 	slli	r21,r4,3
   114e4:	94bf0044 	addi	r18,r18,-1023
   114e8:	80a0b03a 	or	r16,r16,r2
   114ec:	0013883a 	mov	r9,zero
   114f0:	000b883a 	mov	r5,zero
   114f4:	3806d53a 	srli	r3,r7,20
   114f8:	382ed7fa 	srli	r23,r7,31
   114fc:	04400434 	movhi	r17,16
   11500:	8c7fffc4 	addi	r17,r17,-1
   11504:	18c1ffcc 	andi	r3,r3,2047
   11508:	3029883a 	mov	r20,r6
   1150c:	3c62703a 	and	r17,r7,r17
   11510:	bf003fcc 	andi	fp,r23,255
   11514:	18006e26 	beq	r3,zero,116d0 <__divdf3+0x254>
   11518:	0081ffc4 	movi	r2,2047
   1151c:	18806626 	beq	r3,r2,116b8 <__divdf3+0x23c>
   11520:	88800434 	orhi	r2,r17,16
   11524:	100490fa 	slli	r2,r2,3
   11528:	3022d77a 	srli	r17,r6,29
   1152c:	302890fa 	slli	r20,r6,3
   11530:	18ff0044 	addi	r3,r3,-1023
   11534:	88a2b03a 	or	r17,r17,r2
   11538:	000f883a 	mov	r7,zero
   1153c:	b5e6f03a 	xor	r19,r22,r23
   11540:	3a4cb03a 	or	r6,r7,r9
   11544:	008003c4 	movi	r2,15
   11548:	9809883a 	mov	r4,r19
   1154c:	90c7c83a 	sub	r3,r18,r3
   11550:	9cc03fcc 	andi	r19,r19,255
   11554:	11809636 	bltu	r2,r6,117b0 <__divdf3+0x334>
   11558:	300c90ba 	slli	r6,r6,2
   1155c:	00800074 	movhi	r2,1
   11560:	10855c04 	addi	r2,r2,5488
   11564:	308d883a 	add	r6,r6,r2
   11568:	30800017 	ldw	r2,0(r6)
   1156c:	1000683a 	jmp	r2
   11570:	000117b0 	cmpltui	zero,zero,1118
   11574:	000115e8 	cmpgeui	zero,zero,1111
   11578:	000117a0 	cmpeqi	zero,zero,1118
   1157c:	000115dc 	xori	zero,zero,1111
   11580:	000117a0 	cmpeqi	zero,zero,1118
   11584:	00011774 	movhi	zero,1117
   11588:	000117a0 	cmpeqi	zero,zero,1118
   1158c:	000115dc 	xori	zero,zero,1111
   11590:	000115e8 	cmpgeui	zero,zero,1111
   11594:	000115e8 	cmpgeui	zero,zero,1111
   11598:	00011774 	movhi	zero,1117
   1159c:	000115dc 	xori	zero,zero,1111
   115a0:	000115cc 	andi	zero,zero,1111
   115a4:	000115cc 	andi	zero,zero,1111
   115a8:	000115cc 	andi	zero,zero,1111
   115ac:	00011b38 	rdprs	zero,zero,1132
   115b0:	2404b03a 	or	r2,r4,r16
   115b4:	10006c1e 	bne	r2,zero,11768 <__divdf3+0x2ec>
   115b8:	02400204 	movi	r9,8
   115bc:	0021883a 	mov	r16,zero
   115c0:	002b883a 	mov	r21,zero
   115c4:	01400084 	movi	r5,2
   115c8:	003fca06 	br	114f4 <__divdf3+0x78>
   115cc:	8023883a 	mov	r17,r16
   115d0:	a829883a 	mov	r20,r21
   115d4:	4039883a 	mov	fp,r8
   115d8:	280f883a 	mov	r7,r5
   115dc:	00800084 	movi	r2,2
   115e0:	3881601e 	bne	r7,r2,11b64 <__divdf3+0x6e8>
   115e4:	e027883a 	mov	r19,fp
   115e8:	9900004c 	andi	r4,r19,1
   115ec:	0081ffc4 	movi	r2,2047
   115f0:	0021883a 	mov	r16,zero
   115f4:	002b883a 	mov	r21,zero
   115f8:	1004953a 	slli	r2,r2,20
   115fc:	20c03fcc 	andi	r3,r4,255
   11600:	01400434 	movhi	r5,16
   11604:	297fffc4 	addi	r5,r5,-1
   11608:	180697fa 	slli	r3,r3,31
   1160c:	8160703a 	and	r16,r16,r5
   11610:	80a0b03a 	or	r16,r16,r2
   11614:	80c6b03a 	or	r3,r16,r3
   11618:	a805883a 	mov	r2,r21
   1161c:	dfc00f17 	ldw	ra,60(sp)
   11620:	df000e17 	ldw	fp,56(sp)
   11624:	ddc00d17 	ldw	r23,52(sp)
   11628:	dd800c17 	ldw	r22,48(sp)
   1162c:	dd400b17 	ldw	r21,44(sp)
   11630:	dd000a17 	ldw	r20,40(sp)
   11634:	dcc00917 	ldw	r19,36(sp)
   11638:	dc800817 	ldw	r18,32(sp)
   1163c:	dc400717 	ldw	r17,28(sp)
   11640:	dc000617 	ldw	r16,24(sp)
   11644:	dec01004 	addi	sp,sp,64
   11648:	f800283a 	ret
   1164c:	2404b03a 	or	r2,r4,r16
   11650:	2023883a 	mov	r17,r4
   11654:	10003f26 	beq	r2,zero,11754 <__divdf3+0x2d8>
   11658:	80015e26 	beq	r16,zero,11bd4 <__divdf3+0x758>
   1165c:	8009883a 	mov	r4,r16
   11660:	d9800215 	stw	r6,8(sp)
   11664:	d9c00515 	stw	r7,20(sp)
   11668:	da000415 	stw	r8,16(sp)
   1166c:	00132040 	call	13204 <__clzsi2>
   11670:	d9800217 	ldw	r6,8(sp)
   11674:	d9c00517 	ldw	r7,20(sp)
   11678:	da000417 	ldw	r8,16(sp)
   1167c:	113ffd44 	addi	r4,r2,-11
   11680:	00c00704 	movi	r3,28
   11684:	19014f16 	blt	r3,r4,11bc4 <__divdf3+0x748>
   11688:	00c00744 	movi	r3,29
   1168c:	157ffe04 	addi	r21,r2,-8
   11690:	1907c83a 	sub	r3,r3,r4
   11694:	8560983a 	sll	r16,r16,r21
   11698:	88c6d83a 	srl	r3,r17,r3
   1169c:	8d6a983a 	sll	r21,r17,r21
   116a0:	1c20b03a 	or	r16,r3,r16
   116a4:	1080fcc4 	addi	r2,r2,1011
   116a8:	00a5c83a 	sub	r18,zero,r2
   116ac:	0013883a 	mov	r9,zero
   116b0:	000b883a 	mov	r5,zero
   116b4:	003f8f06 	br	114f4 <__divdf3+0x78>
   116b8:	3444b03a 	or	r2,r6,r17
   116bc:	1000231e 	bne	r2,zero,1174c <__divdf3+0x2d0>
   116c0:	0023883a 	mov	r17,zero
   116c4:	0029883a 	mov	r20,zero
   116c8:	01c00084 	movi	r7,2
   116cc:	003f9b06 	br	1153c <__divdf3+0xc0>
   116d0:	3444b03a 	or	r2,r6,r17
   116d4:	10001926 	beq	r2,zero,1173c <__divdf3+0x2c0>
   116d8:	88014b26 	beq	r17,zero,11c08 <__divdf3+0x78c>
   116dc:	8809883a 	mov	r4,r17
   116e0:	d9400115 	stw	r5,4(sp)
   116e4:	d9800215 	stw	r6,8(sp)
   116e8:	da000415 	stw	r8,16(sp)
   116ec:	da400315 	stw	r9,12(sp)
   116f0:	00132040 	call	13204 <__clzsi2>
   116f4:	d9400117 	ldw	r5,4(sp)
   116f8:	d9800217 	ldw	r6,8(sp)
   116fc:	da000417 	ldw	r8,16(sp)
   11700:	da400317 	ldw	r9,12(sp)
   11704:	113ffd44 	addi	r4,r2,-11
   11708:	00c00704 	movi	r3,28
   1170c:	19013a16 	blt	r3,r4,11bf8 <__divdf3+0x77c>
   11710:	00c00744 	movi	r3,29
   11714:	153ffe04 	addi	r20,r2,-8
   11718:	1907c83a 	sub	r3,r3,r4
   1171c:	8d22983a 	sll	r17,r17,r20
   11720:	30c6d83a 	srl	r3,r6,r3
   11724:	3528983a 	sll	r20,r6,r20
   11728:	1c62b03a 	or	r17,r3,r17
   1172c:	1080fcc4 	addi	r2,r2,1011
   11730:	0087c83a 	sub	r3,zero,r2
   11734:	000f883a 	mov	r7,zero
   11738:	003f8006 	br	1153c <__divdf3+0xc0>
   1173c:	0023883a 	mov	r17,zero
   11740:	0029883a 	mov	r20,zero
   11744:	01c00044 	movi	r7,1
   11748:	003f7c06 	br	1153c <__divdf3+0xc0>
   1174c:	01c000c4 	movi	r7,3
   11750:	003f7a06 	br	1153c <__divdf3+0xc0>
   11754:	02400104 	movi	r9,4
   11758:	0021883a 	mov	r16,zero
   1175c:	002b883a 	mov	r21,zero
   11760:	01400044 	movi	r5,1
   11764:	003f6306 	br	114f4 <__divdf3+0x78>
   11768:	02400304 	movi	r9,12
   1176c:	014000c4 	movi	r5,3
   11770:	003f6006 	br	114f4 <__divdf3+0x78>
   11774:	04000434 	movhi	r16,16
   11778:	0009883a 	mov	r4,zero
   1177c:	843fffc4 	addi	r16,r16,-1
   11780:	057fffc4 	movi	r21,-1
   11784:	0081ffc4 	movi	r2,2047
   11788:	003f9b06 	br	115f8 <__divdf3+0x17c>
   1178c:	00c00044 	movi	r3,1
   11790:	1887c83a 	sub	r3,r3,r2
   11794:	01000e04 	movi	r4,56
   11798:	20c1530e 	bge	r4,r3,11ce8 <__divdf3+0x86c>
   1179c:	9900004c 	andi	r4,r19,1
   117a0:	0005883a 	mov	r2,zero
   117a4:	0021883a 	mov	r16,zero
   117a8:	002b883a 	mov	r21,zero
   117ac:	003f9206 	br	115f8 <__divdf3+0x17c>
   117b0:	8c012e36 	bltu	r17,r16,11c6c <__divdf3+0x7f0>
   117b4:	84412c26 	beq	r16,r17,11c68 <__divdf3+0x7ec>
   117b8:	a82f883a 	mov	r23,r21
   117bc:	18ffffc4 	addi	r3,r3,-1
   117c0:	002b883a 	mov	r21,zero
   117c4:	a004d63a 	srli	r2,r20,24
   117c8:	8822923a 	slli	r17,r17,8
   117cc:	a028923a 	slli	r20,r20,8
   117d0:	8009883a 	mov	r4,r16
   117d4:	88acb03a 	or	r22,r17,r2
   117d8:	dd000015 	stw	r20,0(sp)
   117dc:	b028d43a 	srli	r20,r22,16
   117e0:	d8c00215 	stw	r3,8(sp)
   117e4:	b4bfffcc 	andi	r18,r22,65535
   117e8:	a00b883a 	mov	r5,r20
   117ec:	0010aec0 	call	10aec <__udivsi3>
   117f0:	100b883a 	mov	r5,r2
   117f4:	9009883a 	mov	r4,r18
   117f8:	1023883a 	mov	r17,r2
   117fc:	0010ba80 	call	10ba8 <__mulsi3>
   11800:	8009883a 	mov	r4,r16
   11804:	a00b883a 	mov	r5,r20
   11808:	1039883a 	mov	fp,r2
   1180c:	0010b500 	call	10b50 <__umodsi3>
   11810:	1004943a 	slli	r2,r2,16
   11814:	b808d43a 	srli	r4,r23,16
   11818:	d8c00217 	ldw	r3,8(sp)
   1181c:	2084b03a 	or	r2,r4,r2
   11820:	1700062e 	bgeu	r2,fp,1183c <__divdf3+0x3c0>
   11824:	1585883a 	add	r2,r2,r22
   11828:	893fffc4 	addi	r4,r17,-1
   1182c:	15811d36 	bltu	r2,r22,11ca4 <__divdf3+0x828>
   11830:	17011c2e 	bgeu	r2,fp,11ca4 <__divdf3+0x828>
   11834:	8c7fff84 	addi	r17,r17,-2
   11838:	1585883a 	add	r2,r2,r22
   1183c:	1739c83a 	sub	fp,r2,fp
   11840:	a00b883a 	mov	r5,r20
   11844:	e009883a 	mov	r4,fp
   11848:	d8c00215 	stw	r3,8(sp)
   1184c:	0010aec0 	call	10aec <__udivsi3>
   11850:	100b883a 	mov	r5,r2
   11854:	9009883a 	mov	r4,r18
   11858:	1021883a 	mov	r16,r2
   1185c:	0010ba80 	call	10ba8 <__mulsi3>
   11860:	a00b883a 	mov	r5,r20
   11864:	e009883a 	mov	r4,fp
   11868:	d8800415 	stw	r2,16(sp)
   1186c:	0010b500 	call	10b50 <__umodsi3>
   11870:	1004943a 	slli	r2,r2,16
   11874:	da000417 	ldw	r8,16(sp)
   11878:	bdffffcc 	andi	r23,r23,65535
   1187c:	b884b03a 	or	r2,r23,r2
   11880:	d8c00217 	ldw	r3,8(sp)
   11884:	1200062e 	bgeu	r2,r8,118a0 <__divdf3+0x424>
   11888:	1585883a 	add	r2,r2,r22
   1188c:	813fffc4 	addi	r4,r16,-1
   11890:	15810236 	bltu	r2,r22,11c9c <__divdf3+0x820>
   11894:	1201012e 	bgeu	r2,r8,11c9c <__divdf3+0x820>
   11898:	843fff84 	addi	r16,r16,-2
   1189c:	1585883a 	add	r2,r2,r22
   118a0:	8822943a 	slli	r17,r17,16
   118a4:	d9800017 	ldw	r6,0(sp)
   118a8:	1211c83a 	sub	r8,r2,r8
   118ac:	8c22b03a 	or	r17,r17,r16
   118b0:	373fffcc 	andi	fp,r6,65535
   118b4:	8abfffcc 	andi	r10,r17,65535
   118b8:	8820d43a 	srli	r16,r17,16
   118bc:	5009883a 	mov	r4,r10
   118c0:	e00b883a 	mov	r5,fp
   118c4:	302ed43a 	srli	r23,r6,16
   118c8:	d8c00215 	stw	r3,8(sp)
   118cc:	da000415 	stw	r8,16(sp)
   118d0:	da800115 	stw	r10,4(sp)
   118d4:	0010ba80 	call	10ba8 <__mulsi3>
   118d8:	800b883a 	mov	r5,r16
   118dc:	e009883a 	mov	r4,fp
   118e0:	d8800515 	stw	r2,20(sp)
   118e4:	0010ba80 	call	10ba8 <__mulsi3>
   118e8:	8009883a 	mov	r4,r16
   118ec:	b80b883a 	mov	r5,r23
   118f0:	d8800315 	stw	r2,12(sp)
   118f4:	0010ba80 	call	10ba8 <__mulsi3>
   118f8:	da800117 	ldw	r10,4(sp)
   118fc:	b80b883a 	mov	r5,r23
   11900:	1021883a 	mov	r16,r2
   11904:	5009883a 	mov	r4,r10
   11908:	0010ba80 	call	10ba8 <__mulsi3>
   1190c:	d9c00517 	ldw	r7,20(sp)
   11910:	da400317 	ldw	r9,12(sp)
   11914:	d8c00217 	ldw	r3,8(sp)
   11918:	3808d43a 	srli	r4,r7,16
   1191c:	1245883a 	add	r2,r2,r9
   11920:	da000417 	ldw	r8,16(sp)
   11924:	2085883a 	add	r2,r4,r2
   11928:	1240022e 	bgeu	r2,r9,11934 <__divdf3+0x4b8>
   1192c:	01000074 	movhi	r4,1
   11930:	8121883a 	add	r16,r16,r4
   11934:	1008d43a 	srli	r4,r2,16
   11938:	1004943a 	slli	r2,r2,16
   1193c:	39ffffcc 	andi	r7,r7,65535
   11940:	2409883a 	add	r4,r4,r16
   11944:	11c5883a 	add	r2,r2,r7
   11948:	4100bb36 	bltu	r8,r4,11c38 <__divdf3+0x7bc>
   1194c:	4100d726 	beq	r8,r4,11cac <__divdf3+0x830>
   11950:	4109c83a 	sub	r4,r8,r4
   11954:	a8a1c83a 	sub	r16,r21,r2
   11958:	ac2b803a 	cmpltu	r21,r21,r16
   1195c:	256bc83a 	sub	r21,r4,r21
   11960:	b540d926 	beq	r22,r21,11cc8 <__divdf3+0x84c>
   11964:	a00b883a 	mov	r5,r20
   11968:	a809883a 	mov	r4,r21
   1196c:	d8c00215 	stw	r3,8(sp)
   11970:	0010aec0 	call	10aec <__udivsi3>
   11974:	100b883a 	mov	r5,r2
   11978:	9009883a 	mov	r4,r18
   1197c:	d8800515 	stw	r2,20(sp)
   11980:	0010ba80 	call	10ba8 <__mulsi3>
   11984:	a809883a 	mov	r4,r21
   11988:	a00b883a 	mov	r5,r20
   1198c:	d8800415 	stw	r2,16(sp)
   11990:	0010b500 	call	10b50 <__umodsi3>
   11994:	1004943a 	slli	r2,r2,16
   11998:	8008d43a 	srli	r4,r16,16
   1199c:	da000417 	ldw	r8,16(sp)
   119a0:	d8c00217 	ldw	r3,8(sp)
   119a4:	2084b03a 	or	r2,r4,r2
   119a8:	d9c00517 	ldw	r7,20(sp)
   119ac:	1200062e 	bgeu	r2,r8,119c8 <__divdf3+0x54c>
   119b0:	1585883a 	add	r2,r2,r22
   119b4:	393fffc4 	addi	r4,r7,-1
   119b8:	1580c536 	bltu	r2,r22,11cd0 <__divdf3+0x854>
   119bc:	1200c42e 	bgeu	r2,r8,11cd0 <__divdf3+0x854>
   119c0:	39ffff84 	addi	r7,r7,-2
   119c4:	1585883a 	add	r2,r2,r22
   119c8:	122bc83a 	sub	r21,r2,r8
   119cc:	a00b883a 	mov	r5,r20
   119d0:	a809883a 	mov	r4,r21
   119d4:	d8c00215 	stw	r3,8(sp)
   119d8:	d9c00515 	stw	r7,20(sp)
   119dc:	0010aec0 	call	10aec <__udivsi3>
   119e0:	9009883a 	mov	r4,r18
   119e4:	100b883a 	mov	r5,r2
   119e8:	d8800415 	stw	r2,16(sp)
   119ec:	0010ba80 	call	10ba8 <__mulsi3>
   119f0:	a809883a 	mov	r4,r21
   119f4:	a00b883a 	mov	r5,r20
   119f8:	1025883a 	mov	r18,r2
   119fc:	0010b500 	call	10b50 <__umodsi3>
   11a00:	1004943a 	slli	r2,r2,16
   11a04:	813fffcc 	andi	r4,r16,65535
   11a08:	d8c00217 	ldw	r3,8(sp)
   11a0c:	20a0b03a 	or	r16,r4,r2
   11a10:	d9c00517 	ldw	r7,20(sp)
   11a14:	da000417 	ldw	r8,16(sp)
   11a18:	8480062e 	bgeu	r16,r18,11a34 <__divdf3+0x5b8>
   11a1c:	85a1883a 	add	r16,r16,r22
   11a20:	40bfffc4 	addi	r2,r8,-1
   11a24:	8580ac36 	bltu	r16,r22,11cd8 <__divdf3+0x85c>
   11a28:	8480ab2e 	bgeu	r16,r18,11cd8 <__divdf3+0x85c>
   11a2c:	423fff84 	addi	r8,r8,-2
   11a30:	85a1883a 	add	r16,r16,r22
   11a34:	3804943a 	slli	r2,r7,16
   11a38:	84a1c83a 	sub	r16,r16,r18
   11a3c:	e009883a 	mov	r4,fp
   11a40:	1228b03a 	or	r20,r2,r8
   11a44:	a1ffffcc 	andi	r7,r20,65535
   11a48:	a024d43a 	srli	r18,r20,16
   11a4c:	380b883a 	mov	r5,r7
   11a50:	d8c00215 	stw	r3,8(sp)
   11a54:	d9c00515 	stw	r7,20(sp)
   11a58:	0010ba80 	call	10ba8 <__mulsi3>
   11a5c:	900b883a 	mov	r5,r18
   11a60:	e009883a 	mov	r4,fp
   11a64:	102b883a 	mov	r21,r2
   11a68:	0010ba80 	call	10ba8 <__mulsi3>
   11a6c:	900b883a 	mov	r5,r18
   11a70:	b809883a 	mov	r4,r23
   11a74:	1039883a 	mov	fp,r2
   11a78:	0010ba80 	call	10ba8 <__mulsi3>
   11a7c:	d9c00517 	ldw	r7,20(sp)
   11a80:	b80b883a 	mov	r5,r23
   11a84:	1025883a 	mov	r18,r2
   11a88:	3809883a 	mov	r4,r7
   11a8c:	0010ba80 	call	10ba8 <__mulsi3>
   11a90:	a808d43a 	srli	r4,r21,16
   11a94:	1705883a 	add	r2,r2,fp
   11a98:	d8c00217 	ldw	r3,8(sp)
   11a9c:	2085883a 	add	r2,r4,r2
   11aa0:	1700022e 	bgeu	r2,fp,11aac <__divdf3+0x630>
   11aa4:	01000074 	movhi	r4,1
   11aa8:	9125883a 	add	r18,r18,r4
   11aac:	1008d43a 	srli	r4,r2,16
   11ab0:	1004943a 	slli	r2,r2,16
   11ab4:	ad7fffcc 	andi	r21,r21,65535
   11ab8:	2489883a 	add	r4,r4,r18
   11abc:	1545883a 	add	r2,r2,r21
   11ac0:	81003836 	bltu	r16,r4,11ba4 <__divdf3+0x728>
   11ac4:	81003626 	beq	r16,r4,11ba0 <__divdf3+0x724>
   11ac8:	a5000054 	ori	r20,r20,1
   11acc:	1880ffc4 	addi	r2,r3,1023
   11ad0:	00bf2e0e 	bge	zero,r2,1178c <__divdf3+0x310>
   11ad4:	a10001cc 	andi	r4,r20,7
   11ad8:	20000726 	beq	r4,zero,11af8 <__divdf3+0x67c>
   11adc:	a10003cc 	andi	r4,r20,15
   11ae0:	01400104 	movi	r5,4
   11ae4:	21400426 	beq	r4,r5,11af8 <__divdf3+0x67c>
   11ae8:	a149883a 	add	r4,r20,r5
   11aec:	2529803a 	cmpltu	r20,r4,r20
   11af0:	8d23883a 	add	r17,r17,r20
   11af4:	2029883a 	mov	r20,r4
   11af8:	8900402c 	andhi	r4,r17,256
   11afc:	20000426 	beq	r4,zero,11b10 <__divdf3+0x694>
   11b00:	18810004 	addi	r2,r3,1024
   11b04:	00ffc034 	movhi	r3,65280
   11b08:	18ffffc4 	addi	r3,r3,-1
   11b0c:	88e2703a 	and	r17,r17,r3
   11b10:	00c1ff84 	movi	r3,2046
   11b14:	18beb416 	blt	r3,r2,115e8 <__divdf3+0x16c>
   11b18:	a028d0fa 	srli	r20,r20,3
   11b1c:	882a977a 	slli	r21,r17,29
   11b20:	8820927a 	slli	r16,r17,9
   11b24:	1081ffcc 	andi	r2,r2,2047
   11b28:	ad2ab03a 	or	r21,r21,r20
   11b2c:	8020d33a 	srli	r16,r16,12
   11b30:	9900004c 	andi	r4,r19,1
   11b34:	003eb006 	br	115f8 <__divdf3+0x17c>
   11b38:	8080022c 	andhi	r2,r16,8
   11b3c:	10001226 	beq	r2,zero,11b88 <__divdf3+0x70c>
   11b40:	8880022c 	andhi	r2,r17,8
   11b44:	1000101e 	bne	r2,zero,11b88 <__divdf3+0x70c>
   11b48:	00800434 	movhi	r2,16
   11b4c:	8c000234 	orhi	r16,r17,8
   11b50:	10bfffc4 	addi	r2,r2,-1
   11b54:	b809883a 	mov	r4,r23
   11b58:	80a0703a 	and	r16,r16,r2
   11b5c:	a02b883a 	mov	r21,r20
   11b60:	003f0806 	br	11784 <__divdf3+0x308>
   11b64:	008000c4 	movi	r2,3
   11b68:	3880b126 	beq	r7,r2,11e30 <__divdf3+0x9b4>
   11b6c:	00800044 	movi	r2,1
   11b70:	38805b1e 	bne	r7,r2,11ce0 <__divdf3+0x864>
   11b74:	e009883a 	mov	r4,fp
   11b78:	0005883a 	mov	r2,zero
   11b7c:	0021883a 	mov	r16,zero
   11b80:	002b883a 	mov	r21,zero
   11b84:	003e9c06 	br	115f8 <__divdf3+0x17c>
   11b88:	00800434 	movhi	r2,16
   11b8c:	84000234 	orhi	r16,r16,8
   11b90:	10bfffc4 	addi	r2,r2,-1
   11b94:	b009883a 	mov	r4,r22
   11b98:	80a0703a 	and	r16,r16,r2
   11b9c:	003ef906 	br	11784 <__divdf3+0x308>
   11ba0:	103fca26 	beq	r2,zero,11acc <__divdf3+0x650>
   11ba4:	b421883a 	add	r16,r22,r16
   11ba8:	a17fffc4 	addi	r5,r20,-1
   11bac:	8580422e 	bgeu	r16,r22,11cb8 <__divdf3+0x83c>
   11bb0:	2829883a 	mov	r20,r5
   11bb4:	813fc41e 	bne	r16,r4,11ac8 <__divdf3+0x64c>
   11bb8:	d9800017 	ldw	r6,0(sp)
   11bbc:	30bfc21e 	bne	r6,r2,11ac8 <__divdf3+0x64c>
   11bc0:	003fc206 	br	11acc <__divdf3+0x650>
   11bc4:	143ff604 	addi	r16,r2,-40
   11bc8:	8c20983a 	sll	r16,r17,r16
   11bcc:	002b883a 	mov	r21,zero
   11bd0:	003eb406 	br	116a4 <__divdf3+0x228>
   11bd4:	d9800215 	stw	r6,8(sp)
   11bd8:	d9c00515 	stw	r7,20(sp)
   11bdc:	da000415 	stw	r8,16(sp)
   11be0:	00132040 	call	13204 <__clzsi2>
   11be4:	10800804 	addi	r2,r2,32
   11be8:	da000417 	ldw	r8,16(sp)
   11bec:	d9c00517 	ldw	r7,20(sp)
   11bf0:	d9800217 	ldw	r6,8(sp)
   11bf4:	003ea106 	br	1167c <__divdf3+0x200>
   11bf8:	147ff604 	addi	r17,r2,-40
   11bfc:	3462983a 	sll	r17,r6,r17
   11c00:	0029883a 	mov	r20,zero
   11c04:	003ec906 	br	1172c <__divdf3+0x2b0>
   11c08:	3009883a 	mov	r4,r6
   11c0c:	d9400115 	stw	r5,4(sp)
   11c10:	d9800215 	stw	r6,8(sp)
   11c14:	da000415 	stw	r8,16(sp)
   11c18:	da400315 	stw	r9,12(sp)
   11c1c:	00132040 	call	13204 <__clzsi2>
   11c20:	10800804 	addi	r2,r2,32
   11c24:	da400317 	ldw	r9,12(sp)
   11c28:	da000417 	ldw	r8,16(sp)
   11c2c:	d9800217 	ldw	r6,8(sp)
   11c30:	d9400117 	ldw	r5,4(sp)
   11c34:	003eb306 	br	11704 <__divdf3+0x288>
   11c38:	d9800017 	ldw	r6,0(sp)
   11c3c:	a9ab883a 	add	r21,r21,r6
   11c40:	a98b803a 	cmpltu	r5,r21,r6
   11c44:	2d8b883a 	add	r5,r5,r22
   11c48:	2a11883a 	add	r8,r5,r8
   11c4c:	897fffc4 	addi	r5,r17,-1
   11c50:	b2000c2e 	bgeu	r22,r8,11c84 <__divdf3+0x808>
   11c54:	41003f36 	bltu	r8,r4,11d54 <__divdf3+0x8d8>
   11c58:	22006c26 	beq	r4,r8,11e0c <__divdf3+0x990>
   11c5c:	4109c83a 	sub	r4,r8,r4
   11c60:	2823883a 	mov	r17,r5
   11c64:	003f3b06 	br	11954 <__divdf3+0x4d8>
   11c68:	ad3ed336 	bltu	r21,r20,117b8 <__divdf3+0x33c>
   11c6c:	a804d07a 	srli	r2,r21,1
   11c70:	802e97fa 	slli	r23,r16,31
   11c74:	a82a97fa 	slli	r21,r21,31
   11c78:	8020d07a 	srli	r16,r16,1
   11c7c:	b8aeb03a 	or	r23,r23,r2
   11c80:	003ed006 	br	117c4 <__divdf3+0x348>
   11c84:	b23ff51e 	bne	r22,r8,11c5c <__divdf3+0x7e0>
   11c88:	d9800017 	ldw	r6,0(sp)
   11c8c:	a9bff12e 	bgeu	r21,r6,11c54 <__divdf3+0x7d8>
   11c90:	b109c83a 	sub	r4,r22,r4
   11c94:	2823883a 	mov	r17,r5
   11c98:	003f2e06 	br	11954 <__divdf3+0x4d8>
   11c9c:	2021883a 	mov	r16,r4
   11ca0:	003eff06 	br	118a0 <__divdf3+0x424>
   11ca4:	2023883a 	mov	r17,r4
   11ca8:	003ee406 	br	1183c <__divdf3+0x3c0>
   11cac:	a8bfe236 	bltu	r21,r2,11c38 <__divdf3+0x7bc>
   11cb0:	0009883a 	mov	r4,zero
   11cb4:	003f2706 	br	11954 <__divdf3+0x4d8>
   11cb8:	81002d36 	bltu	r16,r4,11d70 <__divdf3+0x8f4>
   11cbc:	24005626 	beq	r4,r16,11e18 <__divdf3+0x99c>
   11cc0:	2829883a 	mov	r20,r5
   11cc4:	003f8006 	br	11ac8 <__divdf3+0x64c>
   11cc8:	053fffc4 	movi	r20,-1
   11ccc:	003f7f06 	br	11acc <__divdf3+0x650>
   11cd0:	200f883a 	mov	r7,r4
   11cd4:	003f3c06 	br	119c8 <__divdf3+0x54c>
   11cd8:	1011883a 	mov	r8,r2
   11cdc:	003f5506 	br	11a34 <__divdf3+0x5b8>
   11ce0:	e027883a 	mov	r19,fp
   11ce4:	003f7906 	br	11acc <__divdf3+0x650>
   11ce8:	010007c4 	movi	r4,31
   11cec:	20c02816 	blt	r4,r3,11d90 <__divdf3+0x914>
   11cf0:	00800804 	movi	r2,32
   11cf4:	10c5c83a 	sub	r2,r2,r3
   11cf8:	888a983a 	sll	r5,r17,r2
   11cfc:	a0c8d83a 	srl	r4,r20,r3
   11d00:	a084983a 	sll	r2,r20,r2
   11d04:	88e2d83a 	srl	r17,r17,r3
   11d08:	2906b03a 	or	r3,r5,r4
   11d0c:	1004c03a 	cmpne	r2,r2,zero
   11d10:	1886b03a 	or	r3,r3,r2
   11d14:	188001cc 	andi	r2,r3,7
   11d18:	10000726 	beq	r2,zero,11d38 <__divdf3+0x8bc>
   11d1c:	188003cc 	andi	r2,r3,15
   11d20:	01000104 	movi	r4,4
   11d24:	11000426 	beq	r2,r4,11d38 <__divdf3+0x8bc>
   11d28:	1805883a 	mov	r2,r3
   11d2c:	10c00104 	addi	r3,r2,4
   11d30:	1885803a 	cmpltu	r2,r3,r2
   11d34:	88a3883a 	add	r17,r17,r2
   11d38:	8880202c 	andhi	r2,r17,128
   11d3c:	10002926 	beq	r2,zero,11de4 <__divdf3+0x968>
   11d40:	9900004c 	andi	r4,r19,1
   11d44:	00800044 	movi	r2,1
   11d48:	0021883a 	mov	r16,zero
   11d4c:	002b883a 	mov	r21,zero
   11d50:	003e2906 	br	115f8 <__divdf3+0x17c>
   11d54:	d9800017 	ldw	r6,0(sp)
   11d58:	8c7fff84 	addi	r17,r17,-2
   11d5c:	a9ab883a 	add	r21,r21,r6
   11d60:	a98b803a 	cmpltu	r5,r21,r6
   11d64:	2d8b883a 	add	r5,r5,r22
   11d68:	2a11883a 	add	r8,r5,r8
   11d6c:	003ef806 	br	11950 <__divdf3+0x4d4>
   11d70:	d9800017 	ldw	r6,0(sp)
   11d74:	318f883a 	add	r7,r6,r6
   11d78:	398b803a 	cmpltu	r5,r7,r6
   11d7c:	2d8d883a 	add	r6,r5,r22
   11d80:	81a1883a 	add	r16,r16,r6
   11d84:	a17fff84 	addi	r5,r20,-2
   11d88:	d9c00015 	stw	r7,0(sp)
   11d8c:	003f8806 	br	11bb0 <__divdf3+0x734>
   11d90:	013ff844 	movi	r4,-31
   11d94:	2085c83a 	sub	r2,r4,r2
   11d98:	8888d83a 	srl	r4,r17,r2
   11d9c:	00800804 	movi	r2,32
   11da0:	18802126 	beq	r3,r2,11e28 <__divdf3+0x9ac>
   11da4:	04001004 	movi	r16,64
   11da8:	80c7c83a 	sub	r3,r16,r3
   11dac:	88e0983a 	sll	r16,r17,r3
   11db0:	8504b03a 	or	r2,r16,r20
   11db4:	1004c03a 	cmpne	r2,r2,zero
   11db8:	2084b03a 	or	r2,r4,r2
   11dbc:	144001cc 	andi	r17,r2,7
   11dc0:	88000d1e 	bne	r17,zero,11df8 <__divdf3+0x97c>
   11dc4:	0021883a 	mov	r16,zero
   11dc8:	102ad0fa 	srli	r21,r2,3
   11dcc:	9900004c 	andi	r4,r19,1
   11dd0:	0005883a 	mov	r2,zero
   11dd4:	ac6ab03a 	or	r21,r21,r17
   11dd8:	003e0706 	br	115f8 <__divdf3+0x17c>
   11ddc:	1007883a 	mov	r3,r2
   11de0:	0023883a 	mov	r17,zero
   11de4:	8820927a 	slli	r16,r17,9
   11de8:	1805883a 	mov	r2,r3
   11dec:	8822977a 	slli	r17,r17,29
   11df0:	8020d33a 	srli	r16,r16,12
   11df4:	003ff406 	br	11dc8 <__divdf3+0x94c>
   11df8:	10c003cc 	andi	r3,r2,15
   11dfc:	01000104 	movi	r4,4
   11e00:	193ff626 	beq	r3,r4,11ddc <__divdf3+0x960>
   11e04:	0023883a 	mov	r17,zero
   11e08:	003fc806 	br	11d2c <__divdf3+0x8b0>
   11e0c:	a8bfd136 	bltu	r21,r2,11d54 <__divdf3+0x8d8>
   11e10:	2823883a 	mov	r17,r5
   11e14:	003fa606 	br	11cb0 <__divdf3+0x834>
   11e18:	d9800017 	ldw	r6,0(sp)
   11e1c:	30bfd436 	bltu	r6,r2,11d70 <__divdf3+0x8f4>
   11e20:	2829883a 	mov	r20,r5
   11e24:	003f6406 	br	11bb8 <__divdf3+0x73c>
   11e28:	0021883a 	mov	r16,zero
   11e2c:	003fe006 	br	11db0 <__divdf3+0x934>
   11e30:	00800434 	movhi	r2,16
   11e34:	8c000234 	orhi	r16,r17,8
   11e38:	10bfffc4 	addi	r2,r2,-1
   11e3c:	e009883a 	mov	r4,fp
   11e40:	80a0703a 	and	r16,r16,r2
   11e44:	a02b883a 	mov	r21,r20
   11e48:	003e4e06 	br	11784 <__divdf3+0x308>

00011e4c <__ledf2>:
   11e4c:	2804d53a 	srli	r2,r5,20
   11e50:	3810d53a 	srli	r8,r7,20
   11e54:	00c00434 	movhi	r3,16
   11e58:	18ffffc4 	addi	r3,r3,-1
   11e5c:	1081ffcc 	andi	r2,r2,2047
   11e60:	0241ffc4 	movi	r9,2047
   11e64:	28d4703a 	and	r10,r5,r3
   11e68:	4201ffcc 	andi	r8,r8,2047
   11e6c:	38c6703a 	and	r3,r7,r3
   11e70:	280ad7fa 	srli	r5,r5,31
   11e74:	380ed7fa 	srli	r7,r7,31
   11e78:	12401f26 	beq	r2,r9,11ef8 <__ledf2+0xac>
   11e7c:	0241ffc4 	movi	r9,2047
   11e80:	42401426 	beq	r8,r9,11ed4 <__ledf2+0x88>
   11e84:	1000091e 	bne	r2,zero,11eac <__ledf2+0x60>
   11e88:	2296b03a 	or	r11,r4,r10
   11e8c:	5813003a 	cmpeq	r9,r11,zero
   11e90:	29403fcc 	andi	r5,r5,255
   11e94:	40000a1e 	bne	r8,zero,11ec0 <__ledf2+0x74>
   11e98:	30d8b03a 	or	r12,r6,r3
   11e9c:	6000081e 	bne	r12,zero,11ec0 <__ledf2+0x74>
   11ea0:	0005883a 	mov	r2,zero
   11ea4:	5800111e 	bne	r11,zero,11eec <__ledf2+0xa0>
   11ea8:	f800283a 	ret
   11eac:	29403fcc 	andi	r5,r5,255
   11eb0:	40000c1e 	bne	r8,zero,11ee4 <__ledf2+0x98>
   11eb4:	30d2b03a 	or	r9,r6,r3
   11eb8:	48000c26 	beq	r9,zero,11eec <__ledf2+0xa0>
   11ebc:	0013883a 	mov	r9,zero
   11ec0:	39c03fcc 	andi	r7,r7,255
   11ec4:	48000826 	beq	r9,zero,11ee8 <__ledf2+0x9c>
   11ec8:	38001126 	beq	r7,zero,11f10 <__ledf2+0xc4>
   11ecc:	00800044 	movi	r2,1
   11ed0:	f800283a 	ret
   11ed4:	30d2b03a 	or	r9,r6,r3
   11ed8:	483fea26 	beq	r9,zero,11e84 <__ledf2+0x38>
   11edc:	00800084 	movi	r2,2
   11ee0:	f800283a 	ret
   11ee4:	39c03fcc 	andi	r7,r7,255
   11ee8:	39400726 	beq	r7,r5,11f08 <__ledf2+0xbc>
   11eec:	2800081e 	bne	r5,zero,11f10 <__ledf2+0xc4>
   11ef0:	00800044 	movi	r2,1
   11ef4:	f800283a 	ret
   11ef8:	2292b03a 	or	r9,r4,r10
   11efc:	483fdf26 	beq	r9,zero,11e7c <__ledf2+0x30>
   11f00:	00800084 	movi	r2,2
   11f04:	f800283a 	ret
   11f08:	4080030e 	bge	r8,r2,11f18 <__ledf2+0xcc>
   11f0c:	383fef26 	beq	r7,zero,11ecc <__ledf2+0x80>
   11f10:	00bfffc4 	movi	r2,-1
   11f14:	f800283a 	ret
   11f18:	123feb16 	blt	r2,r8,11ec8 <__ledf2+0x7c>
   11f1c:	1abff336 	bltu	r3,r10,11eec <__ledf2+0xa0>
   11f20:	50c00326 	beq	r10,r3,11f30 <__ledf2+0xe4>
   11f24:	50c0042e 	bgeu	r10,r3,11f38 <__ledf2+0xec>
   11f28:	283fe81e 	bne	r5,zero,11ecc <__ledf2+0x80>
   11f2c:	003ff806 	br	11f10 <__ledf2+0xc4>
   11f30:	313fee36 	bltu	r6,r4,11eec <__ledf2+0xa0>
   11f34:	21bffc36 	bltu	r4,r6,11f28 <__ledf2+0xdc>
   11f38:	0005883a 	mov	r2,zero
   11f3c:	f800283a 	ret

00011f40 <__muldf3>:
   11f40:	deffee04 	addi	sp,sp,-72
   11f44:	dd000c15 	stw	r20,48(sp)
   11f48:	2828d53a 	srli	r20,r5,20
   11f4c:	ddc00f15 	stw	r23,60(sp)
   11f50:	282ed7fa 	srli	r23,r5,31
   11f54:	dc000815 	stw	r16,32(sp)
   11f58:	04000434 	movhi	r16,16
   11f5c:	dcc00b15 	stw	r19,44(sp)
   11f60:	843fffc4 	addi	r16,r16,-1
   11f64:	dfc01115 	stw	ra,68(sp)
   11f68:	df001015 	stw	fp,64(sp)
   11f6c:	dd800e15 	stw	r22,56(sp)
   11f70:	dd400d15 	stw	r21,52(sp)
   11f74:	dc800a15 	stw	r18,40(sp)
   11f78:	dc400915 	stw	r17,36(sp)
   11f7c:	a501ffcc 	andi	r20,r20,2047
   11f80:	2c20703a 	and	r16,r5,r16
   11f84:	b827883a 	mov	r19,r23
   11f88:	ba403fcc 	andi	r9,r23,255
   11f8c:	a0006026 	beq	r20,zero,12110 <__muldf3+0x1d0>
   11f90:	0081ffc4 	movi	r2,2047
   11f94:	202d883a 	mov	r22,r4
   11f98:	a0803626 	beq	r20,r2,12074 <__muldf3+0x134>
   11f9c:	84000434 	orhi	r16,r16,16
   11fa0:	200ad77a 	srli	r5,r4,29
   11fa4:	800490fa 	slli	r2,r16,3
   11fa8:	202c90fa 	slli	r22,r4,3
   11fac:	a53f0044 	addi	r20,r20,-1023
   11fb0:	28a0b03a 	or	r16,r5,r2
   11fb4:	002b883a 	mov	r21,zero
   11fb8:	000b883a 	mov	r5,zero
   11fbc:	3804d53a 	srli	r2,r7,20
   11fc0:	3838d7fa 	srli	fp,r7,31
   11fc4:	04400434 	movhi	r17,16
   11fc8:	8c7fffc4 	addi	r17,r17,-1
   11fcc:	1081ffcc 	andi	r2,r2,2047
   11fd0:	3025883a 	mov	r18,r6
   11fd4:	3c62703a 	and	r17,r7,r17
   11fd8:	e2803fcc 	andi	r10,fp,255
   11fdc:	10006d26 	beq	r2,zero,12194 <__muldf3+0x254>
   11fe0:	00c1ffc4 	movi	r3,2047
   11fe4:	10c06526 	beq	r2,r3,1217c <__muldf3+0x23c>
   11fe8:	8c400434 	orhi	r17,r17,16
   11fec:	300ed77a 	srli	r7,r6,29
   11ff0:	880690fa 	slli	r3,r17,3
   11ff4:	302490fa 	slli	r18,r6,3
   11ff8:	10bf0044 	addi	r2,r2,-1023
   11ffc:	38e2b03a 	or	r17,r7,r3
   12000:	000f883a 	mov	r7,zero
   12004:	a087883a 	add	r3,r20,r2
   12008:	010003c4 	movi	r4,15
   1200c:	3d44b03a 	or	r2,r7,r21
   12010:	e5ccf03a 	xor	r6,fp,r23
   12014:	1a000044 	addi	r8,r3,1
   12018:	20809b36 	bltu	r4,r2,12288 <__muldf3+0x348>
   1201c:	100490ba 	slli	r2,r2,2
   12020:	01000074 	movhi	r4,1
   12024:	21080d04 	addi	r4,r4,8244
   12028:	1105883a 	add	r2,r2,r4
   1202c:	10800017 	ldw	r2,0(r2)
   12030:	1000683a 	jmp	r2
   12034:	00012288 	cmpgei	zero,zero,1162
   12038:	00012094 	movui	zero,1154
   1203c:	00012094 	movui	zero,1154
   12040:	00012090 	cmplti	zero,zero,1154
   12044:	00012264 	muli	zero,zero,1161
   12048:	00012264 	muli	zero,zero,1161
   1204c:	0001224c 	andi	zero,zero,1161
   12050:	00012090 	cmplti	zero,zero,1154
   12054:	00012264 	muli	zero,zero,1161
   12058:	0001224c 	andi	zero,zero,1161
   1205c:	00012264 	muli	zero,zero,1161
   12060:	00012090 	cmplti	zero,zero,1154
   12064:	00012274 	movhi	zero,1161
   12068:	00012274 	movhi	zero,1161
   1206c:	00012274 	movhi	zero,1161
   12070:	000125d4 	movui	zero,1175
   12074:	2404b03a 	or	r2,r4,r16
   12078:	1000711e 	bne	r2,zero,12240 <__muldf3+0x300>
   1207c:	05400204 	movi	r21,8
   12080:	0021883a 	mov	r16,zero
   12084:	002d883a 	mov	r22,zero
   12088:	01400084 	movi	r5,2
   1208c:	003fcb06 	br	11fbc <__muldf3+0x7c>
   12090:	500d883a 	mov	r6,r10
   12094:	00800084 	movi	r2,2
   12098:	38805926 	beq	r7,r2,12200 <__muldf3+0x2c0>
   1209c:	008000c4 	movi	r2,3
   120a0:	3881bb26 	beq	r7,r2,12790 <__muldf3+0x850>
   120a4:	00800044 	movi	r2,1
   120a8:	3881961e 	bne	r7,r2,12704 <__muldf3+0x7c4>
   120ac:	3027883a 	mov	r19,r6
   120b0:	0005883a 	mov	r2,zero
   120b4:	0021883a 	mov	r16,zero
   120b8:	002d883a 	mov	r22,zero
   120bc:	1004953a 	slli	r2,r2,20
   120c0:	98c03fcc 	andi	r3,r19,255
   120c4:	04400434 	movhi	r17,16
   120c8:	8c7fffc4 	addi	r17,r17,-1
   120cc:	180697fa 	slli	r3,r3,31
   120d0:	8460703a 	and	r16,r16,r17
   120d4:	80a0b03a 	or	r16,r16,r2
   120d8:	80c6b03a 	or	r3,r16,r3
   120dc:	b005883a 	mov	r2,r22
   120e0:	dfc01117 	ldw	ra,68(sp)
   120e4:	df001017 	ldw	fp,64(sp)
   120e8:	ddc00f17 	ldw	r23,60(sp)
   120ec:	dd800e17 	ldw	r22,56(sp)
   120f0:	dd400d17 	ldw	r21,52(sp)
   120f4:	dd000c17 	ldw	r20,48(sp)
   120f8:	dcc00b17 	ldw	r19,44(sp)
   120fc:	dc800a17 	ldw	r18,40(sp)
   12100:	dc400917 	ldw	r17,36(sp)
   12104:	dc000817 	ldw	r16,32(sp)
   12108:	dec01204 	addi	sp,sp,72
   1210c:	f800283a 	ret
   12110:	2404b03a 	or	r2,r4,r16
   12114:	202b883a 	mov	r21,r4
   12118:	10004426 	beq	r2,zero,1222c <__muldf3+0x2ec>
   1211c:	80015126 	beq	r16,zero,12664 <__muldf3+0x724>
   12120:	8009883a 	mov	r4,r16
   12124:	d9800715 	stw	r6,28(sp)
   12128:	d9c00215 	stw	r7,8(sp)
   1212c:	da400415 	stw	r9,16(sp)
   12130:	00132040 	call	13204 <__clzsi2>
   12134:	d9800717 	ldw	r6,28(sp)
   12138:	d9c00217 	ldw	r7,8(sp)
   1213c:	da400417 	ldw	r9,16(sp)
   12140:	113ffd44 	addi	r4,r2,-11
   12144:	00c00704 	movi	r3,28
   12148:	19014216 	blt	r3,r4,12654 <__muldf3+0x714>
   1214c:	00c00744 	movi	r3,29
   12150:	15bffe04 	addi	r22,r2,-8
   12154:	1907c83a 	sub	r3,r3,r4
   12158:	85a0983a 	sll	r16,r16,r22
   1215c:	a8c6d83a 	srl	r3,r21,r3
   12160:	adac983a 	sll	r22,r21,r22
   12164:	1c20b03a 	or	r16,r3,r16
   12168:	1080fcc4 	addi	r2,r2,1011
   1216c:	00a9c83a 	sub	r20,zero,r2
   12170:	002b883a 	mov	r21,zero
   12174:	000b883a 	mov	r5,zero
   12178:	003f9006 	br	11fbc <__muldf3+0x7c>
   1217c:	3446b03a 	or	r3,r6,r17
   12180:	1800281e 	bne	r3,zero,12224 <__muldf3+0x2e4>
   12184:	0023883a 	mov	r17,zero
   12188:	0025883a 	mov	r18,zero
   1218c:	01c00084 	movi	r7,2
   12190:	003f9c06 	br	12004 <__muldf3+0xc4>
   12194:	3446b03a 	or	r3,r6,r17
   12198:	18001e26 	beq	r3,zero,12214 <__muldf3+0x2d4>
   1219c:	88012126 	beq	r17,zero,12624 <__muldf3+0x6e4>
   121a0:	8809883a 	mov	r4,r17
   121a4:	d9400215 	stw	r5,8(sp)
   121a8:	d9800715 	stw	r6,28(sp)
   121ac:	da400415 	stw	r9,16(sp)
   121b0:	da800315 	stw	r10,12(sp)
   121b4:	00132040 	call	13204 <__clzsi2>
   121b8:	d9400217 	ldw	r5,8(sp)
   121bc:	d9800717 	ldw	r6,28(sp)
   121c0:	da400417 	ldw	r9,16(sp)
   121c4:	da800317 	ldw	r10,12(sp)
   121c8:	113ffd44 	addi	r4,r2,-11
   121cc:	00c00704 	movi	r3,28
   121d0:	19011016 	blt	r3,r4,12614 <__muldf3+0x6d4>
   121d4:	00c00744 	movi	r3,29
   121d8:	14bffe04 	addi	r18,r2,-8
   121dc:	1907c83a 	sub	r3,r3,r4
   121e0:	8ca2983a 	sll	r17,r17,r18
   121e4:	30c6d83a 	srl	r3,r6,r3
   121e8:	34a4983a 	sll	r18,r6,r18
   121ec:	1c62b03a 	or	r17,r3,r17
   121f0:	1080fcc4 	addi	r2,r2,1011
   121f4:	0085c83a 	sub	r2,zero,r2
   121f8:	000f883a 	mov	r7,zero
   121fc:	003f8106 	br	12004 <__muldf3+0xc4>
   12200:	3027883a 	mov	r19,r6
   12204:	0081ffc4 	movi	r2,2047
   12208:	0021883a 	mov	r16,zero
   1220c:	002d883a 	mov	r22,zero
   12210:	003faa06 	br	120bc <__muldf3+0x17c>
   12214:	0023883a 	mov	r17,zero
   12218:	0025883a 	mov	r18,zero
   1221c:	01c00044 	movi	r7,1
   12220:	003f7806 	br	12004 <__muldf3+0xc4>
   12224:	01c000c4 	movi	r7,3
   12228:	003f7606 	br	12004 <__muldf3+0xc4>
   1222c:	05400104 	movi	r21,4
   12230:	0021883a 	mov	r16,zero
   12234:	002d883a 	mov	r22,zero
   12238:	01400044 	movi	r5,1
   1223c:	003f5f06 	br	11fbc <__muldf3+0x7c>
   12240:	05400304 	movi	r21,12
   12244:	014000c4 	movi	r5,3
   12248:	003f5c06 	br	11fbc <__muldf3+0x7c>
   1224c:	04000434 	movhi	r16,16
   12250:	0027883a 	mov	r19,zero
   12254:	843fffc4 	addi	r16,r16,-1
   12258:	05bfffc4 	movi	r22,-1
   1225c:	0081ffc4 	movi	r2,2047
   12260:	003f9606 	br	120bc <__muldf3+0x17c>
   12264:	8023883a 	mov	r17,r16
   12268:	b025883a 	mov	r18,r22
   1226c:	280f883a 	mov	r7,r5
   12270:	003f8806 	br	12094 <__muldf3+0x154>
   12274:	8023883a 	mov	r17,r16
   12278:	b025883a 	mov	r18,r22
   1227c:	480d883a 	mov	r6,r9
   12280:	280f883a 	mov	r7,r5
   12284:	003f8306 	br	12094 <__muldf3+0x154>
   12288:	b026d43a 	srli	r19,r22,16
   1228c:	902ed43a 	srli	r23,r18,16
   12290:	b5bfffcc 	andi	r22,r22,65535
   12294:	94bfffcc 	andi	r18,r18,65535
   12298:	b00b883a 	mov	r5,r22
   1229c:	9009883a 	mov	r4,r18
   122a0:	d8c00515 	stw	r3,20(sp)
   122a4:	d9800715 	stw	r6,28(sp)
   122a8:	da000615 	stw	r8,24(sp)
   122ac:	0010ba80 	call	10ba8 <__mulsi3>
   122b0:	980b883a 	mov	r5,r19
   122b4:	9009883a 	mov	r4,r18
   122b8:	1029883a 	mov	r20,r2
   122bc:	0010ba80 	call	10ba8 <__mulsi3>
   122c0:	b80b883a 	mov	r5,r23
   122c4:	9809883a 	mov	r4,r19
   122c8:	102b883a 	mov	r21,r2
   122cc:	0010ba80 	call	10ba8 <__mulsi3>
   122d0:	b809883a 	mov	r4,r23
   122d4:	b00b883a 	mov	r5,r22
   122d8:	1039883a 	mov	fp,r2
   122dc:	0010ba80 	call	10ba8 <__mulsi3>
   122e0:	a008d43a 	srli	r4,r20,16
   122e4:	1545883a 	add	r2,r2,r21
   122e8:	d8c00517 	ldw	r3,20(sp)
   122ec:	2085883a 	add	r2,r4,r2
   122f0:	d9800717 	ldw	r6,28(sp)
   122f4:	da000617 	ldw	r8,24(sp)
   122f8:	1540022e 	bgeu	r2,r21,12304 <__muldf3+0x3c4>
   122fc:	01000074 	movhi	r4,1
   12300:	e139883a 	add	fp,fp,r4
   12304:	100e943a 	slli	r7,r2,16
   12308:	1004d43a 	srli	r2,r2,16
   1230c:	882ad43a 	srli	r21,r17,16
   12310:	a53fffcc 	andi	r20,r20,65535
   12314:	8c7fffcc 	andi	r17,r17,65535
   12318:	3d29883a 	add	r20,r7,r20
   1231c:	b00b883a 	mov	r5,r22
   12320:	8809883a 	mov	r4,r17
   12324:	d8c00515 	stw	r3,20(sp)
   12328:	d9800715 	stw	r6,28(sp)
   1232c:	da000615 	stw	r8,24(sp)
   12330:	dd000115 	stw	r20,4(sp)
   12334:	d8800015 	stw	r2,0(sp)
   12338:	0010ba80 	call	10ba8 <__mulsi3>
   1233c:	980b883a 	mov	r5,r19
   12340:	8809883a 	mov	r4,r17
   12344:	d8800215 	stw	r2,8(sp)
   12348:	0010ba80 	call	10ba8 <__mulsi3>
   1234c:	9809883a 	mov	r4,r19
   12350:	a80b883a 	mov	r5,r21
   12354:	1029883a 	mov	r20,r2
   12358:	0010ba80 	call	10ba8 <__mulsi3>
   1235c:	b00b883a 	mov	r5,r22
   12360:	a809883a 	mov	r4,r21
   12364:	d8800415 	stw	r2,16(sp)
   12368:	0010ba80 	call	10ba8 <__mulsi3>
   1236c:	d9c00217 	ldw	r7,8(sp)
   12370:	1505883a 	add	r2,r2,r20
   12374:	d8c00517 	ldw	r3,20(sp)
   12378:	3826d43a 	srli	r19,r7,16
   1237c:	d9800717 	ldw	r6,28(sp)
   12380:	da000617 	ldw	r8,24(sp)
   12384:	9885883a 	add	r2,r19,r2
   12388:	da400417 	ldw	r9,16(sp)
   1238c:	1500022e 	bgeu	r2,r20,12398 <__muldf3+0x458>
   12390:	01000074 	movhi	r4,1
   12394:	4913883a 	add	r9,r9,r4
   12398:	1028d43a 	srli	r20,r2,16
   1239c:	1004943a 	slli	r2,r2,16
   123a0:	802cd43a 	srli	r22,r16,16
   123a4:	843fffcc 	andi	r16,r16,65535
   123a8:	3cffffcc 	andi	r19,r7,65535
   123ac:	9009883a 	mov	r4,r18
   123b0:	800b883a 	mov	r5,r16
   123b4:	a269883a 	add	r20,r20,r9
   123b8:	d8c00515 	stw	r3,20(sp)
   123bc:	d9800715 	stw	r6,28(sp)
   123c0:	da000615 	stw	r8,24(sp)
   123c4:	14e7883a 	add	r19,r2,r19
   123c8:	0010ba80 	call	10ba8 <__mulsi3>
   123cc:	9009883a 	mov	r4,r18
   123d0:	b00b883a 	mov	r5,r22
   123d4:	d8800315 	stw	r2,12(sp)
   123d8:	0010ba80 	call	10ba8 <__mulsi3>
   123dc:	b809883a 	mov	r4,r23
   123e0:	b00b883a 	mov	r5,r22
   123e4:	d8800215 	stw	r2,8(sp)
   123e8:	0010ba80 	call	10ba8 <__mulsi3>
   123ec:	b80b883a 	mov	r5,r23
   123f0:	8009883a 	mov	r4,r16
   123f4:	d8800415 	stw	r2,16(sp)
   123f8:	0010ba80 	call	10ba8 <__mulsi3>
   123fc:	da800317 	ldw	r10,12(sp)
   12400:	d9c00217 	ldw	r7,8(sp)
   12404:	d9000017 	ldw	r4,0(sp)
   12408:	502ed43a 	srli	r23,r10,16
   1240c:	11c5883a 	add	r2,r2,r7
   12410:	24e5883a 	add	r18,r4,r19
   12414:	b885883a 	add	r2,r23,r2
   12418:	d8c00517 	ldw	r3,20(sp)
   1241c:	d9800717 	ldw	r6,28(sp)
   12420:	da000617 	ldw	r8,24(sp)
   12424:	da400417 	ldw	r9,16(sp)
   12428:	11c0022e 	bgeu	r2,r7,12434 <__muldf3+0x4f4>
   1242c:	01000074 	movhi	r4,1
   12430:	4913883a 	add	r9,r9,r4
   12434:	100ed43a 	srli	r7,r2,16
   12438:	1004943a 	slli	r2,r2,16
   1243c:	55ffffcc 	andi	r23,r10,65535
   12440:	3a53883a 	add	r9,r7,r9
   12444:	8809883a 	mov	r4,r17
   12448:	800b883a 	mov	r5,r16
   1244c:	d8c00515 	stw	r3,20(sp)
   12450:	d9800715 	stw	r6,28(sp)
   12454:	da000615 	stw	r8,24(sp)
   12458:	da400415 	stw	r9,16(sp)
   1245c:	15ef883a 	add	r23,r2,r23
   12460:	0010ba80 	call	10ba8 <__mulsi3>
   12464:	8809883a 	mov	r4,r17
   12468:	b00b883a 	mov	r5,r22
   1246c:	d8800215 	stw	r2,8(sp)
   12470:	0010ba80 	call	10ba8 <__mulsi3>
   12474:	b00b883a 	mov	r5,r22
   12478:	a809883a 	mov	r4,r21
   1247c:	d8800315 	stw	r2,12(sp)
   12480:	0010ba80 	call	10ba8 <__mulsi3>
   12484:	8009883a 	mov	r4,r16
   12488:	a80b883a 	mov	r5,r21
   1248c:	1023883a 	mov	r17,r2
   12490:	0010ba80 	call	10ba8 <__mulsi3>
   12494:	d9c00217 	ldw	r7,8(sp)
   12498:	da800317 	ldw	r10,12(sp)
   1249c:	d8c00517 	ldw	r3,20(sp)
   124a0:	3808d43a 	srli	r4,r7,16
   124a4:	1285883a 	add	r2,r2,r10
   124a8:	d9800717 	ldw	r6,28(sp)
   124ac:	2085883a 	add	r2,r4,r2
   124b0:	da000617 	ldw	r8,24(sp)
   124b4:	da400417 	ldw	r9,16(sp)
   124b8:	1280022e 	bgeu	r2,r10,124c4 <__muldf3+0x584>
   124bc:	01000074 	movhi	r4,1
   124c0:	8923883a 	add	r17,r17,r4
   124c4:	1008943a 	slli	r4,r2,16
   124c8:	39ffffcc 	andi	r7,r7,65535
   124cc:	e4b9883a 	add	fp,fp,r18
   124d0:	21cf883a 	add	r7,r4,r7
   124d4:	e4e7803a 	cmpltu	r19,fp,r19
   124d8:	3d0f883a 	add	r7,r7,r20
   124dc:	bf39883a 	add	fp,r23,fp
   124e0:	99c9883a 	add	r4,r19,r7
   124e4:	e5ef803a 	cmpltu	r23,fp,r23
   124e8:	490b883a 	add	r5,r9,r4
   124ec:	1004d43a 	srli	r2,r2,16
   124f0:	b965883a 	add	r18,r23,r5
   124f4:	24c9803a 	cmpltu	r4,r4,r19
   124f8:	3d29803a 	cmpltu	r20,r7,r20
   124fc:	a128b03a 	or	r20,r20,r4
   12500:	95ef803a 	cmpltu	r23,r18,r23
   12504:	2a53803a 	cmpltu	r9,r5,r9
   12508:	a0a9883a 	add	r20,r20,r2
   1250c:	4deeb03a 	or	r23,r9,r23
   12510:	a5ef883a 	add	r23,r20,r23
   12514:	bc63883a 	add	r17,r23,r17
   12518:	e004927a 	slli	r2,fp,9
   1251c:	d9000117 	ldw	r4,4(sp)
   12520:	882e927a 	slli	r23,r17,9
   12524:	9022d5fa 	srli	r17,r18,23
   12528:	e038d5fa 	srli	fp,fp,23
   1252c:	1104b03a 	or	r2,r2,r4
   12530:	9024927a 	slli	r18,r18,9
   12534:	1004c03a 	cmpne	r2,r2,zero
   12538:	bc62b03a 	or	r17,r23,r17
   1253c:	1738b03a 	or	fp,r2,fp
   12540:	8880402c 	andhi	r2,r17,256
   12544:	e4a4b03a 	or	r18,fp,r18
   12548:	10000726 	beq	r2,zero,12568 <__muldf3+0x628>
   1254c:	9006d07a 	srli	r3,r18,1
   12550:	880497fa 	slli	r2,r17,31
   12554:	9480004c 	andi	r18,r18,1
   12558:	8822d07a 	srli	r17,r17,1
   1255c:	1ca4b03a 	or	r18,r3,r18
   12560:	14a4b03a 	or	r18,r2,r18
   12564:	4007883a 	mov	r3,r8
   12568:	1880ffc4 	addi	r2,r3,1023
   1256c:	0080460e 	bge	zero,r2,12688 <__muldf3+0x748>
   12570:	910001cc 	andi	r4,r18,7
   12574:	20000726 	beq	r4,zero,12594 <__muldf3+0x654>
   12578:	910003cc 	andi	r4,r18,15
   1257c:	01400104 	movi	r5,4
   12580:	21400426 	beq	r4,r5,12594 <__muldf3+0x654>
   12584:	9149883a 	add	r4,r18,r5
   12588:	24a5803a 	cmpltu	r18,r4,r18
   1258c:	8ca3883a 	add	r17,r17,r18
   12590:	2025883a 	mov	r18,r4
   12594:	8900402c 	andhi	r4,r17,256
   12598:	20000426 	beq	r4,zero,125ac <__muldf3+0x66c>
   1259c:	18810004 	addi	r2,r3,1024
   125a0:	00ffc034 	movhi	r3,65280
   125a4:	18ffffc4 	addi	r3,r3,-1
   125a8:	88e2703a 	and	r17,r17,r3
   125ac:	00c1ff84 	movi	r3,2046
   125b0:	18bf1316 	blt	r3,r2,12200 <__muldf3+0x2c0>
   125b4:	882c977a 	slli	r22,r17,29
   125b8:	9024d0fa 	srli	r18,r18,3
   125bc:	8822927a 	slli	r17,r17,9
   125c0:	1081ffcc 	andi	r2,r2,2047
   125c4:	b4acb03a 	or	r22,r22,r18
   125c8:	8820d33a 	srli	r16,r17,12
   125cc:	3027883a 	mov	r19,r6
   125d0:	003eba06 	br	120bc <__muldf3+0x17c>
   125d4:	8080022c 	andhi	r2,r16,8
   125d8:	10000926 	beq	r2,zero,12600 <__muldf3+0x6c0>
   125dc:	8880022c 	andhi	r2,r17,8
   125e0:	1000071e 	bne	r2,zero,12600 <__muldf3+0x6c0>
   125e4:	00800434 	movhi	r2,16
   125e8:	8c000234 	orhi	r16,r17,8
   125ec:	10bfffc4 	addi	r2,r2,-1
   125f0:	e027883a 	mov	r19,fp
   125f4:	80a0703a 	and	r16,r16,r2
   125f8:	902d883a 	mov	r22,r18
   125fc:	003f1706 	br	1225c <__muldf3+0x31c>
   12600:	00800434 	movhi	r2,16
   12604:	84000234 	orhi	r16,r16,8
   12608:	10bfffc4 	addi	r2,r2,-1
   1260c:	80a0703a 	and	r16,r16,r2
   12610:	003f1206 	br	1225c <__muldf3+0x31c>
   12614:	147ff604 	addi	r17,r2,-40
   12618:	3462983a 	sll	r17,r6,r17
   1261c:	0025883a 	mov	r18,zero
   12620:	003ef306 	br	121f0 <__muldf3+0x2b0>
   12624:	3009883a 	mov	r4,r6
   12628:	d9400215 	stw	r5,8(sp)
   1262c:	d9800715 	stw	r6,28(sp)
   12630:	da400415 	stw	r9,16(sp)
   12634:	da800315 	stw	r10,12(sp)
   12638:	00132040 	call	13204 <__clzsi2>
   1263c:	10800804 	addi	r2,r2,32
   12640:	da800317 	ldw	r10,12(sp)
   12644:	da400417 	ldw	r9,16(sp)
   12648:	d9800717 	ldw	r6,28(sp)
   1264c:	d9400217 	ldw	r5,8(sp)
   12650:	003edd06 	br	121c8 <__muldf3+0x288>
   12654:	143ff604 	addi	r16,r2,-40
   12658:	ac20983a 	sll	r16,r21,r16
   1265c:	002d883a 	mov	r22,zero
   12660:	003ec106 	br	12168 <__muldf3+0x228>
   12664:	d9800715 	stw	r6,28(sp)
   12668:	d9c00215 	stw	r7,8(sp)
   1266c:	da400415 	stw	r9,16(sp)
   12670:	00132040 	call	13204 <__clzsi2>
   12674:	10800804 	addi	r2,r2,32
   12678:	da400417 	ldw	r9,16(sp)
   1267c:	d9c00217 	ldw	r7,8(sp)
   12680:	d9800717 	ldw	r6,28(sp)
   12684:	003eae06 	br	12140 <__muldf3+0x200>
   12688:	00c00044 	movi	r3,1
   1268c:	1887c83a 	sub	r3,r3,r2
   12690:	01000e04 	movi	r4,56
   12694:	20fe8516 	blt	r4,r3,120ac <__muldf3+0x16c>
   12698:	010007c4 	movi	r4,31
   1269c:	20c01b16 	blt	r4,r3,1270c <__muldf3+0x7cc>
   126a0:	00800804 	movi	r2,32
   126a4:	10c5c83a 	sub	r2,r2,r3
   126a8:	888a983a 	sll	r5,r17,r2
   126ac:	90c8d83a 	srl	r4,r18,r3
   126b0:	9084983a 	sll	r2,r18,r2
   126b4:	88e2d83a 	srl	r17,r17,r3
   126b8:	2906b03a 	or	r3,r5,r4
   126bc:	1004c03a 	cmpne	r2,r2,zero
   126c0:	1886b03a 	or	r3,r3,r2
   126c4:	188001cc 	andi	r2,r3,7
   126c8:	10000726 	beq	r2,zero,126e8 <__muldf3+0x7a8>
   126cc:	188003cc 	andi	r2,r3,15
   126d0:	01000104 	movi	r4,4
   126d4:	11000426 	beq	r2,r4,126e8 <__muldf3+0x7a8>
   126d8:	1805883a 	mov	r2,r3
   126dc:	10c00104 	addi	r3,r2,4
   126e0:	1885803a 	cmpltu	r2,r3,r2
   126e4:	88a3883a 	add	r17,r17,r2
   126e8:	8880202c 	andhi	r2,r17,128
   126ec:	10001c26 	beq	r2,zero,12760 <__muldf3+0x820>
   126f0:	3027883a 	mov	r19,r6
   126f4:	00800044 	movi	r2,1
   126f8:	0021883a 	mov	r16,zero
   126fc:	002d883a 	mov	r22,zero
   12700:	003e6e06 	br	120bc <__muldf3+0x17c>
   12704:	4007883a 	mov	r3,r8
   12708:	003f9706 	br	12568 <__muldf3+0x628>
   1270c:	017ff844 	movi	r5,-31
   12710:	2885c83a 	sub	r2,r5,r2
   12714:	888ad83a 	srl	r5,r17,r2
   12718:	00800804 	movi	r2,32
   1271c:	18801a26 	beq	r3,r2,12788 <__muldf3+0x848>
   12720:	01001004 	movi	r4,64
   12724:	20c7c83a 	sub	r3,r4,r3
   12728:	88e2983a 	sll	r17,r17,r3
   1272c:	8ca4b03a 	or	r18,r17,r18
   12730:	9004c03a 	cmpne	r2,r18,zero
   12734:	2884b03a 	or	r2,r5,r2
   12738:	144001cc 	andi	r17,r2,7
   1273c:	88000d1e 	bne	r17,zero,12774 <__muldf3+0x834>
   12740:	0021883a 	mov	r16,zero
   12744:	102cd0fa 	srli	r22,r2,3
   12748:	3027883a 	mov	r19,r6
   1274c:	0005883a 	mov	r2,zero
   12750:	b46cb03a 	or	r22,r22,r17
   12754:	003e5906 	br	120bc <__muldf3+0x17c>
   12758:	1007883a 	mov	r3,r2
   1275c:	0023883a 	mov	r17,zero
   12760:	8820927a 	slli	r16,r17,9
   12764:	1805883a 	mov	r2,r3
   12768:	8822977a 	slli	r17,r17,29
   1276c:	8020d33a 	srli	r16,r16,12
   12770:	003ff406 	br	12744 <__muldf3+0x804>
   12774:	10c003cc 	andi	r3,r2,15
   12778:	01000104 	movi	r4,4
   1277c:	193ff626 	beq	r3,r4,12758 <__muldf3+0x818>
   12780:	0023883a 	mov	r17,zero
   12784:	003fd506 	br	126dc <__muldf3+0x79c>
   12788:	0023883a 	mov	r17,zero
   1278c:	003fe706 	br	1272c <__muldf3+0x7ec>
   12790:	00800434 	movhi	r2,16
   12794:	8c000234 	orhi	r16,r17,8
   12798:	10bfffc4 	addi	r2,r2,-1
   1279c:	3027883a 	mov	r19,r6
   127a0:	80a0703a 	and	r16,r16,r2
   127a4:	902d883a 	mov	r22,r18
   127a8:	003eac06 	br	1225c <__muldf3+0x31c>

000127ac <__subdf3>:
   127ac:	02000434 	movhi	r8,16
   127b0:	423fffc4 	addi	r8,r8,-1
   127b4:	defffb04 	addi	sp,sp,-20
   127b8:	2a14703a 	and	r10,r5,r8
   127bc:	3812d53a 	srli	r9,r7,20
   127c0:	3a10703a 	and	r8,r7,r8
   127c4:	2006d77a 	srli	r3,r4,29
   127c8:	3004d77a 	srli	r2,r6,29
   127cc:	dc000015 	stw	r16,0(sp)
   127d0:	501490fa 	slli	r10,r10,3
   127d4:	2820d53a 	srli	r16,r5,20
   127d8:	401090fa 	slli	r8,r8,3
   127dc:	dc800215 	stw	r18,8(sp)
   127e0:	dc400115 	stw	r17,4(sp)
   127e4:	dfc00415 	stw	ra,16(sp)
   127e8:	202290fa 	slli	r17,r4,3
   127ec:	dcc00315 	stw	r19,12(sp)
   127f0:	4a41ffcc 	andi	r9,r9,2047
   127f4:	0101ffc4 	movi	r4,2047
   127f8:	2824d7fa 	srli	r18,r5,31
   127fc:	8401ffcc 	andi	r16,r16,2047
   12800:	50c6b03a 	or	r3,r10,r3
   12804:	380ed7fa 	srli	r7,r7,31
   12808:	408ab03a 	or	r5,r8,r2
   1280c:	300c90fa 	slli	r6,r6,3
   12810:	49009626 	beq	r9,r4,12a6c <__subdf3+0x2c0>
   12814:	39c0005c 	xori	r7,r7,1
   12818:	8245c83a 	sub	r2,r16,r9
   1281c:	3c807426 	beq	r7,r18,129f0 <__subdf3+0x244>
   12820:	0080af0e 	bge	zero,r2,12ae0 <__subdf3+0x334>
   12824:	48002a1e 	bne	r9,zero,128d0 <__subdf3+0x124>
   12828:	2988b03a 	or	r4,r5,r6
   1282c:	20009a1e 	bne	r4,zero,12a98 <__subdf3+0x2ec>
   12830:	888001cc 	andi	r2,r17,7
   12834:	10000726 	beq	r2,zero,12854 <__subdf3+0xa8>
   12838:	888003cc 	andi	r2,r17,15
   1283c:	01000104 	movi	r4,4
   12840:	11000426 	beq	r2,r4,12854 <__subdf3+0xa8>
   12844:	890b883a 	add	r5,r17,r4
   12848:	2c63803a 	cmpltu	r17,r5,r17
   1284c:	1c47883a 	add	r3,r3,r17
   12850:	2823883a 	mov	r17,r5
   12854:	1880202c 	andhi	r2,r3,128
   12858:	10005926 	beq	r2,zero,129c0 <__subdf3+0x214>
   1285c:	84000044 	addi	r16,r16,1
   12860:	0081ffc4 	movi	r2,2047
   12864:	8080be26 	beq	r16,r2,12b60 <__subdf3+0x3b4>
   12868:	017fe034 	movhi	r5,65408
   1286c:	297fffc4 	addi	r5,r5,-1
   12870:	1946703a 	and	r3,r3,r5
   12874:	1804977a 	slli	r2,r3,29
   12878:	1806927a 	slli	r3,r3,9
   1287c:	8822d0fa 	srli	r17,r17,3
   12880:	8401ffcc 	andi	r16,r16,2047
   12884:	180ad33a 	srli	r5,r3,12
   12888:	9100004c 	andi	r4,r18,1
   1288c:	1444b03a 	or	r2,r2,r17
   12890:	80c1ffcc 	andi	r3,r16,2047
   12894:	1820953a 	slli	r16,r3,20
   12898:	20c03fcc 	andi	r3,r4,255
   1289c:	180897fa 	slli	r4,r3,31
   128a0:	00c00434 	movhi	r3,16
   128a4:	18ffffc4 	addi	r3,r3,-1
   128a8:	28c6703a 	and	r3,r5,r3
   128ac:	1c06b03a 	or	r3,r3,r16
   128b0:	1906b03a 	or	r3,r3,r4
   128b4:	dfc00417 	ldw	ra,16(sp)
   128b8:	dcc00317 	ldw	r19,12(sp)
   128bc:	dc800217 	ldw	r18,8(sp)
   128c0:	dc400117 	ldw	r17,4(sp)
   128c4:	dc000017 	ldw	r16,0(sp)
   128c8:	dec00504 	addi	sp,sp,20
   128cc:	f800283a 	ret
   128d0:	0101ffc4 	movi	r4,2047
   128d4:	813fd626 	beq	r16,r4,12830 <__subdf3+0x84>
   128d8:	29402034 	orhi	r5,r5,128
   128dc:	01000e04 	movi	r4,56
   128e0:	2080a316 	blt	r4,r2,12b70 <__subdf3+0x3c4>
   128e4:	010007c4 	movi	r4,31
   128e8:	2080c616 	blt	r4,r2,12c04 <__subdf3+0x458>
   128ec:	01000804 	movi	r4,32
   128f0:	2089c83a 	sub	r4,r4,r2
   128f4:	2910983a 	sll	r8,r5,r4
   128f8:	308ed83a 	srl	r7,r6,r2
   128fc:	3108983a 	sll	r4,r6,r4
   12900:	2884d83a 	srl	r2,r5,r2
   12904:	41ccb03a 	or	r6,r8,r7
   12908:	2008c03a 	cmpne	r4,r4,zero
   1290c:	310cb03a 	or	r6,r6,r4
   12910:	898dc83a 	sub	r6,r17,r6
   12914:	89a3803a 	cmpltu	r17,r17,r6
   12918:	1887c83a 	sub	r3,r3,r2
   1291c:	1c47c83a 	sub	r3,r3,r17
   12920:	3023883a 	mov	r17,r6
   12924:	1880202c 	andhi	r2,r3,128
   12928:	10002326 	beq	r2,zero,129b8 <__subdf3+0x20c>
   1292c:	04c02034 	movhi	r19,128
   12930:	9cffffc4 	addi	r19,r19,-1
   12934:	1ce6703a 	and	r19,r3,r19
   12938:	98007a26 	beq	r19,zero,12b24 <__subdf3+0x378>
   1293c:	9809883a 	mov	r4,r19
   12940:	00132040 	call	13204 <__clzsi2>
   12944:	113ffe04 	addi	r4,r2,-8
   12948:	00c007c4 	movi	r3,31
   1294c:	19007b16 	blt	r3,r4,12b3c <__subdf3+0x390>
   12950:	00800804 	movi	r2,32
   12954:	1105c83a 	sub	r2,r2,r4
   12958:	8884d83a 	srl	r2,r17,r2
   1295c:	9906983a 	sll	r3,r19,r4
   12960:	8922983a 	sll	r17,r17,r4
   12964:	10c4b03a 	or	r2,r2,r3
   12968:	24007816 	blt	r4,r16,12b4c <__subdf3+0x3a0>
   1296c:	2421c83a 	sub	r16,r4,r16
   12970:	80c00044 	addi	r3,r16,1
   12974:	010007c4 	movi	r4,31
   12978:	20c09516 	blt	r4,r3,12bd0 <__subdf3+0x424>
   1297c:	01400804 	movi	r5,32
   12980:	28cbc83a 	sub	r5,r5,r3
   12984:	88c8d83a 	srl	r4,r17,r3
   12988:	8962983a 	sll	r17,r17,r5
   1298c:	114a983a 	sll	r5,r2,r5
   12990:	10c6d83a 	srl	r3,r2,r3
   12994:	8804c03a 	cmpne	r2,r17,zero
   12998:	290ab03a 	or	r5,r5,r4
   1299c:	28a2b03a 	or	r17,r5,r2
   129a0:	0021883a 	mov	r16,zero
   129a4:	003fa206 	br	12830 <__subdf3+0x84>
   129a8:	2090b03a 	or	r8,r4,r2
   129ac:	40018e26 	beq	r8,zero,12fe8 <__subdf3+0x83c>
   129b0:	1007883a 	mov	r3,r2
   129b4:	2023883a 	mov	r17,r4
   129b8:	888001cc 	andi	r2,r17,7
   129bc:	103f9e1e 	bne	r2,zero,12838 <__subdf3+0x8c>
   129c0:	1804977a 	slli	r2,r3,29
   129c4:	8822d0fa 	srli	r17,r17,3
   129c8:	1810d0fa 	srli	r8,r3,3
   129cc:	9100004c 	andi	r4,r18,1
   129d0:	1444b03a 	or	r2,r2,r17
   129d4:	00c1ffc4 	movi	r3,2047
   129d8:	80c02826 	beq	r16,r3,12a7c <__subdf3+0x2d0>
   129dc:	01400434 	movhi	r5,16
   129e0:	297fffc4 	addi	r5,r5,-1
   129e4:	80e0703a 	and	r16,r16,r3
   129e8:	414a703a 	and	r5,r8,r5
   129ec:	003fa806 	br	12890 <__subdf3+0xe4>
   129f0:	0080630e 	bge	zero,r2,12b80 <__subdf3+0x3d4>
   129f4:	48003026 	beq	r9,zero,12ab8 <__subdf3+0x30c>
   129f8:	0101ffc4 	movi	r4,2047
   129fc:	813f8c26 	beq	r16,r4,12830 <__subdf3+0x84>
   12a00:	29402034 	orhi	r5,r5,128
   12a04:	01000e04 	movi	r4,56
   12a08:	2080a90e 	bge	r4,r2,12cb0 <__subdf3+0x504>
   12a0c:	298cb03a 	or	r6,r5,r6
   12a10:	3012c03a 	cmpne	r9,r6,zero
   12a14:	0005883a 	mov	r2,zero
   12a18:	4c53883a 	add	r9,r9,r17
   12a1c:	4c63803a 	cmpltu	r17,r9,r17
   12a20:	10c7883a 	add	r3,r2,r3
   12a24:	88c7883a 	add	r3,r17,r3
   12a28:	4823883a 	mov	r17,r9
   12a2c:	1880202c 	andhi	r2,r3,128
   12a30:	1000d026 	beq	r2,zero,12d74 <__subdf3+0x5c8>
   12a34:	84000044 	addi	r16,r16,1
   12a38:	0081ffc4 	movi	r2,2047
   12a3c:	8080fe26 	beq	r16,r2,12e38 <__subdf3+0x68c>
   12a40:	00bfe034 	movhi	r2,65408
   12a44:	10bfffc4 	addi	r2,r2,-1
   12a48:	1886703a 	and	r3,r3,r2
   12a4c:	880ad07a 	srli	r5,r17,1
   12a50:	180497fa 	slli	r2,r3,31
   12a54:	8900004c 	andi	r4,r17,1
   12a58:	2922b03a 	or	r17,r5,r4
   12a5c:	1806d07a 	srli	r3,r3,1
   12a60:	1462b03a 	or	r17,r2,r17
   12a64:	3825883a 	mov	r18,r7
   12a68:	003f7106 	br	12830 <__subdf3+0x84>
   12a6c:	2984b03a 	or	r2,r5,r6
   12a70:	103f6826 	beq	r2,zero,12814 <__subdf3+0x68>
   12a74:	39c03fcc 	andi	r7,r7,255
   12a78:	003f6706 	br	12818 <__subdf3+0x6c>
   12a7c:	4086b03a 	or	r3,r8,r2
   12a80:	18015226 	beq	r3,zero,12fcc <__subdf3+0x820>
   12a84:	00c00434 	movhi	r3,16
   12a88:	41400234 	orhi	r5,r8,8
   12a8c:	18ffffc4 	addi	r3,r3,-1
   12a90:	28ca703a 	and	r5,r5,r3
   12a94:	003f7e06 	br	12890 <__subdf3+0xe4>
   12a98:	10bfffc4 	addi	r2,r2,-1
   12a9c:	1000491e 	bne	r2,zero,12bc4 <__subdf3+0x418>
   12aa0:	898fc83a 	sub	r7,r17,r6
   12aa4:	89e3803a 	cmpltu	r17,r17,r7
   12aa8:	1947c83a 	sub	r3,r3,r5
   12aac:	1c47c83a 	sub	r3,r3,r17
   12ab0:	3823883a 	mov	r17,r7
   12ab4:	003f9b06 	br	12924 <__subdf3+0x178>
   12ab8:	2988b03a 	or	r4,r5,r6
   12abc:	203f5c26 	beq	r4,zero,12830 <__subdf3+0x84>
   12ac0:	10bfffc4 	addi	r2,r2,-1
   12ac4:	1000931e 	bne	r2,zero,12d14 <__subdf3+0x568>
   12ac8:	898d883a 	add	r6,r17,r6
   12acc:	3463803a 	cmpltu	r17,r6,r17
   12ad0:	1947883a 	add	r3,r3,r5
   12ad4:	88c7883a 	add	r3,r17,r3
   12ad8:	3023883a 	mov	r17,r6
   12adc:	003fd306 	br	12a2c <__subdf3+0x280>
   12ae0:	1000541e 	bne	r2,zero,12c34 <__subdf3+0x488>
   12ae4:	80800044 	addi	r2,r16,1
   12ae8:	1081ffcc 	andi	r2,r2,2047
   12aec:	01000044 	movi	r4,1
   12af0:	2080a20e 	bge	r4,r2,12d7c <__subdf3+0x5d0>
   12af4:	8989c83a 	sub	r4,r17,r6
   12af8:	8905803a 	cmpltu	r2,r17,r4
   12afc:	1967c83a 	sub	r19,r3,r5
   12b00:	98a7c83a 	sub	r19,r19,r2
   12b04:	9880202c 	andhi	r2,r19,128
   12b08:	10006326 	beq	r2,zero,12c98 <__subdf3+0x4ec>
   12b0c:	3463c83a 	sub	r17,r6,r17
   12b10:	28c7c83a 	sub	r3,r5,r3
   12b14:	344d803a 	cmpltu	r6,r6,r17
   12b18:	19a7c83a 	sub	r19,r3,r6
   12b1c:	3825883a 	mov	r18,r7
   12b20:	983f861e 	bne	r19,zero,1293c <__subdf3+0x190>
   12b24:	8809883a 	mov	r4,r17
   12b28:	00132040 	call	13204 <__clzsi2>
   12b2c:	10800804 	addi	r2,r2,32
   12b30:	113ffe04 	addi	r4,r2,-8
   12b34:	00c007c4 	movi	r3,31
   12b38:	193f850e 	bge	r3,r4,12950 <__subdf3+0x1a4>
   12b3c:	10bff604 	addi	r2,r2,-40
   12b40:	8884983a 	sll	r2,r17,r2
   12b44:	0023883a 	mov	r17,zero
   12b48:	243f880e 	bge	r4,r16,1296c <__subdf3+0x1c0>
   12b4c:	00ffe034 	movhi	r3,65408
   12b50:	18ffffc4 	addi	r3,r3,-1
   12b54:	8121c83a 	sub	r16,r16,r4
   12b58:	10c6703a 	and	r3,r2,r3
   12b5c:	003f3406 	br	12830 <__subdf3+0x84>
   12b60:	9100004c 	andi	r4,r18,1
   12b64:	000b883a 	mov	r5,zero
   12b68:	0005883a 	mov	r2,zero
   12b6c:	003f4806 	br	12890 <__subdf3+0xe4>
   12b70:	298cb03a 	or	r6,r5,r6
   12b74:	300cc03a 	cmpne	r6,r6,zero
   12b78:	0005883a 	mov	r2,zero
   12b7c:	003f6406 	br	12910 <__subdf3+0x164>
   12b80:	10009a1e 	bne	r2,zero,12dec <__subdf3+0x640>
   12b84:	82400044 	addi	r9,r16,1
   12b88:	4881ffcc 	andi	r2,r9,2047
   12b8c:	02800044 	movi	r10,1
   12b90:	5080670e 	bge	r10,r2,12d30 <__subdf3+0x584>
   12b94:	0081ffc4 	movi	r2,2047
   12b98:	4880af26 	beq	r9,r2,12e58 <__subdf3+0x6ac>
   12b9c:	898d883a 	add	r6,r17,r6
   12ba0:	1945883a 	add	r2,r3,r5
   12ba4:	3447803a 	cmpltu	r3,r6,r17
   12ba8:	1887883a 	add	r3,r3,r2
   12bac:	182297fa 	slli	r17,r3,31
   12bb0:	300cd07a 	srli	r6,r6,1
   12bb4:	1806d07a 	srli	r3,r3,1
   12bb8:	4821883a 	mov	r16,r9
   12bbc:	89a2b03a 	or	r17,r17,r6
   12bc0:	003f1b06 	br	12830 <__subdf3+0x84>
   12bc4:	0101ffc4 	movi	r4,2047
   12bc8:	813f441e 	bne	r16,r4,128dc <__subdf3+0x130>
   12bcc:	003f1806 	br	12830 <__subdf3+0x84>
   12bd0:	843ff844 	addi	r16,r16,-31
   12bd4:	01400804 	movi	r5,32
   12bd8:	1408d83a 	srl	r4,r2,r16
   12bdc:	19405026 	beq	r3,r5,12d20 <__subdf3+0x574>
   12be0:	01401004 	movi	r5,64
   12be4:	28c7c83a 	sub	r3,r5,r3
   12be8:	10c4983a 	sll	r2,r2,r3
   12bec:	88a2b03a 	or	r17,r17,r2
   12bf0:	8822c03a 	cmpne	r17,r17,zero
   12bf4:	2462b03a 	or	r17,r4,r17
   12bf8:	0007883a 	mov	r3,zero
   12bfc:	0021883a 	mov	r16,zero
   12c00:	003f6d06 	br	129b8 <__subdf3+0x20c>
   12c04:	11fff804 	addi	r7,r2,-32
   12c08:	01000804 	movi	r4,32
   12c0c:	29ced83a 	srl	r7,r5,r7
   12c10:	11004526 	beq	r2,r4,12d28 <__subdf3+0x57c>
   12c14:	01001004 	movi	r4,64
   12c18:	2089c83a 	sub	r4,r4,r2
   12c1c:	2904983a 	sll	r2,r5,r4
   12c20:	118cb03a 	or	r6,r2,r6
   12c24:	300cc03a 	cmpne	r6,r6,zero
   12c28:	398cb03a 	or	r6,r7,r6
   12c2c:	0005883a 	mov	r2,zero
   12c30:	003f3706 	br	12910 <__subdf3+0x164>
   12c34:	80002a26 	beq	r16,zero,12ce0 <__subdf3+0x534>
   12c38:	0101ffc4 	movi	r4,2047
   12c3c:	49006626 	beq	r9,r4,12dd8 <__subdf3+0x62c>
   12c40:	0085c83a 	sub	r2,zero,r2
   12c44:	18c02034 	orhi	r3,r3,128
   12c48:	01000e04 	movi	r4,56
   12c4c:	20807e16 	blt	r4,r2,12e48 <__subdf3+0x69c>
   12c50:	010007c4 	movi	r4,31
   12c54:	2080e716 	blt	r4,r2,12ff4 <__subdf3+0x848>
   12c58:	01000804 	movi	r4,32
   12c5c:	2089c83a 	sub	r4,r4,r2
   12c60:	1914983a 	sll	r10,r3,r4
   12c64:	8890d83a 	srl	r8,r17,r2
   12c68:	8908983a 	sll	r4,r17,r4
   12c6c:	1884d83a 	srl	r2,r3,r2
   12c70:	5222b03a 	or	r17,r10,r8
   12c74:	2006c03a 	cmpne	r3,r4,zero
   12c78:	88e2b03a 	or	r17,r17,r3
   12c7c:	3463c83a 	sub	r17,r6,r17
   12c80:	2885c83a 	sub	r2,r5,r2
   12c84:	344d803a 	cmpltu	r6,r6,r17
   12c88:	1187c83a 	sub	r3,r2,r6
   12c8c:	4821883a 	mov	r16,r9
   12c90:	3825883a 	mov	r18,r7
   12c94:	003f2306 	br	12924 <__subdf3+0x178>
   12c98:	24d0b03a 	or	r8,r4,r19
   12c9c:	40001b1e 	bne	r8,zero,12d0c <__subdf3+0x560>
   12ca0:	0005883a 	mov	r2,zero
   12ca4:	0009883a 	mov	r4,zero
   12ca8:	0021883a 	mov	r16,zero
   12cac:	003f4906 	br	129d4 <__subdf3+0x228>
   12cb0:	010007c4 	movi	r4,31
   12cb4:	20803a16 	blt	r4,r2,12da0 <__subdf3+0x5f4>
   12cb8:	01000804 	movi	r4,32
   12cbc:	2089c83a 	sub	r4,r4,r2
   12cc0:	2912983a 	sll	r9,r5,r4
   12cc4:	3090d83a 	srl	r8,r6,r2
   12cc8:	3108983a 	sll	r4,r6,r4
   12ccc:	2884d83a 	srl	r2,r5,r2
   12cd0:	4a12b03a 	or	r9,r9,r8
   12cd4:	2008c03a 	cmpne	r4,r4,zero
   12cd8:	4912b03a 	or	r9,r9,r4
   12cdc:	003f4e06 	br	12a18 <__subdf3+0x26c>
   12ce0:	1c48b03a 	or	r4,r3,r17
   12ce4:	20003c26 	beq	r4,zero,12dd8 <__subdf3+0x62c>
   12ce8:	0084303a 	nor	r2,zero,r2
   12cec:	1000381e 	bne	r2,zero,12dd0 <__subdf3+0x624>
   12cf0:	3463c83a 	sub	r17,r6,r17
   12cf4:	28c5c83a 	sub	r2,r5,r3
   12cf8:	344d803a 	cmpltu	r6,r6,r17
   12cfc:	1187c83a 	sub	r3,r2,r6
   12d00:	4821883a 	mov	r16,r9
   12d04:	3825883a 	mov	r18,r7
   12d08:	003f0606 	br	12924 <__subdf3+0x178>
   12d0c:	2023883a 	mov	r17,r4
   12d10:	003f0906 	br	12938 <__subdf3+0x18c>
   12d14:	0101ffc4 	movi	r4,2047
   12d18:	813f3a1e 	bne	r16,r4,12a04 <__subdf3+0x258>
   12d1c:	003ec406 	br	12830 <__subdf3+0x84>
   12d20:	0005883a 	mov	r2,zero
   12d24:	003fb106 	br	12bec <__subdf3+0x440>
   12d28:	0005883a 	mov	r2,zero
   12d2c:	003fbc06 	br	12c20 <__subdf3+0x474>
   12d30:	1c44b03a 	or	r2,r3,r17
   12d34:	80008e1e 	bne	r16,zero,12f70 <__subdf3+0x7c4>
   12d38:	1000c826 	beq	r2,zero,1305c <__subdf3+0x8b0>
   12d3c:	2984b03a 	or	r2,r5,r6
   12d40:	103ebb26 	beq	r2,zero,12830 <__subdf3+0x84>
   12d44:	8989883a 	add	r4,r17,r6
   12d48:	1945883a 	add	r2,r3,r5
   12d4c:	2447803a 	cmpltu	r3,r4,r17
   12d50:	1887883a 	add	r3,r3,r2
   12d54:	1880202c 	andhi	r2,r3,128
   12d58:	2023883a 	mov	r17,r4
   12d5c:	103f1626 	beq	r2,zero,129b8 <__subdf3+0x20c>
   12d60:	00bfe034 	movhi	r2,65408
   12d64:	10bfffc4 	addi	r2,r2,-1
   12d68:	5021883a 	mov	r16,r10
   12d6c:	1886703a 	and	r3,r3,r2
   12d70:	003eaf06 	br	12830 <__subdf3+0x84>
   12d74:	3825883a 	mov	r18,r7
   12d78:	003f0f06 	br	129b8 <__subdf3+0x20c>
   12d7c:	1c44b03a 	or	r2,r3,r17
   12d80:	8000251e 	bne	r16,zero,12e18 <__subdf3+0x66c>
   12d84:	1000661e 	bne	r2,zero,12f20 <__subdf3+0x774>
   12d88:	2990b03a 	or	r8,r5,r6
   12d8c:	40009626 	beq	r8,zero,12fe8 <__subdf3+0x83c>
   12d90:	2807883a 	mov	r3,r5
   12d94:	3023883a 	mov	r17,r6
   12d98:	3825883a 	mov	r18,r7
   12d9c:	003ea406 	br	12830 <__subdf3+0x84>
   12da0:	127ff804 	addi	r9,r2,-32
   12da4:	01000804 	movi	r4,32
   12da8:	2a52d83a 	srl	r9,r5,r9
   12dac:	11008c26 	beq	r2,r4,12fe0 <__subdf3+0x834>
   12db0:	01001004 	movi	r4,64
   12db4:	2085c83a 	sub	r2,r4,r2
   12db8:	2884983a 	sll	r2,r5,r2
   12dbc:	118cb03a 	or	r6,r2,r6
   12dc0:	300cc03a 	cmpne	r6,r6,zero
   12dc4:	4992b03a 	or	r9,r9,r6
   12dc8:	0005883a 	mov	r2,zero
   12dcc:	003f1206 	br	12a18 <__subdf3+0x26c>
   12dd0:	0101ffc4 	movi	r4,2047
   12dd4:	493f9c1e 	bne	r9,r4,12c48 <__subdf3+0x49c>
   12dd8:	2807883a 	mov	r3,r5
   12ddc:	3023883a 	mov	r17,r6
   12de0:	4821883a 	mov	r16,r9
   12de4:	3825883a 	mov	r18,r7
   12de8:	003e9106 	br	12830 <__subdf3+0x84>
   12dec:	80001f1e 	bne	r16,zero,12e6c <__subdf3+0x6c0>
   12df0:	1c48b03a 	or	r4,r3,r17
   12df4:	20005a26 	beq	r4,zero,12f60 <__subdf3+0x7b4>
   12df8:	0084303a 	nor	r2,zero,r2
   12dfc:	1000561e 	bne	r2,zero,12f58 <__subdf3+0x7ac>
   12e00:	89a3883a 	add	r17,r17,r6
   12e04:	1945883a 	add	r2,r3,r5
   12e08:	898d803a 	cmpltu	r6,r17,r6
   12e0c:	3087883a 	add	r3,r6,r2
   12e10:	4821883a 	mov	r16,r9
   12e14:	003f0506 	br	12a2c <__subdf3+0x280>
   12e18:	10002b1e 	bne	r2,zero,12ec8 <__subdf3+0x71c>
   12e1c:	2984b03a 	or	r2,r5,r6
   12e20:	10008026 	beq	r2,zero,13024 <__subdf3+0x878>
   12e24:	2807883a 	mov	r3,r5
   12e28:	3023883a 	mov	r17,r6
   12e2c:	3825883a 	mov	r18,r7
   12e30:	0401ffc4 	movi	r16,2047
   12e34:	003e7e06 	br	12830 <__subdf3+0x84>
   12e38:	3809883a 	mov	r4,r7
   12e3c:	0011883a 	mov	r8,zero
   12e40:	0005883a 	mov	r2,zero
   12e44:	003ee306 	br	129d4 <__subdf3+0x228>
   12e48:	1c62b03a 	or	r17,r3,r17
   12e4c:	8822c03a 	cmpne	r17,r17,zero
   12e50:	0005883a 	mov	r2,zero
   12e54:	003f8906 	br	12c7c <__subdf3+0x4d0>
   12e58:	3809883a 	mov	r4,r7
   12e5c:	4821883a 	mov	r16,r9
   12e60:	0011883a 	mov	r8,zero
   12e64:	0005883a 	mov	r2,zero
   12e68:	003eda06 	br	129d4 <__subdf3+0x228>
   12e6c:	0101ffc4 	movi	r4,2047
   12e70:	49003b26 	beq	r9,r4,12f60 <__subdf3+0x7b4>
   12e74:	0085c83a 	sub	r2,zero,r2
   12e78:	18c02034 	orhi	r3,r3,128
   12e7c:	01000e04 	movi	r4,56
   12e80:	20806e16 	blt	r4,r2,1303c <__subdf3+0x890>
   12e84:	010007c4 	movi	r4,31
   12e88:	20807716 	blt	r4,r2,13068 <__subdf3+0x8bc>
   12e8c:	01000804 	movi	r4,32
   12e90:	2089c83a 	sub	r4,r4,r2
   12e94:	1914983a 	sll	r10,r3,r4
   12e98:	8890d83a 	srl	r8,r17,r2
   12e9c:	8908983a 	sll	r4,r17,r4
   12ea0:	1884d83a 	srl	r2,r3,r2
   12ea4:	5222b03a 	or	r17,r10,r8
   12ea8:	2006c03a 	cmpne	r3,r4,zero
   12eac:	88e2b03a 	or	r17,r17,r3
   12eb0:	89a3883a 	add	r17,r17,r6
   12eb4:	1145883a 	add	r2,r2,r5
   12eb8:	898d803a 	cmpltu	r6,r17,r6
   12ebc:	3087883a 	add	r3,r6,r2
   12ec0:	4821883a 	mov	r16,r9
   12ec4:	003ed906 	br	12a2c <__subdf3+0x280>
   12ec8:	2984b03a 	or	r2,r5,r6
   12ecc:	10004226 	beq	r2,zero,12fd8 <__subdf3+0x82c>
   12ed0:	1808d0fa 	srli	r4,r3,3
   12ed4:	8822d0fa 	srli	r17,r17,3
   12ed8:	1806977a 	slli	r3,r3,29
   12edc:	2080022c 	andhi	r2,r4,8
   12ee0:	1c62b03a 	or	r17,r3,r17
   12ee4:	10000826 	beq	r2,zero,12f08 <__subdf3+0x75c>
   12ee8:	2812d0fa 	srli	r9,r5,3
   12eec:	4880022c 	andhi	r2,r9,8
   12ef0:	1000051e 	bne	r2,zero,12f08 <__subdf3+0x75c>
   12ef4:	300cd0fa 	srli	r6,r6,3
   12ef8:	2804977a 	slli	r2,r5,29
   12efc:	4809883a 	mov	r4,r9
   12f00:	3825883a 	mov	r18,r7
   12f04:	11a2b03a 	or	r17,r2,r6
   12f08:	8806d77a 	srli	r3,r17,29
   12f0c:	200890fa 	slli	r4,r4,3
   12f10:	882290fa 	slli	r17,r17,3
   12f14:	0401ffc4 	movi	r16,2047
   12f18:	1906b03a 	or	r3,r3,r4
   12f1c:	003e4406 	br	12830 <__subdf3+0x84>
   12f20:	2984b03a 	or	r2,r5,r6
   12f24:	103e4226 	beq	r2,zero,12830 <__subdf3+0x84>
   12f28:	8989c83a 	sub	r4,r17,r6
   12f2c:	8911803a 	cmpltu	r8,r17,r4
   12f30:	1945c83a 	sub	r2,r3,r5
   12f34:	1205c83a 	sub	r2,r2,r8
   12f38:	1200202c 	andhi	r8,r2,128
   12f3c:	403e9a26 	beq	r8,zero,129a8 <__subdf3+0x1fc>
   12f40:	3463c83a 	sub	r17,r6,r17
   12f44:	28c5c83a 	sub	r2,r5,r3
   12f48:	344d803a 	cmpltu	r6,r6,r17
   12f4c:	1187c83a 	sub	r3,r2,r6
   12f50:	3825883a 	mov	r18,r7
   12f54:	003e3606 	br	12830 <__subdf3+0x84>
   12f58:	0101ffc4 	movi	r4,2047
   12f5c:	493fc71e 	bne	r9,r4,12e7c <__subdf3+0x6d0>
   12f60:	2807883a 	mov	r3,r5
   12f64:	3023883a 	mov	r17,r6
   12f68:	4821883a 	mov	r16,r9
   12f6c:	003e3006 	br	12830 <__subdf3+0x84>
   12f70:	10003626 	beq	r2,zero,1304c <__subdf3+0x8a0>
   12f74:	2984b03a 	or	r2,r5,r6
   12f78:	10001726 	beq	r2,zero,12fd8 <__subdf3+0x82c>
   12f7c:	1808d0fa 	srli	r4,r3,3
   12f80:	8822d0fa 	srli	r17,r17,3
   12f84:	1806977a 	slli	r3,r3,29
   12f88:	2080022c 	andhi	r2,r4,8
   12f8c:	1c62b03a 	or	r17,r3,r17
   12f90:	10000726 	beq	r2,zero,12fb0 <__subdf3+0x804>
   12f94:	2812d0fa 	srli	r9,r5,3
   12f98:	4880022c 	andhi	r2,r9,8
   12f9c:	1000041e 	bne	r2,zero,12fb0 <__subdf3+0x804>
   12fa0:	300cd0fa 	srli	r6,r6,3
   12fa4:	2804977a 	slli	r2,r5,29
   12fa8:	4809883a 	mov	r4,r9
   12fac:	11a2b03a 	or	r17,r2,r6
   12fb0:	8806d77a 	srli	r3,r17,29
   12fb4:	200890fa 	slli	r4,r4,3
   12fb8:	882290fa 	slli	r17,r17,3
   12fbc:	3825883a 	mov	r18,r7
   12fc0:	1906b03a 	or	r3,r3,r4
   12fc4:	0401ffc4 	movi	r16,2047
   12fc8:	003e1906 	br	12830 <__subdf3+0x84>
   12fcc:	000b883a 	mov	r5,zero
   12fd0:	0005883a 	mov	r2,zero
   12fd4:	003e2e06 	br	12890 <__subdf3+0xe4>
   12fd8:	0401ffc4 	movi	r16,2047
   12fdc:	003e1406 	br	12830 <__subdf3+0x84>
   12fe0:	0005883a 	mov	r2,zero
   12fe4:	003f7506 	br	12dbc <__subdf3+0x610>
   12fe8:	0005883a 	mov	r2,zero
   12fec:	0009883a 	mov	r4,zero
   12ff0:	003e7806 	br	129d4 <__subdf3+0x228>
   12ff4:	123ff804 	addi	r8,r2,-32
   12ff8:	01000804 	movi	r4,32
   12ffc:	1a10d83a 	srl	r8,r3,r8
   13000:	11002526 	beq	r2,r4,13098 <__subdf3+0x8ec>
   13004:	01001004 	movi	r4,64
   13008:	2085c83a 	sub	r2,r4,r2
   1300c:	1884983a 	sll	r2,r3,r2
   13010:	1444b03a 	or	r2,r2,r17
   13014:	1004c03a 	cmpne	r2,r2,zero
   13018:	40a2b03a 	or	r17,r8,r2
   1301c:	0005883a 	mov	r2,zero
   13020:	003f1606 	br	12c7c <__subdf3+0x4d0>
   13024:	02000434 	movhi	r8,16
   13028:	0009883a 	mov	r4,zero
   1302c:	423fffc4 	addi	r8,r8,-1
   13030:	00bfffc4 	movi	r2,-1
   13034:	0401ffc4 	movi	r16,2047
   13038:	003e6606 	br	129d4 <__subdf3+0x228>
   1303c:	1c62b03a 	or	r17,r3,r17
   13040:	8822c03a 	cmpne	r17,r17,zero
   13044:	0005883a 	mov	r2,zero
   13048:	003f9906 	br	12eb0 <__subdf3+0x704>
   1304c:	2807883a 	mov	r3,r5
   13050:	3023883a 	mov	r17,r6
   13054:	0401ffc4 	movi	r16,2047
   13058:	003df506 	br	12830 <__subdf3+0x84>
   1305c:	2807883a 	mov	r3,r5
   13060:	3023883a 	mov	r17,r6
   13064:	003df206 	br	12830 <__subdf3+0x84>
   13068:	123ff804 	addi	r8,r2,-32
   1306c:	01000804 	movi	r4,32
   13070:	1a10d83a 	srl	r8,r3,r8
   13074:	11000a26 	beq	r2,r4,130a0 <__subdf3+0x8f4>
   13078:	01001004 	movi	r4,64
   1307c:	2085c83a 	sub	r2,r4,r2
   13080:	1884983a 	sll	r2,r3,r2
   13084:	1444b03a 	or	r2,r2,r17
   13088:	1004c03a 	cmpne	r2,r2,zero
   1308c:	40a2b03a 	or	r17,r8,r2
   13090:	0005883a 	mov	r2,zero
   13094:	003f8606 	br	12eb0 <__subdf3+0x704>
   13098:	0005883a 	mov	r2,zero
   1309c:	003fdc06 	br	13010 <__subdf3+0x864>
   130a0:	0005883a 	mov	r2,zero
   130a4:	003ff706 	br	13084 <__subdf3+0x8d8>

000130a8 <__fixdfsi>:
   130a8:	280cd53a 	srli	r6,r5,20
   130ac:	00c00434 	movhi	r3,16
   130b0:	18ffffc4 	addi	r3,r3,-1
   130b4:	3181ffcc 	andi	r6,r6,2047
   130b8:	01c0ff84 	movi	r7,1022
   130bc:	28c6703a 	and	r3,r5,r3
   130c0:	280ad7fa 	srli	r5,r5,31
   130c4:	3980120e 	bge	r7,r6,13110 <__fixdfsi+0x68>
   130c8:	00810744 	movi	r2,1053
   130cc:	11800c16 	blt	r2,r6,13100 <__fixdfsi+0x58>
   130d0:	00810cc4 	movi	r2,1075
   130d4:	1185c83a 	sub	r2,r2,r6
   130d8:	01c007c4 	movi	r7,31
   130dc:	18c00434 	orhi	r3,r3,16
   130e0:	38800d16 	blt	r7,r2,13118 <__fixdfsi+0x70>
   130e4:	31befb44 	addi	r6,r6,-1043
   130e8:	2084d83a 	srl	r2,r4,r2
   130ec:	1986983a 	sll	r3,r3,r6
   130f0:	1884b03a 	or	r2,r3,r2
   130f4:	28000726 	beq	r5,zero,13114 <__fixdfsi+0x6c>
   130f8:	0085c83a 	sub	r2,zero,r2
   130fc:	f800283a 	ret
   13100:	00a00034 	movhi	r2,32768
   13104:	10bfffc4 	addi	r2,r2,-1
   13108:	2885883a 	add	r2,r5,r2
   1310c:	f800283a 	ret
   13110:	0005883a 	mov	r2,zero
   13114:	f800283a 	ret
   13118:	008104c4 	movi	r2,1043
   1311c:	1185c83a 	sub	r2,r2,r6
   13120:	1884d83a 	srl	r2,r3,r2
   13124:	003ff306 	br	130f4 <__fixdfsi+0x4c>

00013128 <__floatsidf>:
   13128:	defffd04 	addi	sp,sp,-12
   1312c:	dfc00215 	stw	ra,8(sp)
   13130:	dc400115 	stw	r17,4(sp)
   13134:	dc000015 	stw	r16,0(sp)
   13138:	20002b26 	beq	r4,zero,131e8 <__floatsidf+0xc0>
   1313c:	2023883a 	mov	r17,r4
   13140:	2020d7fa 	srli	r16,r4,31
   13144:	20002d16 	blt	r4,zero,131fc <__floatsidf+0xd4>
   13148:	8809883a 	mov	r4,r17
   1314c:	00132040 	call	13204 <__clzsi2>
   13150:	01410784 	movi	r5,1054
   13154:	288bc83a 	sub	r5,r5,r2
   13158:	01010cc4 	movi	r4,1075
   1315c:	2149c83a 	sub	r4,r4,r5
   13160:	00c007c4 	movi	r3,31
   13164:	1900160e 	bge	r3,r4,131c0 <__floatsidf+0x98>
   13168:	00c104c4 	movi	r3,1043
   1316c:	1947c83a 	sub	r3,r3,r5
   13170:	88c6983a 	sll	r3,r17,r3
   13174:	00800434 	movhi	r2,16
   13178:	10bfffc4 	addi	r2,r2,-1
   1317c:	1886703a 	and	r3,r3,r2
   13180:	2941ffcc 	andi	r5,r5,2047
   13184:	800d883a 	mov	r6,r16
   13188:	0005883a 	mov	r2,zero
   1318c:	280a953a 	slli	r5,r5,20
   13190:	31803fcc 	andi	r6,r6,255
   13194:	01000434 	movhi	r4,16
   13198:	300c97fa 	slli	r6,r6,31
   1319c:	213fffc4 	addi	r4,r4,-1
   131a0:	1906703a 	and	r3,r3,r4
   131a4:	1946b03a 	or	r3,r3,r5
   131a8:	1986b03a 	or	r3,r3,r6
   131ac:	dfc00217 	ldw	ra,8(sp)
   131b0:	dc400117 	ldw	r17,4(sp)
   131b4:	dc000017 	ldw	r16,0(sp)
   131b8:	dec00304 	addi	sp,sp,12
   131bc:	f800283a 	ret
   131c0:	00c002c4 	movi	r3,11
   131c4:	1887c83a 	sub	r3,r3,r2
   131c8:	88c6d83a 	srl	r3,r17,r3
   131cc:	8904983a 	sll	r2,r17,r4
   131d0:	01000434 	movhi	r4,16
   131d4:	213fffc4 	addi	r4,r4,-1
   131d8:	2941ffcc 	andi	r5,r5,2047
   131dc:	1906703a 	and	r3,r3,r4
   131e0:	800d883a 	mov	r6,r16
   131e4:	003fe906 	br	1318c <__floatsidf+0x64>
   131e8:	000d883a 	mov	r6,zero
   131ec:	000b883a 	mov	r5,zero
   131f0:	0007883a 	mov	r3,zero
   131f4:	0005883a 	mov	r2,zero
   131f8:	003fe406 	br	1318c <__floatsidf+0x64>
   131fc:	0123c83a 	sub	r17,zero,r4
   13200:	003fd106 	br	13148 <__floatsidf+0x20>

00013204 <__clzsi2>:
   13204:	00bfffd4 	movui	r2,65535
   13208:	11000536 	bltu	r2,r4,13220 <__clzsi2+0x1c>
   1320c:	00803fc4 	movi	r2,255
   13210:	11000f36 	bltu	r2,r4,13250 <__clzsi2+0x4c>
   13214:	00800804 	movi	r2,32
   13218:	0007883a 	mov	r3,zero
   1321c:	00000506 	br	13234 <__clzsi2+0x30>
   13220:	00804034 	movhi	r2,256
   13224:	10bfffc4 	addi	r2,r2,-1
   13228:	11000c2e 	bgeu	r2,r4,1325c <__clzsi2+0x58>
   1322c:	00800204 	movi	r2,8
   13230:	00c00604 	movi	r3,24
   13234:	20c8d83a 	srl	r4,r4,r3
   13238:	00c00074 	movhi	r3,1
   1323c:	18d12c44 	addi	r3,r3,17585
   13240:	1909883a 	add	r4,r3,r4
   13244:	20c00003 	ldbu	r3,0(r4)
   13248:	10c5c83a 	sub	r2,r2,r3
   1324c:	f800283a 	ret
   13250:	00800604 	movi	r2,24
   13254:	00c00204 	movi	r3,8
   13258:	003ff606 	br	13234 <__clzsi2+0x30>
   1325c:	00800404 	movi	r2,16
   13260:	1007883a 	mov	r3,r2
   13264:	003ff306 	br	13234 <__clzsi2+0x30>

00013268 <__errno>:
   13268:	00800074 	movhi	r2,1
   1326c:	1091cb04 	addi	r2,r2,18220
   13270:	10800017 	ldw	r2,0(r2)
   13274:	f800283a 	ret

00013278 <memcpy>:
   13278:	2005883a 	mov	r2,r4
   1327c:	2007883a 	mov	r3,r4
   13280:	218d883a 	add	r6,r4,r6
   13284:	19800526 	beq	r3,r6,1329c <memcpy+0x24>
   13288:	29000003 	ldbu	r4,0(r5)
   1328c:	18c00044 	addi	r3,r3,1
   13290:	29400044 	addi	r5,r5,1
   13294:	193fffc5 	stb	r4,-1(r3)
   13298:	003ffa06 	br	13284 <memcpy+0xc>
   1329c:	f800283a 	ret

000132a0 <_printf_r>:
   132a0:	defffd04 	addi	sp,sp,-12
   132a4:	dfc00015 	stw	ra,0(sp)
   132a8:	d9800115 	stw	r6,4(sp)
   132ac:	d9c00215 	stw	r7,8(sp)
   132b0:	20c00217 	ldw	r3,8(r4)
   132b4:	01800074 	movhi	r6,1
   132b8:	318e3704 	addi	r6,r6,14556
   132bc:	19800115 	stw	r6,4(r3)
   132c0:	280d883a 	mov	r6,r5
   132c4:	21400217 	ldw	r5,8(r4)
   132c8:	d9c00104 	addi	r7,sp,4
   132cc:	00133940 	call	13394 <___vfprintf_internal_r>
   132d0:	dfc00017 	ldw	ra,0(sp)
   132d4:	dec00304 	addi	sp,sp,12
   132d8:	f800283a 	ret

000132dc <printf>:
   132dc:	defffc04 	addi	sp,sp,-16
   132e0:	dfc00015 	stw	ra,0(sp)
   132e4:	d9400115 	stw	r5,4(sp)
   132e8:	d9800215 	stw	r6,8(sp)
   132ec:	d9c00315 	stw	r7,12(sp)
   132f0:	00800074 	movhi	r2,1
   132f4:	1091cb04 	addi	r2,r2,18220
   132f8:	10800017 	ldw	r2,0(r2)
   132fc:	01400074 	movhi	r5,1
   13300:	294e3704 	addi	r5,r5,14556
   13304:	10c00217 	ldw	r3,8(r2)
   13308:	d9800104 	addi	r6,sp,4
   1330c:	19400115 	stw	r5,4(r3)
   13310:	200b883a 	mov	r5,r4
   13314:	11000217 	ldw	r4,8(r2)
   13318:	00138c00 	call	138c0 <__vfprintf_internal>
   1331c:	dfc00017 	ldw	ra,0(sp)
   13320:	dec00404 	addi	sp,sp,16
   13324:	f800283a 	ret

00013328 <print_repeat>:
   13328:	defffb04 	addi	sp,sp,-20
   1332c:	dc800315 	stw	r18,12(sp)
   13330:	dc400215 	stw	r17,8(sp)
   13334:	dc000115 	stw	r16,4(sp)
   13338:	dfc00415 	stw	ra,16(sp)
   1333c:	2025883a 	mov	r18,r4
   13340:	2823883a 	mov	r17,r5
   13344:	d9800005 	stb	r6,0(sp)
   13348:	3821883a 	mov	r16,r7
   1334c:	04000a0e 	bge	zero,r16,13378 <print_repeat+0x50>
   13350:	88800117 	ldw	r2,4(r17)
   13354:	01c00044 	movi	r7,1
   13358:	d80d883a 	mov	r6,sp
   1335c:	880b883a 	mov	r5,r17
   13360:	9009883a 	mov	r4,r18
   13364:	103ee83a 	callr	r2
   13368:	843fffc4 	addi	r16,r16,-1
   1336c:	103ff726 	beq	r2,zero,1334c <print_repeat+0x24>
   13370:	00bfffc4 	movi	r2,-1
   13374:	00000106 	br	1337c <print_repeat+0x54>
   13378:	0005883a 	mov	r2,zero
   1337c:	dfc00417 	ldw	ra,16(sp)
   13380:	dc800317 	ldw	r18,12(sp)
   13384:	dc400217 	ldw	r17,8(sp)
   13388:	dc000117 	ldw	r16,4(sp)
   1338c:	dec00504 	addi	sp,sp,20
   13390:	f800283a 	ret

00013394 <___vfprintf_internal_r>:
   13394:	deffe504 	addi	sp,sp,-108
   13398:	d8c00804 	addi	r3,sp,32
   1339c:	ddc01815 	stw	r23,96(sp)
   133a0:	dd801715 	stw	r22,92(sp)
   133a4:	dd401615 	stw	r21,88(sp)
   133a8:	dd001515 	stw	r20,84(sp)
   133ac:	dcc01415 	stw	r19,80(sp)
   133b0:	dc801315 	stw	r18,76(sp)
   133b4:	dc401215 	stw	r17,72(sp)
   133b8:	dc001115 	stw	r16,68(sp)
   133bc:	dfc01a15 	stw	ra,104(sp)
   133c0:	df001915 	stw	fp,100(sp)
   133c4:	2029883a 	mov	r20,r4
   133c8:	2823883a 	mov	r17,r5
   133cc:	382d883a 	mov	r22,r7
   133d0:	d9800f15 	stw	r6,60(sp)
   133d4:	0021883a 	mov	r16,zero
   133d8:	d8000e15 	stw	zero,56(sp)
   133dc:	d8000a15 	stw	zero,40(sp)
   133e0:	002b883a 	mov	r21,zero
   133e4:	0027883a 	mov	r19,zero
   133e8:	0025883a 	mov	r18,zero
   133ec:	d8000c15 	stw	zero,48(sp)
   133f0:	d8000b15 	stw	zero,44(sp)
   133f4:	002f883a 	mov	r23,zero
   133f8:	d8c00915 	stw	r3,36(sp)
   133fc:	d8c00f17 	ldw	r3,60(sp)
   13400:	19000003 	ldbu	r4,0(r3)
   13404:	20803fcc 	andi	r2,r4,255
   13408:	1080201c 	xori	r2,r2,128
   1340c:	10bfe004 	addi	r2,r2,-128
   13410:	10011e26 	beq	r2,zero,1388c <___vfprintf_internal_r+0x4f8>
   13414:	00c00044 	movi	r3,1
   13418:	b8c01426 	beq	r23,r3,1346c <___vfprintf_internal_r+0xd8>
   1341c:	1dc00216 	blt	r3,r23,13428 <___vfprintf_internal_r+0x94>
   13420:	b8000626 	beq	r23,zero,1343c <___vfprintf_internal_r+0xa8>
   13424:	00011506 	br	1387c <___vfprintf_internal_r+0x4e8>
   13428:	01400084 	movi	r5,2
   1342c:	b9401d26 	beq	r23,r5,134a4 <___vfprintf_internal_r+0x110>
   13430:	014000c4 	movi	r5,3
   13434:	b9402b26 	beq	r23,r5,134e4 <___vfprintf_internal_r+0x150>
   13438:	00011006 	br	1387c <___vfprintf_internal_r+0x4e8>
   1343c:	01400944 	movi	r5,37
   13440:	1140fc26 	beq	r2,r5,13834 <___vfprintf_internal_r+0x4a0>
   13444:	88800117 	ldw	r2,4(r17)
   13448:	d9000005 	stb	r4,0(sp)
   1344c:	01c00044 	movi	r7,1
   13450:	d80d883a 	mov	r6,sp
   13454:	880b883a 	mov	r5,r17
   13458:	a009883a 	mov	r4,r20
   1345c:	103ee83a 	callr	r2
   13460:	1000d81e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   13464:	84000044 	addi	r16,r16,1
   13468:	00010406 	br	1387c <___vfprintf_internal_r+0x4e8>
   1346c:	01400c04 	movi	r5,48
   13470:	1140fa26 	beq	r2,r5,1385c <___vfprintf_internal_r+0x4c8>
   13474:	01400944 	movi	r5,37
   13478:	11400a1e 	bne	r2,r5,134a4 <___vfprintf_internal_r+0x110>
   1347c:	d8800005 	stb	r2,0(sp)
   13480:	88800117 	ldw	r2,4(r17)
   13484:	b80f883a 	mov	r7,r23
   13488:	d80d883a 	mov	r6,sp
   1348c:	880b883a 	mov	r5,r17
   13490:	a009883a 	mov	r4,r20
   13494:	103ee83a 	callr	r2
   13498:	1000ca1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   1349c:	84000044 	addi	r16,r16,1
   134a0:	0000f506 	br	13878 <___vfprintf_internal_r+0x4e4>
   134a4:	25fff404 	addi	r23,r4,-48
   134a8:	bdc03fcc 	andi	r23,r23,255
   134ac:	00c00244 	movi	r3,9
   134b0:	1dc00936 	bltu	r3,r23,134d8 <___vfprintf_internal_r+0x144>
   134b4:	00bfffc4 	movi	r2,-1
   134b8:	90800426 	beq	r18,r2,134cc <___vfprintf_internal_r+0x138>
   134bc:	01400284 	movi	r5,10
   134c0:	9009883a 	mov	r4,r18
   134c4:	0010ba80 	call	10ba8 <__mulsi3>
   134c8:	00000106 	br	134d0 <___vfprintf_internal_r+0x13c>
   134cc:	0005883a 	mov	r2,zero
   134d0:	b8a5883a 	add	r18,r23,r2
   134d4:	0000e206 	br	13860 <___vfprintf_internal_r+0x4cc>
   134d8:	01400b84 	movi	r5,46
   134dc:	1140e426 	beq	r2,r5,13870 <___vfprintf_internal_r+0x4dc>
   134e0:	05c00084 	movi	r23,2
   134e4:	213ff404 	addi	r4,r4,-48
   134e8:	27003fcc 	andi	fp,r4,255
   134ec:	00c00244 	movi	r3,9
   134f0:	1f000936 	bltu	r3,fp,13518 <___vfprintf_internal_r+0x184>
   134f4:	00bfffc4 	movi	r2,-1
   134f8:	98800426 	beq	r19,r2,1350c <___vfprintf_internal_r+0x178>
   134fc:	01400284 	movi	r5,10
   13500:	9809883a 	mov	r4,r19
   13504:	0010ba80 	call	10ba8 <__mulsi3>
   13508:	00000106 	br	13510 <___vfprintf_internal_r+0x17c>
   1350c:	0005883a 	mov	r2,zero
   13510:	e0a7883a 	add	r19,fp,r2
   13514:	0000d906 	br	1387c <___vfprintf_internal_r+0x4e8>
   13518:	00c01b04 	movi	r3,108
   1351c:	10c0d226 	beq	r2,r3,13868 <___vfprintf_internal_r+0x4d4>
   13520:	013fffc4 	movi	r4,-1
   13524:	99000226 	beq	r19,r4,13530 <___vfprintf_internal_r+0x19c>
   13528:	d8000b15 	stw	zero,44(sp)
   1352c:	00000106 	br	13534 <___vfprintf_internal_r+0x1a0>
   13530:	04c00044 	movi	r19,1
   13534:	01001a44 	movi	r4,105
   13538:	11001626 	beq	r2,r4,13594 <___vfprintf_internal_r+0x200>
   1353c:	20800916 	blt	r4,r2,13564 <___vfprintf_internal_r+0x1d0>
   13540:	010018c4 	movi	r4,99
   13544:	11008826 	beq	r2,r4,13768 <___vfprintf_internal_r+0x3d4>
   13548:	01001904 	movi	r4,100
   1354c:	11001126 	beq	r2,r4,13594 <___vfprintf_internal_r+0x200>
   13550:	01001604 	movi	r4,88
   13554:	1100c81e 	bne	r2,r4,13878 <___vfprintf_internal_r+0x4e4>
   13558:	00c00044 	movi	r3,1
   1355c:	d8c00e15 	stw	r3,56(sp)
   13560:	00001506 	br	135b8 <___vfprintf_internal_r+0x224>
   13564:	01001cc4 	movi	r4,115
   13568:	11009826 	beq	r2,r4,137cc <___vfprintf_internal_r+0x438>
   1356c:	20800416 	blt	r4,r2,13580 <___vfprintf_internal_r+0x1ec>
   13570:	01001bc4 	movi	r4,111
   13574:	1100c01e 	bne	r2,r4,13878 <___vfprintf_internal_r+0x4e4>
   13578:	05400204 	movi	r21,8
   1357c:	00000f06 	br	135bc <___vfprintf_internal_r+0x228>
   13580:	01001d44 	movi	r4,117
   13584:	11000d26 	beq	r2,r4,135bc <___vfprintf_internal_r+0x228>
   13588:	01001e04 	movi	r4,120
   1358c:	11000a26 	beq	r2,r4,135b8 <___vfprintf_internal_r+0x224>
   13590:	0000b906 	br	13878 <___vfprintf_internal_r+0x4e4>
   13594:	d8c00a17 	ldw	r3,40(sp)
   13598:	b7000104 	addi	fp,r22,4
   1359c:	18000726 	beq	r3,zero,135bc <___vfprintf_internal_r+0x228>
   135a0:	df000d15 	stw	fp,52(sp)
   135a4:	b5c00017 	ldw	r23,0(r22)
   135a8:	b800080e 	bge	r23,zero,135cc <___vfprintf_internal_r+0x238>
   135ac:	05efc83a 	sub	r23,zero,r23
   135b0:	02400044 	movi	r9,1
   135b4:	00000606 	br	135d0 <___vfprintf_internal_r+0x23c>
   135b8:	05400404 	movi	r21,16
   135bc:	b0c00104 	addi	r3,r22,4
   135c0:	d8c00d15 	stw	r3,52(sp)
   135c4:	b5c00017 	ldw	r23,0(r22)
   135c8:	d8000a15 	stw	zero,40(sp)
   135cc:	0013883a 	mov	r9,zero
   135d0:	d839883a 	mov	fp,sp
   135d4:	b8001726 	beq	r23,zero,13634 <___vfprintf_internal_r+0x2a0>
   135d8:	a80b883a 	mov	r5,r21
   135dc:	b809883a 	mov	r4,r23
   135e0:	da401015 	stw	r9,64(sp)
   135e4:	0010aec0 	call	10aec <__udivsi3>
   135e8:	a80b883a 	mov	r5,r21
   135ec:	1009883a 	mov	r4,r2
   135f0:	102d883a 	mov	r22,r2
   135f4:	0010ba80 	call	10ba8 <__mulsi3>
   135f8:	b885c83a 	sub	r2,r23,r2
   135fc:	00c00244 	movi	r3,9
   13600:	da401017 	ldw	r9,64(sp)
   13604:	18800216 	blt	r3,r2,13610 <___vfprintf_internal_r+0x27c>
   13608:	10800c04 	addi	r2,r2,48
   1360c:	00000506 	br	13624 <___vfprintf_internal_r+0x290>
   13610:	d8c00e17 	ldw	r3,56(sp)
   13614:	18000226 	beq	r3,zero,13620 <___vfprintf_internal_r+0x28c>
   13618:	10800dc4 	addi	r2,r2,55
   1361c:	00000106 	br	13624 <___vfprintf_internal_r+0x290>
   13620:	108015c4 	addi	r2,r2,87
   13624:	e0800005 	stb	r2,0(fp)
   13628:	b02f883a 	mov	r23,r22
   1362c:	e7000044 	addi	fp,fp,1
   13630:	003fe806 	br	135d4 <___vfprintf_internal_r+0x240>
   13634:	e6efc83a 	sub	r23,fp,sp
   13638:	9dc5c83a 	sub	r2,r19,r23
   1363c:	0080090e 	bge	zero,r2,13664 <___vfprintf_internal_r+0x2d0>
   13640:	e085883a 	add	r2,fp,r2
   13644:	01400c04 	movi	r5,48
   13648:	d8c00917 	ldw	r3,36(sp)
   1364c:	e009883a 	mov	r4,fp
   13650:	e0c0032e 	bgeu	fp,r3,13660 <___vfprintf_internal_r+0x2cc>
   13654:	e7000044 	addi	fp,fp,1
   13658:	21400005 	stb	r5,0(r4)
   1365c:	e0bffa1e 	bne	fp,r2,13648 <___vfprintf_internal_r+0x2b4>
   13660:	e6efc83a 	sub	r23,fp,sp
   13664:	d8c00b17 	ldw	r3,44(sp)
   13668:	4dd1883a 	add	r8,r9,r23
   1366c:	922dc83a 	sub	r22,r18,r8
   13670:	18001626 	beq	r3,zero,136cc <___vfprintf_internal_r+0x338>
   13674:	48000a26 	beq	r9,zero,136a0 <___vfprintf_internal_r+0x30c>
   13678:	00800b44 	movi	r2,45
   1367c:	d8800805 	stb	r2,32(sp)
   13680:	88800117 	ldw	r2,4(r17)
   13684:	01c00044 	movi	r7,1
   13688:	d9800804 	addi	r6,sp,32
   1368c:	880b883a 	mov	r5,r17
   13690:	a009883a 	mov	r4,r20
   13694:	103ee83a 	callr	r2
   13698:	10004a1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   1369c:	84000044 	addi	r16,r16,1
   136a0:	0580070e 	bge	zero,r22,136c0 <___vfprintf_internal_r+0x32c>
   136a4:	b00f883a 	mov	r7,r22
   136a8:	01800c04 	movi	r6,48
   136ac:	880b883a 	mov	r5,r17
   136b0:	a009883a 	mov	r4,r20
   136b4:	00133280 	call	13328 <print_repeat>
   136b8:	1000421e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   136bc:	85a1883a 	add	r16,r16,r22
   136c0:	e02d883a 	mov	r22,fp
   136c4:	bf2fc83a 	sub	r23,r23,fp
   136c8:	00002006 	br	1374c <___vfprintf_internal_r+0x3b8>
   136cc:	0580090e 	bge	zero,r22,136f4 <___vfprintf_internal_r+0x360>
   136d0:	b00f883a 	mov	r7,r22
   136d4:	01800804 	movi	r6,32
   136d8:	880b883a 	mov	r5,r17
   136dc:	a009883a 	mov	r4,r20
   136e0:	da401015 	stw	r9,64(sp)
   136e4:	00133280 	call	13328 <print_repeat>
   136e8:	da401017 	ldw	r9,64(sp)
   136ec:	1000351e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   136f0:	85a1883a 	add	r16,r16,r22
   136f4:	483ff226 	beq	r9,zero,136c0 <___vfprintf_internal_r+0x32c>
   136f8:	00800b44 	movi	r2,45
   136fc:	d8800805 	stb	r2,32(sp)
   13700:	88800117 	ldw	r2,4(r17)
   13704:	01c00044 	movi	r7,1
   13708:	d9800804 	addi	r6,sp,32
   1370c:	880b883a 	mov	r5,r17
   13710:	a009883a 	mov	r4,r20
   13714:	103ee83a 	callr	r2
   13718:	10002a1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   1371c:	84000044 	addi	r16,r16,1
   13720:	003fe706 	br	136c0 <___vfprintf_internal_r+0x32c>
   13724:	b5bfffc4 	addi	r22,r22,-1
   13728:	b0800003 	ldbu	r2,0(r22)
   1372c:	01c00044 	movi	r7,1
   13730:	d9800804 	addi	r6,sp,32
   13734:	d8800805 	stb	r2,32(sp)
   13738:	88800117 	ldw	r2,4(r17)
   1373c:	880b883a 	mov	r5,r17
   13740:	a009883a 	mov	r4,r20
   13744:	103ee83a 	callr	r2
   13748:	10001e1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   1374c:	8585c83a 	sub	r2,r16,r22
   13750:	b5c9883a 	add	r4,r22,r23
   13754:	e085883a 	add	r2,fp,r2
   13758:	013ff216 	blt	zero,r4,13724 <___vfprintf_internal_r+0x390>
   1375c:	1021883a 	mov	r16,r2
   13760:	dd800d17 	ldw	r22,52(sp)
   13764:	00004406 	br	13878 <___vfprintf_internal_r+0x4e4>
   13768:	00800044 	movi	r2,1
   1376c:	1480080e 	bge	r2,r18,13790 <___vfprintf_internal_r+0x3fc>
   13770:	95ffffc4 	addi	r23,r18,-1
   13774:	b80f883a 	mov	r7,r23
   13778:	01800804 	movi	r6,32
   1377c:	880b883a 	mov	r5,r17
   13780:	a009883a 	mov	r4,r20
   13784:	00133280 	call	13328 <print_repeat>
   13788:	10000e1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   1378c:	85e1883a 	add	r16,r16,r23
   13790:	b0800017 	ldw	r2,0(r22)
   13794:	01c00044 	movi	r7,1
   13798:	d80d883a 	mov	r6,sp
   1379c:	d8800005 	stb	r2,0(sp)
   137a0:	88800117 	ldw	r2,4(r17)
   137a4:	880b883a 	mov	r5,r17
   137a8:	a009883a 	mov	r4,r20
   137ac:	b5c00104 	addi	r23,r22,4
   137b0:	103ee83a 	callr	r2
   137b4:	1000031e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   137b8:	84000044 	addi	r16,r16,1
   137bc:	b82d883a 	mov	r22,r23
   137c0:	00002d06 	br	13878 <___vfprintf_internal_r+0x4e4>
   137c4:	00bfffc4 	movi	r2,-1
   137c8:	00003106 	br	13890 <___vfprintf_internal_r+0x4fc>
   137cc:	b5c00017 	ldw	r23,0(r22)
   137d0:	b7000104 	addi	fp,r22,4
   137d4:	b809883a 	mov	r4,r23
   137d8:	00139940 	call	13994 <strlen>
   137dc:	9091c83a 	sub	r8,r18,r2
   137e0:	102d883a 	mov	r22,r2
   137e4:	0200090e 	bge	zero,r8,1380c <___vfprintf_internal_r+0x478>
   137e8:	400f883a 	mov	r7,r8
   137ec:	01800804 	movi	r6,32
   137f0:	880b883a 	mov	r5,r17
   137f4:	a009883a 	mov	r4,r20
   137f8:	da001015 	stw	r8,64(sp)
   137fc:	00133280 	call	13328 <print_repeat>
   13800:	da001017 	ldw	r8,64(sp)
   13804:	103fef1e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   13808:	8221883a 	add	r16,r16,r8
   1380c:	88800117 	ldw	r2,4(r17)
   13810:	b00f883a 	mov	r7,r22
   13814:	b80d883a 	mov	r6,r23
   13818:	880b883a 	mov	r5,r17
   1381c:	a009883a 	mov	r4,r20
   13820:	103ee83a 	callr	r2
   13824:	103fe71e 	bne	r2,zero,137c4 <___vfprintf_internal_r+0x430>
   13828:	85a1883a 	add	r16,r16,r22
   1382c:	e02d883a 	mov	r22,fp
   13830:	00001106 	br	13878 <___vfprintf_internal_r+0x4e4>
   13834:	00c00044 	movi	r3,1
   13838:	04ffffc4 	movi	r19,-1
   1383c:	d8000e15 	stw	zero,56(sp)
   13840:	d8c00a15 	stw	r3,40(sp)
   13844:	05400284 	movi	r21,10
   13848:	9825883a 	mov	r18,r19
   1384c:	d8000c15 	stw	zero,48(sp)
   13850:	d8000b15 	stw	zero,44(sp)
   13854:	182f883a 	mov	r23,r3
   13858:	00000806 	br	1387c <___vfprintf_internal_r+0x4e8>
   1385c:	ddc00b15 	stw	r23,44(sp)
   13860:	05c00084 	movi	r23,2
   13864:	00000506 	br	1387c <___vfprintf_internal_r+0x4e8>
   13868:	00c00044 	movi	r3,1
   1386c:	d8c00c15 	stw	r3,48(sp)
   13870:	05c000c4 	movi	r23,3
   13874:	00000106 	br	1387c <___vfprintf_internal_r+0x4e8>
   13878:	002f883a 	mov	r23,zero
   1387c:	d8c00f17 	ldw	r3,60(sp)
   13880:	18c00044 	addi	r3,r3,1
   13884:	d8c00f15 	stw	r3,60(sp)
   13888:	003edc06 	br	133fc <___vfprintf_internal_r+0x68>
   1388c:	8005883a 	mov	r2,r16
   13890:	dfc01a17 	ldw	ra,104(sp)
   13894:	df001917 	ldw	fp,100(sp)
   13898:	ddc01817 	ldw	r23,96(sp)
   1389c:	dd801717 	ldw	r22,92(sp)
   138a0:	dd401617 	ldw	r21,88(sp)
   138a4:	dd001517 	ldw	r20,84(sp)
   138a8:	dcc01417 	ldw	r19,80(sp)
   138ac:	dc801317 	ldw	r18,76(sp)
   138b0:	dc401217 	ldw	r17,72(sp)
   138b4:	dc001117 	ldw	r16,68(sp)
   138b8:	dec01b04 	addi	sp,sp,108
   138bc:	f800283a 	ret

000138c0 <__vfprintf_internal>:
   138c0:	00800074 	movhi	r2,1
   138c4:	1091cb04 	addi	r2,r2,18220
   138c8:	300f883a 	mov	r7,r6
   138cc:	280d883a 	mov	r6,r5
   138d0:	200b883a 	mov	r5,r4
   138d4:	11000017 	ldw	r4,0(r2)
   138d8:	00133941 	jmpi	13394 <___vfprintf_internal_r>

000138dc <__sfvwrite_small_dev>:
   138dc:	2880000b 	ldhu	r2,0(r5)
   138e0:	1080020c 	andi	r2,r2,8
   138e4:	10002126 	beq	r2,zero,1396c <__sfvwrite_small_dev+0x90>
   138e8:	2880008f 	ldh	r2,2(r5)
   138ec:	defffa04 	addi	sp,sp,-24
   138f0:	dc000015 	stw	r16,0(sp)
   138f4:	dfc00515 	stw	ra,20(sp)
   138f8:	dd000415 	stw	r20,16(sp)
   138fc:	dcc00315 	stw	r19,12(sp)
   13900:	dc800215 	stw	r18,8(sp)
   13904:	dc400115 	stw	r17,4(sp)
   13908:	2821883a 	mov	r16,r5
   1390c:	10001216 	blt	r2,zero,13958 <__sfvwrite_small_dev+0x7c>
   13910:	2027883a 	mov	r19,r4
   13914:	3025883a 	mov	r18,r6
   13918:	3823883a 	mov	r17,r7
   1391c:	05010004 	movi	r20,1024
   13920:	04400b0e 	bge	zero,r17,13950 <__sfvwrite_small_dev+0x74>
   13924:	880f883a 	mov	r7,r17
   13928:	a440010e 	bge	r20,r17,13930 <__sfvwrite_small_dev+0x54>
   1392c:	01c10004 	movi	r7,1024
   13930:	8140008f 	ldh	r5,2(r16)
   13934:	900d883a 	mov	r6,r18
   13938:	9809883a 	mov	r4,r19
   1393c:	00139b00 	call	139b0 <_write_r>
   13940:	0080050e 	bge	zero,r2,13958 <__sfvwrite_small_dev+0x7c>
   13944:	88a3c83a 	sub	r17,r17,r2
   13948:	90a5883a 	add	r18,r18,r2
   1394c:	003ff406 	br	13920 <__sfvwrite_small_dev+0x44>
   13950:	0005883a 	mov	r2,zero
   13954:	00000706 	br	13974 <__sfvwrite_small_dev+0x98>
   13958:	8080000b 	ldhu	r2,0(r16)
   1395c:	10801014 	ori	r2,r2,64
   13960:	8080000d 	sth	r2,0(r16)
   13964:	00bfffc4 	movi	r2,-1
   13968:	00000206 	br	13974 <__sfvwrite_small_dev+0x98>
   1396c:	00bfffc4 	movi	r2,-1
   13970:	f800283a 	ret
   13974:	dfc00517 	ldw	ra,20(sp)
   13978:	dd000417 	ldw	r20,16(sp)
   1397c:	dcc00317 	ldw	r19,12(sp)
   13980:	dc800217 	ldw	r18,8(sp)
   13984:	dc400117 	ldw	r17,4(sp)
   13988:	dc000017 	ldw	r16,0(sp)
   1398c:	dec00604 	addi	sp,sp,24
   13990:	f800283a 	ret

00013994 <strlen>:
   13994:	2005883a 	mov	r2,r4
   13998:	10c00007 	ldb	r3,0(r2)
   1399c:	18000226 	beq	r3,zero,139a8 <strlen+0x14>
   139a0:	10800044 	addi	r2,r2,1
   139a4:	003ffc06 	br	13998 <strlen+0x4>
   139a8:	1105c83a 	sub	r2,r2,r4
   139ac:	f800283a 	ret

000139b0 <_write_r>:
   139b0:	defffd04 	addi	sp,sp,-12
   139b4:	dc000015 	stw	r16,0(sp)
   139b8:	04000074 	movhi	r16,1
   139bc:	dc400115 	stw	r17,4(sp)
   139c0:	84123604 	addi	r16,r16,18648
   139c4:	2023883a 	mov	r17,r4
   139c8:	2809883a 	mov	r4,r5
   139cc:	300b883a 	mov	r5,r6
   139d0:	380d883a 	mov	r6,r7
   139d4:	dfc00215 	stw	ra,8(sp)
   139d8:	80000015 	stw	zero,0(r16)
   139dc:	0013b140 	call	13b14 <write>
   139e0:	00ffffc4 	movi	r3,-1
   139e4:	10c0031e 	bne	r2,r3,139f4 <_write_r+0x44>
   139e8:	80c00017 	ldw	r3,0(r16)
   139ec:	18000126 	beq	r3,zero,139f4 <_write_r+0x44>
   139f0:	88c00015 	stw	r3,0(r17)
   139f4:	dfc00217 	ldw	ra,8(sp)
   139f8:	dc400117 	ldw	r17,4(sp)
   139fc:	dc000017 	ldw	r16,0(sp)
   13a00:	dec00304 	addi	sp,sp,12
   13a04:	f800283a 	ret

00013a08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13a08:	deffff04 	addi	sp,sp,-4
   13a0c:	01000074 	movhi	r4,1
   13a10:	01400074 	movhi	r5,1
   13a14:	dfc00015 	stw	ra,0(sp)
   13a18:	21117004 	addi	r4,r4,17856
   13a1c:	2951d304 	addi	r5,r5,18252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13a20:	2140061e 	bne	r4,r5,13a3c <alt_load+0x34>
   13a24:	01000074 	movhi	r4,1
   13a28:	01400074 	movhi	r5,1
   13a2c:	21000804 	addi	r4,r4,32
   13a30:	29400804 	addi	r5,r5,32
   13a34:	2140121e 	bne	r4,r5,13a80 <alt_load+0x78>
   13a38:	00000b06 	br	13a68 <alt_load+0x60>
   13a3c:	00c00074 	movhi	r3,1
   13a40:	18d1d304 	addi	r3,r3,18252
   13a44:	1907c83a 	sub	r3,r3,r4
   13a48:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13a4c:	10fff526 	beq	r2,r3,13a24 <alt_load+0x1c>
    {
      *to++ = *from++;
   13a50:	114f883a 	add	r7,r2,r5
   13a54:	39c00017 	ldw	r7,0(r7)
   13a58:	110d883a 	add	r6,r2,r4
   13a5c:	10800104 	addi	r2,r2,4
   13a60:	31c00015 	stw	r7,0(r6)
   13a64:	003ff906 	br	13a4c <alt_load+0x44>
   13a68:	01000074 	movhi	r4,1
   13a6c:	01400074 	movhi	r5,1
   13a70:	210f9804 	addi	r4,r4,15968
   13a74:	294f9804 	addi	r5,r5,15968

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13a78:	2140101e 	bne	r4,r5,13abc <alt_load+0xb4>
   13a7c:	00000b06 	br	13aac <alt_load+0xa4>
   13a80:	00c00074 	movhi	r3,1
   13a84:	18c00804 	addi	r3,r3,32
   13a88:	1907c83a 	sub	r3,r3,r4
   13a8c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13a90:	10fff526 	beq	r2,r3,13a68 <alt_load+0x60>
    {
      *to++ = *from++;
   13a94:	114f883a 	add	r7,r2,r5
   13a98:	39c00017 	ldw	r7,0(r7)
   13a9c:	110d883a 	add	r6,r2,r4
   13aa0:	10800104 	addi	r2,r2,4
   13aa4:	31c00015 	stw	r7,0(r6)
   13aa8:	003ff906 	br	13a90 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13aac:	0013d380 	call	13d38 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   13ab0:	dfc00017 	ldw	ra,0(sp)
   13ab4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   13ab8:	0013e241 	jmpi	13e24 <alt_icache_flush_all>
   13abc:	00c00074 	movhi	r3,1
   13ac0:	18d17004 	addi	r3,r3,17856
   13ac4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13ac8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13acc:	18bff726 	beq	r3,r2,13aac <alt_load+0xa4>
    {
      *to++ = *from++;
   13ad0:	114f883a 	add	r7,r2,r5
   13ad4:	39c00017 	ldw	r7,0(r7)
   13ad8:	110d883a 	add	r6,r2,r4
   13adc:	10800104 	addi	r2,r2,4
   13ae0:	31c00015 	stw	r7,0(r6)
   13ae4:	003ff906 	br	13acc <alt_load+0xc4>

00013ae8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13ae8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13aec:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13af0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13af4:	0013b740 	call	13b74 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13af8:	0013b940 	call	13b94 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   13afc:	d1a06e17 	ldw	r6,-32328(gp)
   13b00:	d1606f17 	ldw	r5,-32324(gp)
   13b04:	d1207017 	ldw	r4,-32320(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   13b08:	dfc00017 	ldw	ra,0(sp)
   13b0c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   13b10:	00103c41 	jmpi	103c4 <main>

00013b14 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   13b14:	00800044 	movi	r2,1
   13b18:	20800226 	beq	r4,r2,13b24 <write+0x10>
   13b1c:	00800084 	movi	r2,2
   13b20:	2080041e 	bne	r4,r2,13b34 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   13b24:	01000074 	movhi	r4,1
   13b28:	000f883a 	mov	r7,zero
   13b2c:	2111cc04 	addi	r4,r4,18224
   13b30:	0013ba41 	jmpi	13ba4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   13b34:	d0a00917 	ldw	r2,-32732(gp)
   13b38:	10000926 	beq	r2,zero,13b60 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13b3c:	deffff04 	addi	sp,sp,-4
   13b40:	dfc00015 	stw	ra,0(sp)
   13b44:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13b48:	00c01444 	movi	r3,81
   13b4c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   13b50:	00bfffc4 	movi	r2,-1
   13b54:	dfc00017 	ldw	ra,0(sp)
   13b58:	dec00104 	addi	sp,sp,4
   13b5c:	f800283a 	ret
   13b60:	d0a06d04 	addi	r2,gp,-32332
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13b64:	00c01444 	movi	r3,81
   13b68:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   13b6c:	00bfffc4 	movi	r2,-1
   13b70:	f800283a 	ret

00013b74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13b74:	deffff04 	addi	sp,sp,-4
   13b78:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13b7c:	0013e280 	call	13e28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13b80:	00800044 	movi	r2,1
   13b84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13b88:	dfc00017 	ldw	ra,0(sp)
   13b8c:	dec00104 	addi	sp,sp,4
   13b90:	f800283a 	ret

00013b94 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13b94:	01000074 	movhi	r4,1
   13b98:	d1600504 	addi	r5,gp,-32748
   13b9c:	2111a804 	addi	r4,r4,18080
   13ba0:	0013d441 	jmpi	13d44 <alt_dev_llist_insert>

00013ba4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   13ba4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13ba8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   13bac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13bb0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   13bb4:	2980072e 	bgeu	r5,r6,13bd4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13bb8:	38c00037 	ldwio	r3,0(r7)
   13bbc:	18ffffec 	andhi	r3,r3,65535
   13bc0:	183ffc26 	beq	r3,zero,13bb4 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   13bc4:	28c00007 	ldb	r3,0(r5)
   13bc8:	20c00035 	stwio	r3,0(r4)
   13bcc:	29400044 	addi	r5,r5,1
   13bd0:	003ff806 	br	13bb4 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   13bd4:	f800283a 	ret

00013bd8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   13bd8:	d1600504 	addi	r5,gp,-32748
   13bdc:	0013db01 	jmpi	13db0 <alt_find_dev>

00013be0 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   13be0:	20800a17 	ldw	r2,40(r4)
   13be4:	10800023 	ldbuio	r2,0(r2)
   13be8:	28800005 	stb	r2,0(r5)

	return 0;
}
   13bec:	0005883a 	mov	r2,zero
   13bf0:	f800283a 	ret

00013bf4 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13bf4:	20800a17 	ldw	r2,40(r4)
   13bf8:	29400fcc 	andi	r5,r5,63
   13bfc:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13c00:	20800a17 	ldw	r2,40(r4)
   13c04:	10800063 	ldbuio	r2,1(r2)
   13c08:	30800005 	stb	r2,0(r6)

	return 0;
}
   13c0c:	0005883a 	mov	r2,zero
   13c10:	f800283a 	ret

00013c14 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c14:	20800a17 	ldw	r2,40(r4)
   13c18:	29400fcc 	andi	r5,r5,63
   13c1c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   13c20:	20800a17 	ldw	r2,40(r4)
   13c24:	11800065 	stbio	r6,1(r2)

	return 0;
}
   13c28:	0005883a 	mov	r2,zero
   13c2c:	f800283a 	ret

00013c30 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c30:	20800a17 	ldw	r2,40(r4)
   13c34:	00c00c84 	movi	r3,50
   13c38:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13c3c:	20800a17 	ldw	r2,40(r4)
   13c40:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c44:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13c48:	10803fcc 	andi	r2,r2,255
   13c4c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c50:	20800a17 	ldw	r2,40(r4)
   13c54:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13c58:	20800a17 	ldw	r2,40(r4)
   13c5c:	10800063 	ldbuio	r2,1(r2)
   13c60:	10803fcc 	andi	r2,r2,255
   13c64:	1006923a 	slli	r3,r2,8
   13c68:	28800017 	ldw	r2,0(r5)
   13c6c:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   13c70:	10e0000c 	andi	r3,r2,32768
   13c74:	18000126 	beq	r3,zero,13c7c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   13c78:	10bffff4 	orhi	r2,r2,65535
   13c7c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13c80:	0005883a 	mov	r2,zero
   13c84:	f800283a 	ret

00013c88 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c88:	20800a17 	ldw	r2,40(r4)
   13c8c:	00c00d04 	movi	r3,52
   13c90:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13c94:	20800a17 	ldw	r2,40(r4)
   13c98:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13c9c:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13ca0:	10803fcc 	andi	r2,r2,255
   13ca4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13ca8:	20800a17 	ldw	r2,40(r4)
   13cac:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13cb0:	20800a17 	ldw	r2,40(r4)
   13cb4:	10800063 	ldbuio	r2,1(r2)
   13cb8:	10803fcc 	andi	r2,r2,255
   13cbc:	1006923a 	slli	r3,r2,8
   13cc0:	28800017 	ldw	r2,0(r5)
   13cc4:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   13cc8:	10e0000c 	andi	r3,r2,32768
   13ccc:	18000126 	beq	r3,zero,13cd4 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   13cd0:	10bffff4 	orhi	r2,r2,65535
   13cd4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13cd8:	0005883a 	mov	r2,zero
   13cdc:	f800283a 	ret

00013ce0 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13ce0:	20800a17 	ldw	r2,40(r4)
   13ce4:	00c00d84 	movi	r3,54
   13ce8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13cec:	20800a17 	ldw	r2,40(r4)
   13cf0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13cf4:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13cf8:	10803fcc 	andi	r2,r2,255
   13cfc:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13d00:	20800a17 	ldw	r2,40(r4)
   13d04:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13d08:	20800a17 	ldw	r2,40(r4)
   13d0c:	10800063 	ldbuio	r2,1(r2)
   13d10:	10803fcc 	andi	r2,r2,255
   13d14:	1006923a 	slli	r3,r2,8
   13d18:	28800017 	ldw	r2,0(r5)
   13d1c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   13d20:	10e0000c 	andi	r3,r2,32768
   13d24:	18000126 	beq	r3,zero,13d2c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   13d28:	10bffff4 	orhi	r2,r2,65535
   13d2c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13d30:	0005883a 	mov	r2,zero
   13d34:	f800283a 	ret

00013d38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13d38:	f800283a 	ret

00013d3c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   13d3c:	3005883a 	mov	r2,r6
   13d40:	f800283a 	ret

00013d44 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13d44:	20000226 	beq	r4,zero,13d50 <alt_dev_llist_insert+0xc>
   13d48:	20800217 	ldw	r2,8(r4)
   13d4c:	1000101e 	bne	r2,zero,13d90 <alt_dev_llist_insert+0x4c>
   13d50:	d0a00917 	ldw	r2,-32732(gp)
   13d54:	10000926 	beq	r2,zero,13d7c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13d58:	deffff04 	addi	sp,sp,-4
   13d5c:	dfc00015 	stw	ra,0(sp)
   13d60:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   13d64:	00c00584 	movi	r3,22
   13d68:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13d6c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   13d70:	dfc00017 	ldw	ra,0(sp)
   13d74:	dec00104 	addi	sp,sp,4
   13d78:	f800283a 	ret
   13d7c:	d0a06d04 	addi	r2,gp,-32332
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   13d80:	00c00584 	movi	r3,22
   13d84:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13d88:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   13d8c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   13d90:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13d94:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   13d98:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   13d9c:	28800017 	ldw	r2,0(r5)
   13da0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   13da4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   13da8:	0005883a 	mov	r2,zero
   13dac:	f800283a 	ret

00013db0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13db0:	defffb04 	addi	sp,sp,-20
   13db4:	dcc00315 	stw	r19,12(sp)
   13db8:	dc800215 	stw	r18,8(sp)
   13dbc:	dc400115 	stw	r17,4(sp)
   13dc0:	dc000015 	stw	r16,0(sp)
   13dc4:	dfc00415 	stw	ra,16(sp)
   13dc8:	2027883a 	mov	r19,r4
   13dcc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   13dd0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   13dd4:	00139940 	call	13994 <strlen>
   13dd8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13ddc:	84400726 	beq	r16,r17,13dfc <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13de0:	81000217 	ldw	r4,8(r16)
   13de4:	900d883a 	mov	r6,r18
   13de8:	980b883a 	mov	r5,r19
   13dec:	0013e300 	call	13e30 <memcmp>
   13df0:	10000426 	beq	r2,zero,13e04 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   13df4:	84000017 	ldw	r16,0(r16)
   13df8:	003ff806 	br	13ddc <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
   13dfc:	0005883a 	mov	r2,zero
   13e00:	00000106 	br	13e08 <alt_find_dev+0x58>
   13e04:	8005883a 	mov	r2,r16
}
   13e08:	dfc00417 	ldw	ra,16(sp)
   13e0c:	dcc00317 	ldw	r19,12(sp)
   13e10:	dc800217 	ldw	r18,8(sp)
   13e14:	dc400117 	ldw	r17,4(sp)
   13e18:	dc000017 	ldw	r16,0(sp)
   13e1c:	dec00504 	addi	sp,sp,20
   13e20:	f800283a 	ret

00013e24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13e24:	f800283a 	ret

00013e28 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   13e28:	000170fa 	wrctl	ienable,zero
   13e2c:	f800283a 	ret

00013e30 <memcmp>:
   13e30:	218d883a 	add	r6,r4,r6
   13e34:	21800826 	beq	r4,r6,13e58 <memcmp+0x28>
   13e38:	20800003 	ldbu	r2,0(r4)
   13e3c:	28c00003 	ldbu	r3,0(r5)
   13e40:	10c00226 	beq	r2,r3,13e4c <memcmp+0x1c>
   13e44:	10c5c83a 	sub	r2,r2,r3
   13e48:	f800283a 	ret
   13e4c:	21000044 	addi	r4,r4,1
   13e50:	29400044 	addi	r5,r5,1
   13e54:	003ff706 	br	13e34 <memcmp+0x4>
   13e58:	0005883a 	mov	r2,zero
   13e5c:	f800283a 	ret
