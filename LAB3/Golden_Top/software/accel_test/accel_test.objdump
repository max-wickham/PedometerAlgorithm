
accel_test.elf:     file format elf32-littlenios2
accel_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005a70 memsz 0x00005a70 flags r-x
    LOAD off    0x00006a90 vaddr 0x00015a90 paddr 0x00017528 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00008fc0 vaddr 0x00018fc0 paddr 0x00018fc0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000057d8  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  00015a0c  00015a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  00015a90  00017528  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018fc0  00018fc0  00008fc0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00019114  00019114  00008528  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008528  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad8  00000000  00000000  00008550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a6a0  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006d42  00000000  00000000  000236c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007662  00000000  00000000  0002a40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016fc  00000000  00000000  00031a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000298c  00000000  00000000  00033168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003a09  00000000  00000000  00035af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039500  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000598  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c18a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003c18d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c190  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c191  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003c192  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003c19b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003c1a4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0003c1ad  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  0003c1bf  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0003c1fc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e0c7  00000000  00000000  00041205  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
00015a0c l    d  .rodata	00000000 .rodata
00015a90 l    d  .rwdata	00000000 .rwdata
00018fc0 l    d  .bss	00000000 .bss
00019114 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../accel_test_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00015a90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
0001144c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011b28 l     F .text	00000008 __fp_unlock
00011b3c l     F .text	0000019c __sinit.part.1
00011cd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00012780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012894 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000128c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000129b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012a9c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012b88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00012d64 l     F .text	0000003c alt_get_errno
00012da0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00013250 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017518 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000134c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013600 l     F .text	00000034 alt_dev_reg
00016464 l     O .rwdata	00001060 jtag_uart
000174c4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000138f0 l     F .text	00000210 altera_avalon_jtag_uart_irq
00013b00 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014138 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014b40 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018fe8 g     O .bss	00000004 alt_instruction_exception_handler
00012540 g     F .text	00000054 _isatty_r
00012ca0 g     F .text	0000007c alt_main
00019014 g     O .bss	00000100 alt_irq
00012594 g     F .text	00000060 _lseek_r
00017528 g       *ABS*	00000000 __flash_rwdata_start
00011ed8 g     F .text	000000ac __sflags
00019114 g       *ABS*	00000000 __alt_heap_start
00011768 g     F .text	0000005c __sseek
00011e88 g     F .text	00000010 __sinit
00015494 g     F .text	00000140 __swbuf_r
00011ce0 g     F .text	00000078 __sfmoreglue
00012d40 g     F .text	00000024 __malloc_unlock
00011e70 g     F .text	00000018 _cleanup
00014fc4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00014374 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000108a0 g     F .text	0000005c _fstat_r
00018fc0 g     O .bss	00000004 errno
000116e4 g     F .text	00000008 __seofread
00018fd4 g     O .bss	00000004 alt_argv
0001f4f0 g       *ABS*	00000000 _gp
000162e4 g     O .rwdata	00000180 alt_fd_list
000148c4 g     F .text	00000090 alt_find_dev
0001514c g     F .text	00000148 memcpy
00011b30 g     F .text	0000000c _cleanup_r
00014c24 g     F .text	0000007c alt_io_redirect
00015a0c g       *ABS*	00000000 __DTOR_END__
00014fe8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013cf8 g     F .text	0000021c altera_avalon_jtag_uart_read
000129f0 g     F .text	000000ac isatty
00018fcc g     O .bss	00000004 __malloc_top_pad
0001163c g     F .text	00000054 _sbrk_r
000125f4 g     F .text	00000060 _read_r
00017510 g     O .rwdata	00000004 alt_max_fd
00012654 g     F .text	000000f0 _fclose_r
00011af8 g     F .text	00000030 fflush
00018fc8 g     O .bss	00000004 __malloc_max_sbrked_mem
00014ca0 g     F .text	00000180 alt_irq_register
00012bc4 g     F .text	000000dc lseek
000174f0 g     O .rwdata	00000004 _global_impure_ptr
00019114 g       *ABS*	00000000 __bss_end
00014ebc g     F .text	00000108 alt_tick
00011ea8 g     F .text	00000018 __fp_lock_all
00014e20 g     F .text	0000009c alt_alarm_stop
00018fdc g     O .bss	00000004 alt_irq_active
00010440 g     F .text	00000444 _fseeko_r
000100fc g     F .exceptions	000000d8 alt_irq_handler
000162bc g     O .rwdata	00000028 alt_dev_null
00014704 g     F .text	00000020 alt_dcache_flush_all
00017528 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00017508 g     O .rwdata	00000008 alt_dev_list
00013500 g     F .text	00000100 write
00015294 g     F .text	000000a0 _putc_r
00015a90 g       *ABS*	00000000 __ram_rodata_end
000128fc g     F .text	000000b8 fstat
00019114 g       *ABS*	00000000 end
00010884 g     F .text	0000001c fseeko
00010424 g     F .text	0000001c fseek
0001383c g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
00015a0c g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000141b4 g     F .text	00000074 alt_avalon_timer_sc_init
00013f14 g     F .text	00000224 altera_avalon_jtag_uart_write
00011e98 g     F .text	00000004 __sfp_lock_acquire
000120a8 g     F .text	00000310 _free_r
00012fe8 g     F .text	0000022c alt_printf
00015858 g     F .text	00000180 __call_exitprocs
000174f8 g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
00018fe0 g     O .bss	00000004 _alt_tick_rate
00018fe4 g     O .bss	00000004 _alt_nticks
0001328c g     F .text	00000104 read
0001366c g     F .text	0000006c alt_sys_init
00014264 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000113ec g     F .text	00000060 _open_r
00015740 g     F .text	00000118 __register_exitproc
00013ba0 g     F .text	00000068 altera_avalon_jtag_uart_close
00012758 g     F .text	00000028 .hidden __mulsi3
00015a90 g       *ABS*	00000000 __ram_rwdata_start
00015a0c g       *ABS*	00000000 __ram_rodata_start
00018fec g     O .bss	00000028 __malloc_current_mallinfo
000136d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00014a5c g     F .text	000000c4 alt_get_fd
00014440 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
0001182c g     F .text	00000054 _close_r
000150d0 g     F .text	0000007c memcmp
00013798 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019114 g       *ABS*	00000000 __alt_stack_base
000137e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000155ec g     F .text	00000154 __swsetup_r
00011d58 g     F .text	00000118 __sfp
00015eb4 g     O .rwdata	00000408 __malloc_av_
00011ea4 g     F .text	00000004 __sinit_lock_release
00011690 g     F .text	00000054 __sread
00014954 g     F .text	00000108 alt_find_file
00014760 g     F .text	000000a4 alt_dev_llist_insert
00012d1c g     F .text	00000024 __malloc_lock
00013414 g     F .text	000000b0 sbrk
00011a9c g     F .text	0000005c _fflush_r
00010408 g     F .text	00000018 fopen
00018fc0 g       *ABS*	00000000 __bss_start
000112c4 g     F .text	00000128 memset
00010270 g     F .text	000000a4 main
00018fd8 g     O .bss	00000004 alt_envp
00018fc4 g     O .bss	00000004 __malloc_max_total_mem
00013738 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000155d4 g     F .text	00000018 __swbuf
000117c4 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012744 g     F .text	00000014 fclose
00010ab8 g     F .text	0000080c _malloc_r
00017514 g     O .rwdata	00000004 alt_errno
000123b8 g     F .text	000000c4 _fwalk
00015334 g     F .text	000000c8 putc
00011f84 g     F .text	00000124 _malloc_trim_r
00015a0c g       *ABS*	00000000 __CTOR_END__
00015a0c g       *ABS*	00000000 __flash_rodata_start
00015a0c g       *ABS*	00000000 __DTOR_LIST__
00013634 g     F .text	00000038 alt_irq_init
00013390 g     F .text	00000084 alt_release_fd
00015084 g     F .text	00000014 atexit
000117cc g     F .text	00000060 _write_r
000174f4 g     O .rwdata	00000004 _impure_ptr
00018fd0 g     O .bss	00000004 alt_argc
00011880 g     F .text	0000021c __sflush_r
00014864 g     F .text	00000060 _do_dtors
00010420 g     F .text	00000004 _fseek_r
00011468 g     F .text	000001d4 __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
00011ec0 g     F .text	00000018 __fp_unlock_all
00017500 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014228 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00017528 g       *ABS*	00000000 _edata
00019114 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00013c08 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000116ec g     F .text	0000007c __swrite
000174fc g     O .rwdata	00000004 __malloc_trim_threshold
00015098 g     F .text	00000038 exit
0001247c g     F .text	000000c4 _fwalk_reent
0001450c g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011e9c g     F .text	00000004 __sfp_lock_release
00010314 g     F .text	000000f4 _fopen_r
000159d8 g     F .text	00000034 _exit
000145d8 g     F .text	0000012c alt_alarm_start
000142a8 g     F .text	00000068 alt_up_accelerometer_spi_read
00014310 g     F .text	00000064 alt_up_accelerometer_spi_write
000108fc g     F .text	000001bc __smakebuf_r
000153fc g     F .text	00000098 strlen
00012e8c g     F .text	0000015c open
00013214 g     F .text	0000003c alt_putchar
00014b20 g     F .text	00000020 alt_icache_flush_all
0001751c g     O .rwdata	00000004 alt_priority_mask
00017520 g     O .rwdata	00000008 alt_alarm_list
00014804 g     F .text	00000060 _do_ctors
000127bc g     F .text	000000d8 close
00012b04 g     F .text	00000084 alt_load
00011ea0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a40504 	addi	r2,r2,-28652
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a40504 	addi	r2,r2,-28652
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6be17 	ldw	r2,-25864(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6be17 	ldw	r2,-25864(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10240:	d6bd3c14 	ori	gp,gp,62704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a3f014 	ori	r2,r2,36800

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e44514 	ori	r3,r3,37140

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	0012b040 	call	12b04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	0012ca00 	call	12ca0 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <alt_after_alt_main>

00010270 <main>:

#include "altera_avalon_pio_regs.h"
#include "system.h"


int main() {
   10270:	defff904 	addi	sp,sp,-28
   10274:	dfc00615 	stw	ra,24(sp)
   10278:	df000515 	stw	fp,20(sp)
   1027c:	df000504 	addi	fp,sp,20

	FILE* fp;
	fp = fopen ("/dev/jtag_uart", "r+"); //Open file for reading and writing
   10280:	01400074 	movhi	r5,1
   10284:	29568304 	addi	r5,r5,23052
   10288:	01000074 	movhi	r4,1
   1028c:	21168404 	addi	r4,r4,23056
   10290:	00104080 	call	10408 <fopen>
   10294:	e0bffb15 	stw	r2,-20(fp)

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10298:	01000074 	movhi	r4,1
   1029c:	21168804 	addi	r4,r4,23072
   102a0:	00142280 	call	14228 <alt_up_accelerometer_spi_open_dev>
   102a4:	e0bffc15 	stw	r2,-16(fp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   102a8:	e0bffc17 	ldw	r2,-16(fp)
   102ac:	1000021e 	bne	r2,zero,102b8 <main+0x48>
        return 1;
   102b0:	00800044 	movi	r2,1
   102b4:	00001206 	br	10300 <main+0x90>
    }
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   102b8:	e0bffd04 	addi	r2,fp,-12
   102bc:	100b883a 	mov	r5,r2
   102c0:	e13ffc17 	ldw	r4,-16(fp)
   102c4:	00143740 	call	14374 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   102c8:	e0bffe04 	addi	r2,fp,-8
   102cc:	100b883a 	mov	r5,r2
   102d0:	e13ffc17 	ldw	r4,-16(fp)
   102d4:	00144400 	call	14440 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   102d8:	e0bfff04 	addi	r2,fp,-4
   102dc:	100b883a 	mov	r5,r2
   102e0:	e13ffc17 	ldw	r4,-16(fp)
   102e4:	001450c0 	call	1450c <alt_up_accelerometer_spi_read_z_axis>
         alt_printf("raw data: %x \n", z_read);
   102e8:	e0bfff17 	ldw	r2,-4(fp)
   102ec:	100b883a 	mov	r5,r2
   102f0:	01000074 	movhi	r4,1
   102f4:	21168e04 	addi	r4,r4,23096
   102f8:	0012fe80 	call	12fe8 <alt_printf>
        //fprintf(fp," %ld ",x_read);

    }
   102fc:	003fee06 	br	102b8 <main+0x48>

    return 0;
}
   10300:	e037883a 	mov	sp,fp
   10304:	dfc00117 	ldw	ra,4(sp)
   10308:	df000017 	ldw	fp,0(sp)
   1030c:	dec00204 	addi	sp,sp,8
   10310:	f800283a 	ret

00010314 <_fopen_r>:
   10314:	defffa04 	addi	sp,sp,-24
   10318:	3005883a 	mov	r2,r6
   1031c:	dcc00415 	stw	r19,16(sp)
   10320:	d80d883a 	mov	r6,sp
   10324:	2827883a 	mov	r19,r5
   10328:	100b883a 	mov	r5,r2
   1032c:	dc800315 	stw	r18,12(sp)
   10330:	dfc00515 	stw	ra,20(sp)
   10334:	dc400215 	stw	r17,8(sp)
   10338:	dc000115 	stw	r16,4(sp)
   1033c:	2025883a 	mov	r18,r4
   10340:	0011ed80 	call	11ed8 <__sflags>
   10344:	10002726 	beq	r2,zero,103e4 <_fopen_r+0xd0>
   10348:	9009883a 	mov	r4,r18
   1034c:	1023883a 	mov	r17,r2
   10350:	0011d580 	call	11d58 <__sfp>
   10354:	1021883a 	mov	r16,r2
   10358:	10002226 	beq	r2,zero,103e4 <_fopen_r+0xd0>
   1035c:	d9800017 	ldw	r6,0(sp)
   10360:	01c06d84 	movi	r7,438
   10364:	980b883a 	mov	r5,r19
   10368:	9009883a 	mov	r4,r18
   1036c:	00113ec0 	call	113ec <_open_r>
   10370:	10001916 	blt	r2,zero,103d8 <_fopen_r+0xc4>
   10374:	8080038d 	sth	r2,14(r16)
   10378:	00800074 	movhi	r2,1
   1037c:	1085a404 	addi	r2,r2,5776
   10380:	80800815 	stw	r2,32(r16)
   10384:	00800074 	movhi	r2,1
   10388:	1085bb04 	addi	r2,r2,5868
   1038c:	80800915 	stw	r2,36(r16)
   10390:	00800074 	movhi	r2,1
   10394:	1085da04 	addi	r2,r2,5992
   10398:	80800a15 	stw	r2,40(r16)
   1039c:	00800074 	movhi	r2,1
   103a0:	1085f104 	addi	r2,r2,6084
   103a4:	8440030d 	sth	r17,12(r16)
   103a8:	84000715 	stw	r16,28(r16)
   103ac:	80800b15 	stw	r2,44(r16)
   103b0:	8c40400c 	andi	r17,r17,256
   103b4:	88000d1e 	bne	r17,zero,103ec <_fopen_r+0xd8>
   103b8:	8005883a 	mov	r2,r16
   103bc:	dfc00517 	ldw	ra,20(sp)
   103c0:	dcc00417 	ldw	r19,16(sp)
   103c4:	dc800317 	ldw	r18,12(sp)
   103c8:	dc400217 	ldw	r17,8(sp)
   103cc:	dc000117 	ldw	r16,4(sp)
   103d0:	dec00604 	addi	sp,sp,24
   103d4:	f800283a 	ret
   103d8:	0011e980 	call	11e98 <__sfp_lock_acquire>
   103dc:	8000030d 	sth	zero,12(r16)
   103e0:	0011e9c0 	call	11e9c <__sfp_lock_release>
   103e4:	0005883a 	mov	r2,zero
   103e8:	003ff406 	br	103bc <_fopen_r+0xa8>
   103ec:	01c00084 	movi	r7,2
   103f0:	000d883a 	mov	r6,zero
   103f4:	800b883a 	mov	r5,r16
   103f8:	9009883a 	mov	r4,r18
   103fc:	00104200 	call	10420 <_fseek_r>
   10400:	8005883a 	mov	r2,r16
   10404:	003fed06 	br	103bc <_fopen_r+0xa8>

00010408 <fopen>:
   10408:	00800074 	movhi	r2,1
   1040c:	109d3d04 	addi	r2,r2,29940
   10410:	280d883a 	mov	r6,r5
   10414:	200b883a 	mov	r5,r4
   10418:	11000017 	ldw	r4,0(r2)
   1041c:	00103141 	jmpi	10314 <_fopen_r>

00010420 <_fseek_r>:
   10420:	00104401 	jmpi	10440 <_fseeko_r>

00010424 <fseek>:
   10424:	00800074 	movhi	r2,1
   10428:	109d3d04 	addi	r2,r2,29940
   1042c:	300f883a 	mov	r7,r6
   10430:	280d883a 	mov	r6,r5
   10434:	200b883a 	mov	r5,r4
   10438:	11000017 	ldw	r4,0(r2)
   1043c:	00104401 	jmpi	10440 <_fseeko_r>

00010440 <_fseeko_r>:
   10440:	deffe804 	addi	sp,sp,-96
   10444:	dd401415 	stw	r21,80(sp)
   10448:	dc801115 	stw	r18,68(sp)
   1044c:	dc401015 	stw	r17,64(sp)
   10450:	dc000f15 	stw	r16,60(sp)
   10454:	dfc01715 	stw	ra,92(sp)
   10458:	ddc01615 	stw	r23,88(sp)
   1045c:	dd801515 	stw	r22,84(sp)
   10460:	dd001315 	stw	r20,76(sp)
   10464:	dcc01215 	stw	r19,72(sp)
   10468:	2023883a 	mov	r17,r4
   1046c:	2821883a 	mov	r16,r5
   10470:	302b883a 	mov	r21,r6
   10474:	3825883a 	mov	r18,r7
   10478:	20000226 	beq	r4,zero,10484 <_fseeko_r+0x44>
   1047c:	20800e17 	ldw	r2,56(r4)
   10480:	10005a26 	beq	r2,zero,105ec <_fseeko_r+0x1ac>
   10484:	8080030b 	ldhu	r2,12(r16)
   10488:	00c04204 	movi	r3,264
   1048c:	1080420c 	andi	r2,r2,264
   10490:	10c05b26 	beq	r2,r3,10600 <_fseeko_r+0x1c0>
   10494:	85000a17 	ldw	r20,40(r16)
   10498:	a000f626 	beq	r20,zero,10874 <_fseeko_r+0x434>
   1049c:	00800044 	movi	r2,1
   104a0:	90803e26 	beq	r18,r2,1059c <_fseeko_r+0x15c>
   104a4:	00800084 	movi	r2,2
   104a8:	90801026 	beq	r18,r2,104ec <_fseeko_r+0xac>
   104ac:	90000f26 	beq	r18,zero,104ec <_fseeko_r+0xac>
   104b0:	00800584 	movi	r2,22
   104b4:	88800015 	stw	r2,0(r17)
   104b8:	04ffffc4 	movi	r19,-1
   104bc:	9805883a 	mov	r2,r19
   104c0:	dfc01717 	ldw	ra,92(sp)
   104c4:	ddc01617 	ldw	r23,88(sp)
   104c8:	dd801517 	ldw	r22,84(sp)
   104cc:	dd401417 	ldw	r21,80(sp)
   104d0:	dd001317 	ldw	r20,76(sp)
   104d4:	dcc01217 	ldw	r19,72(sp)
   104d8:	dc801117 	ldw	r18,68(sp)
   104dc:	dc401017 	ldw	r17,64(sp)
   104e0:	dc000f17 	ldw	r16,60(sp)
   104e4:	dec01804 	addi	sp,sp,96
   104e8:	f800283a 	ret
   104ec:	80800417 	ldw	r2,16(r16)
   104f0:	002f883a 	mov	r23,zero
   104f4:	0027883a 	mov	r19,zero
   104f8:	1000cb26 	beq	r2,zero,10828 <_fseeko_r+0x3e8>
   104fc:	8080030b 	ldhu	r2,12(r16)
   10500:	10c2068c 	andi	r3,r2,2074
   10504:	1800071e 	bne	r3,zero,10524 <_fseeko_r+0xe4>
   10508:	10c1000c 	andi	r3,r2,1024
   1050c:	1800451e 	bne	r3,zero,10624 <_fseeko_r+0x1e4>
   10510:	00c00074 	movhi	r3,1
   10514:	18c5da04 	addi	r3,r3,5992
   10518:	a0c0b726 	beq	r20,r3,107f8 <_fseeko_r+0x3b8>
   1051c:	10820014 	ori	r2,r2,2048
   10520:	8080030d 	sth	r2,12(r16)
   10524:	800b883a 	mov	r5,r16
   10528:	8809883a 	mov	r4,r17
   1052c:	0011a9c0 	call	11a9c <_fflush_r>
   10530:	1027883a 	mov	r19,r2
   10534:	103fe01e 	bne	r2,zero,104b8 <_fseeko_r+0x78>
   10538:	81400717 	ldw	r5,28(r16)
   1053c:	900f883a 	mov	r7,r18
   10540:	a80d883a 	mov	r6,r21
   10544:	8809883a 	mov	r4,r17
   10548:	a03ee83a 	callr	r20
   1054c:	00ffffc4 	movi	r3,-1
   10550:	10ffd926 	beq	r2,r3,104b8 <_fseeko_r+0x78>
   10554:	81400c17 	ldw	r5,48(r16)
   10558:	28000526 	beq	r5,zero,10570 <_fseeko_r+0x130>
   1055c:	80801004 	addi	r2,r16,64
   10560:	28800226 	beq	r5,r2,1056c <_fseeko_r+0x12c>
   10564:	8809883a 	mov	r4,r17
   10568:	00120a80 	call	120a8 <_free_r>
   1056c:	80000c15 	stw	zero,48(r16)
   10570:	8080030b 	ldhu	r2,12(r16)
   10574:	80c00417 	ldw	r3,16(r16)
   10578:	80000115 	stw	zero,4(r16)
   1057c:	10bdf7cc 	andi	r2,r2,63455
   10580:	80c00015 	stw	r3,0(r16)
   10584:	8080030d 	sth	r2,12(r16)
   10588:	01800204 	movi	r6,8
   1058c:	000b883a 	mov	r5,zero
   10590:	81001704 	addi	r4,r16,92
   10594:	00112c40 	call	112c4 <memset>
   10598:	003fc806 	br	104bc <_fseeko_r+0x7c>
   1059c:	800b883a 	mov	r5,r16
   105a0:	8809883a 	mov	r4,r17
   105a4:	0011a9c0 	call	11a9c <_fflush_r>
   105a8:	8080030b 	ldhu	r2,12(r16)
   105ac:	10c4000c 	andi	r3,r2,4096
   105b0:	18008726 	beq	r3,zero,107d0 <_fseeko_r+0x390>
   105b4:	84c01417 	ldw	r19,80(r16)
   105b8:	10c0010c 	andi	r3,r2,4
   105bc:	1800431e 	bne	r3,zero,106cc <_fseeko_r+0x28c>
   105c0:	1080020c 	andi	r2,r2,8
   105c4:	10008026 	beq	r2,zero,107c8 <_fseeko_r+0x388>
   105c8:	80c00017 	ldw	r3,0(r16)
   105cc:	80800417 	ldw	r2,16(r16)
   105d0:	18000226 	beq	r3,zero,105dc <_fseeko_r+0x19c>
   105d4:	1887c83a 	sub	r3,r3,r2
   105d8:	98e7883a 	add	r19,r19,r3
   105dc:	aceb883a 	add	r21,r21,r19
   105e0:	05c00044 	movi	r23,1
   105e4:	0025883a 	mov	r18,zero
   105e8:	003fc306 	br	104f8 <_fseeko_r+0xb8>
   105ec:	0011e880 	call	11e88 <__sinit>
   105f0:	8080030b 	ldhu	r2,12(r16)
   105f4:	00c04204 	movi	r3,264
   105f8:	1080420c 	andi	r2,r2,264
   105fc:	10ffa51e 	bne	r2,r3,10494 <_fseeko_r+0x54>
   10600:	800b883a 	mov	r5,r16
   10604:	8809883a 	mov	r4,r17
   10608:	0011a9c0 	call	11a9c <_fflush_r>
   1060c:	003fa106 	br	10494 <_fseeko_r+0x54>
   10610:	8080030b 	ldhu	r2,12(r16)
   10614:	00c10004 	movi	r3,1024
   10618:	80c01315 	stw	r3,76(r16)
   1061c:	10c4b03a 	or	r2,r2,r3
   10620:	8080030d 	sth	r2,12(r16)
   10624:	9000311e 	bne	r18,zero,106ec <_fseeko_r+0x2ac>
   10628:	a82d883a 	mov	r22,r21
   1062c:	b800371e 	bne	r23,zero,1070c <_fseeko_r+0x2cc>
   10630:	8080030b 	ldhu	r2,12(r16)
   10634:	1084000c 	andi	r2,r2,4096
   10638:	10007f26 	beq	r2,zero,10838 <_fseeko_r+0x3f8>
   1063c:	80801417 	ldw	r2,80(r16)
   10640:	81800117 	ldw	r6,4(r16)
   10644:	81400c17 	ldw	r5,48(r16)
   10648:	11a7c83a 	sub	r19,r2,r6
   1064c:	28008226 	beq	r5,zero,10858 <_fseeko_r+0x418>
   10650:	81c00f17 	ldw	r7,60(r16)
   10654:	99e7c83a 	sub	r19,r19,r7
   10658:	81000e17 	ldw	r4,56(r16)
   1065c:	80800417 	ldw	r2,16(r16)
   10660:	99a7883a 	add	r19,r19,r6
   10664:	2087c83a 	sub	r3,r4,r2
   10668:	98e7c83a 	sub	r19,r19,r3
   1066c:	38c7883a 	add	r3,r7,r3
   10670:	b4c02b16 	blt	r22,r19,10720 <_fseeko_r+0x2e0>
   10674:	98c9883a 	add	r4,r19,r3
   10678:	b100292e 	bgeu	r22,r4,10720 <_fseeko_r+0x2e0>
   1067c:	b4e7c83a 	sub	r19,r22,r19
   10680:	14c5883a 	add	r2,r2,r19
   10684:	1ce7c83a 	sub	r19,r3,r19
   10688:	80800015 	stw	r2,0(r16)
   1068c:	84c00115 	stw	r19,4(r16)
   10690:	28000526 	beq	r5,zero,106a8 <_fseeko_r+0x268>
   10694:	80801004 	addi	r2,r16,64
   10698:	28800226 	beq	r5,r2,106a4 <_fseeko_r+0x264>
   1069c:	8809883a 	mov	r4,r17
   106a0:	00120a80 	call	120a8 <_free_r>
   106a4:	80000c15 	stw	zero,48(r16)
   106a8:	8080030b 	ldhu	r2,12(r16)
   106ac:	01800204 	movi	r6,8
   106b0:	000b883a 	mov	r5,zero
   106b4:	10bff7cc 	andi	r2,r2,65503
   106b8:	8080030d 	sth	r2,12(r16)
   106bc:	81001704 	addi	r4,r16,92
   106c0:	00112c40 	call	112c4 <memset>
   106c4:	0027883a 	mov	r19,zero
   106c8:	003f7c06 	br	104bc <_fseeko_r+0x7c>
   106cc:	80c00117 	ldw	r3,4(r16)
   106d0:	80800c17 	ldw	r2,48(r16)
   106d4:	98e7c83a 	sub	r19,r19,r3
   106d8:	10003b26 	beq	r2,zero,107c8 <_fseeko_r+0x388>
   106dc:	80c00f17 	ldw	r3,60(r16)
   106e0:	80800417 	ldw	r2,16(r16)
   106e4:	98e7c83a 	sub	r19,r19,r3
   106e8:	003fbc06 	br	105dc <_fseeko_r+0x19c>
   106ec:	8140038f 	ldh	r5,14(r16)
   106f0:	d80d883a 	mov	r6,sp
   106f4:	8809883a 	mov	r4,r17
   106f8:	00108a00 	call	108a0 <_fstat_r>
   106fc:	103f891e 	bne	r2,zero,10524 <_fseeko_r+0xe4>
   10700:	dd800417 	ldw	r22,16(sp)
   10704:	adad883a 	add	r22,r21,r22
   10708:	b83fc926 	beq	r23,zero,10630 <_fseeko_r+0x1f0>
   1070c:	81400c17 	ldw	r5,48(r16)
   10710:	81800117 	ldw	r6,4(r16)
   10714:	28005026 	beq	r5,zero,10858 <_fseeko_r+0x418>
   10718:	81c00f17 	ldw	r7,60(r16)
   1071c:	003fce06 	br	10658 <_fseeko_r+0x218>
   10720:	84c01317 	ldw	r19,76(r16)
   10724:	81400717 	ldw	r5,28(r16)
   10728:	000f883a 	mov	r7,zero
   1072c:	04e7c83a 	sub	r19,zero,r19
   10730:	9da6703a 	and	r19,r19,r22
   10734:	980d883a 	mov	r6,r19
   10738:	8809883a 	mov	r4,r17
   1073c:	a03ee83a 	callr	r20
   10740:	00ffffc4 	movi	r3,-1
   10744:	10ff7726 	beq	r2,r3,10524 <_fseeko_r+0xe4>
   10748:	80800417 	ldw	r2,16(r16)
   1074c:	81400c17 	ldw	r5,48(r16)
   10750:	80000115 	stw	zero,4(r16)
   10754:	80800015 	stw	r2,0(r16)
   10758:	28000526 	beq	r5,zero,10770 <_fseeko_r+0x330>
   1075c:	80801004 	addi	r2,r16,64
   10760:	28800226 	beq	r5,r2,1076c <_fseeko_r+0x32c>
   10764:	8809883a 	mov	r4,r17
   10768:	00120a80 	call	120a8 <_free_r>
   1076c:	80000c15 	stw	zero,48(r16)
   10770:	8080030b 	ldhu	r2,12(r16)
   10774:	b4e7c83a 	sub	r19,r22,r19
   10778:	10bff7cc 	andi	r2,r2,65503
   1077c:	8080030d 	sth	r2,12(r16)
   10780:	98000b26 	beq	r19,zero,107b0 <_fseeko_r+0x370>
   10784:	800b883a 	mov	r5,r16
   10788:	8809883a 	mov	r4,r17
   1078c:	00114680 	call	11468 <__srefill_r>
   10790:	103f641e 	bne	r2,zero,10524 <_fseeko_r+0xe4>
   10794:	80800117 	ldw	r2,4(r16)
   10798:	14ff6236 	bltu	r2,r19,10524 <_fseeko_r+0xe4>
   1079c:	80c00017 	ldw	r3,0(r16)
   107a0:	14c5c83a 	sub	r2,r2,r19
   107a4:	80800115 	stw	r2,4(r16)
   107a8:	1ce7883a 	add	r19,r3,r19
   107ac:	84c00015 	stw	r19,0(r16)
   107b0:	01800204 	movi	r6,8
   107b4:	000b883a 	mov	r5,zero
   107b8:	81001704 	addi	r4,r16,92
   107bc:	00112c40 	call	112c4 <memset>
   107c0:	0027883a 	mov	r19,zero
   107c4:	003f3d06 	br	104bc <_fseeko_r+0x7c>
   107c8:	80800417 	ldw	r2,16(r16)
   107cc:	003f8306 	br	105dc <_fseeko_r+0x19c>
   107d0:	81400717 	ldw	r5,28(r16)
   107d4:	900f883a 	mov	r7,r18
   107d8:	000d883a 	mov	r6,zero
   107dc:	8809883a 	mov	r4,r17
   107e0:	a03ee83a 	callr	r20
   107e4:	1027883a 	mov	r19,r2
   107e8:	00bfffc4 	movi	r2,-1
   107ec:	98bf3226 	beq	r19,r2,104b8 <_fseeko_r+0x78>
   107f0:	8080030b 	ldhu	r2,12(r16)
   107f4:	003f7006 	br	105b8 <_fseeko_r+0x178>
   107f8:	8140038f 	ldh	r5,14(r16)
   107fc:	283f4716 	blt	r5,zero,1051c <_fseeko_r+0xdc>
   10800:	d80d883a 	mov	r6,sp
   10804:	8809883a 	mov	r4,r17
   10808:	00108a00 	call	108a0 <_fstat_r>
   1080c:	1000041e 	bne	r2,zero,10820 <_fseeko_r+0x3e0>
   10810:	d8800117 	ldw	r2,4(sp)
   10814:	00e00014 	movui	r3,32768
   10818:	10bc000c 	andi	r2,r2,61440
   1081c:	10ff7c26 	beq	r2,r3,10610 <_fseeko_r+0x1d0>
   10820:	8080030b 	ldhu	r2,12(r16)
   10824:	003f3d06 	br	1051c <_fseeko_r+0xdc>
   10828:	800b883a 	mov	r5,r16
   1082c:	8809883a 	mov	r4,r17
   10830:	00108fc0 	call	108fc <__smakebuf_r>
   10834:	003f3106 	br	104fc <_fseeko_r+0xbc>
   10838:	81400717 	ldw	r5,28(r16)
   1083c:	01c00044 	movi	r7,1
   10840:	000d883a 	mov	r6,zero
   10844:	8809883a 	mov	r4,r17
   10848:	a03ee83a 	callr	r20
   1084c:	00ffffc4 	movi	r3,-1
   10850:	10ff7b1e 	bne	r2,r3,10640 <_fseeko_r+0x200>
   10854:	003f3306 	br	10524 <_fseeko_r+0xe4>
   10858:	80c00017 	ldw	r3,0(r16)
   1085c:	80800417 	ldw	r2,16(r16)
   10860:	000b883a 	mov	r5,zero
   10864:	1887c83a 	sub	r3,r3,r2
   10868:	98e7c83a 	sub	r19,r19,r3
   1086c:	30c7883a 	add	r3,r6,r3
   10870:	003f7f06 	br	10670 <_fseeko_r+0x230>
   10874:	00800744 	movi	r2,29
   10878:	88800015 	stw	r2,0(r17)
   1087c:	04ffffc4 	movi	r19,-1
   10880:	003f0e06 	br	104bc <_fseeko_r+0x7c>

00010884 <fseeko>:
   10884:	00800074 	movhi	r2,1
   10888:	109d3d04 	addi	r2,r2,29940
   1088c:	300f883a 	mov	r7,r6
   10890:	280d883a 	mov	r6,r5
   10894:	200b883a 	mov	r5,r4
   10898:	11000017 	ldw	r4,0(r2)
   1089c:	00104401 	jmpi	10440 <_fseeko_r>

000108a0 <_fstat_r>:
   108a0:	defffd04 	addi	sp,sp,-12
   108a4:	2805883a 	mov	r2,r5
   108a8:	dc000015 	stw	r16,0(sp)
   108ac:	040000b4 	movhi	r16,2
   108b0:	dc400115 	stw	r17,4(sp)
   108b4:	8423f004 	addi	r16,r16,-28736
   108b8:	2023883a 	mov	r17,r4
   108bc:	300b883a 	mov	r5,r6
   108c0:	1009883a 	mov	r4,r2
   108c4:	dfc00215 	stw	ra,8(sp)
   108c8:	80000015 	stw	zero,0(r16)
   108cc:	00128fc0 	call	128fc <fstat>
   108d0:	00ffffc4 	movi	r3,-1
   108d4:	10c00526 	beq	r2,r3,108ec <_fstat_r+0x4c>
   108d8:	dfc00217 	ldw	ra,8(sp)
   108dc:	dc400117 	ldw	r17,4(sp)
   108e0:	dc000017 	ldw	r16,0(sp)
   108e4:	dec00304 	addi	sp,sp,12
   108e8:	f800283a 	ret
   108ec:	80c00017 	ldw	r3,0(r16)
   108f0:	183ff926 	beq	r3,zero,108d8 <_fstat_r+0x38>
   108f4:	88c00015 	stw	r3,0(r17)
   108f8:	003ff706 	br	108d8 <_fstat_r+0x38>

000108fc <__smakebuf_r>:
   108fc:	2880030b 	ldhu	r2,12(r5)
   10900:	10c0008c 	andi	r3,r2,2
   10904:	1800411e 	bne	r3,zero,10a0c <__smakebuf_r+0x110>
   10908:	deffec04 	addi	sp,sp,-80
   1090c:	dc000f15 	stw	r16,60(sp)
   10910:	2821883a 	mov	r16,r5
   10914:	2940038f 	ldh	r5,14(r5)
   10918:	dc401015 	stw	r17,64(sp)
   1091c:	dfc01315 	stw	ra,76(sp)
   10920:	dcc01215 	stw	r19,72(sp)
   10924:	dc801115 	stw	r18,68(sp)
   10928:	2023883a 	mov	r17,r4
   1092c:	28001c16 	blt	r5,zero,109a0 <__smakebuf_r+0xa4>
   10930:	d80d883a 	mov	r6,sp
   10934:	00108a00 	call	108a0 <_fstat_r>
   10938:	10001816 	blt	r2,zero,1099c <__smakebuf_r+0xa0>
   1093c:	d8800117 	ldw	r2,4(sp)
   10940:	00e00014 	movui	r3,32768
   10944:	10bc000c 	andi	r2,r2,61440
   10948:	14c80020 	cmpeqi	r19,r2,8192
   1094c:	10c03726 	beq	r2,r3,10a2c <__smakebuf_r+0x130>
   10950:	80c0030b 	ldhu	r3,12(r16)
   10954:	18c20014 	ori	r3,r3,2048
   10958:	80c0030d 	sth	r3,12(r16)
   1095c:	00c80004 	movi	r3,8192
   10960:	10c0521e 	bne	r2,r3,10aac <__smakebuf_r+0x1b0>
   10964:	8140038f 	ldh	r5,14(r16)
   10968:	8809883a 	mov	r4,r17
   1096c:	00125400 	call	12540 <_isatty_r>
   10970:	10004c26 	beq	r2,zero,10aa4 <__smakebuf_r+0x1a8>
   10974:	8080030b 	ldhu	r2,12(r16)
   10978:	80c010c4 	addi	r3,r16,67
   1097c:	80c00015 	stw	r3,0(r16)
   10980:	10800054 	ori	r2,r2,1
   10984:	8080030d 	sth	r2,12(r16)
   10988:	00800044 	movi	r2,1
   1098c:	80c00415 	stw	r3,16(r16)
   10990:	80800515 	stw	r2,20(r16)
   10994:	04810004 	movi	r18,1024
   10998:	00000706 	br	109b8 <__smakebuf_r+0xbc>
   1099c:	8080030b 	ldhu	r2,12(r16)
   109a0:	10c0200c 	andi	r3,r2,128
   109a4:	18001f1e 	bne	r3,zero,10a24 <__smakebuf_r+0x128>
   109a8:	04810004 	movi	r18,1024
   109ac:	10820014 	ori	r2,r2,2048
   109b0:	8080030d 	sth	r2,12(r16)
   109b4:	0027883a 	mov	r19,zero
   109b8:	900b883a 	mov	r5,r18
   109bc:	8809883a 	mov	r4,r17
   109c0:	0010ab80 	call	10ab8 <_malloc_r>
   109c4:	10002c26 	beq	r2,zero,10a78 <__smakebuf_r+0x17c>
   109c8:	80c0030b 	ldhu	r3,12(r16)
   109cc:	01000074 	movhi	r4,1
   109d0:	2106cc04 	addi	r4,r4,6960
   109d4:	89000f15 	stw	r4,60(r17)
   109d8:	18c02014 	ori	r3,r3,128
   109dc:	80c0030d 	sth	r3,12(r16)
   109e0:	80800015 	stw	r2,0(r16)
   109e4:	80800415 	stw	r2,16(r16)
   109e8:	84800515 	stw	r18,20(r16)
   109ec:	98001a1e 	bne	r19,zero,10a58 <__smakebuf_r+0x15c>
   109f0:	dfc01317 	ldw	ra,76(sp)
   109f4:	dcc01217 	ldw	r19,72(sp)
   109f8:	dc801117 	ldw	r18,68(sp)
   109fc:	dc401017 	ldw	r17,64(sp)
   10a00:	dc000f17 	ldw	r16,60(sp)
   10a04:	dec01404 	addi	sp,sp,80
   10a08:	f800283a 	ret
   10a0c:	288010c4 	addi	r2,r5,67
   10a10:	28800015 	stw	r2,0(r5)
   10a14:	28800415 	stw	r2,16(r5)
   10a18:	00800044 	movi	r2,1
   10a1c:	28800515 	stw	r2,20(r5)
   10a20:	f800283a 	ret
   10a24:	04801004 	movi	r18,64
   10a28:	003fe006 	br	109ac <__smakebuf_r+0xb0>
   10a2c:	81000a17 	ldw	r4,40(r16)
   10a30:	00c00074 	movhi	r3,1
   10a34:	18c5da04 	addi	r3,r3,5992
   10a38:	20ffc51e 	bne	r4,r3,10950 <__smakebuf_r+0x54>
   10a3c:	8080030b 	ldhu	r2,12(r16)
   10a40:	04810004 	movi	r18,1024
   10a44:	84801315 	stw	r18,76(r16)
   10a48:	1484b03a 	or	r2,r2,r18
   10a4c:	8080030d 	sth	r2,12(r16)
   10a50:	0027883a 	mov	r19,zero
   10a54:	003fd806 	br	109b8 <__smakebuf_r+0xbc>
   10a58:	8140038f 	ldh	r5,14(r16)
   10a5c:	8809883a 	mov	r4,r17
   10a60:	00125400 	call	12540 <_isatty_r>
   10a64:	103fe226 	beq	r2,zero,109f0 <__smakebuf_r+0xf4>
   10a68:	8080030b 	ldhu	r2,12(r16)
   10a6c:	10800054 	ori	r2,r2,1
   10a70:	8080030d 	sth	r2,12(r16)
   10a74:	003fde06 	br	109f0 <__smakebuf_r+0xf4>
   10a78:	8080030b 	ldhu	r2,12(r16)
   10a7c:	10c0800c 	andi	r3,r2,512
   10a80:	183fdb1e 	bne	r3,zero,109f0 <__smakebuf_r+0xf4>
   10a84:	10800094 	ori	r2,r2,2
   10a88:	80c010c4 	addi	r3,r16,67
   10a8c:	8080030d 	sth	r2,12(r16)
   10a90:	00800044 	movi	r2,1
   10a94:	80c00015 	stw	r3,0(r16)
   10a98:	80c00415 	stw	r3,16(r16)
   10a9c:	80800515 	stw	r2,20(r16)
   10aa0:	003fd306 	br	109f0 <__smakebuf_r+0xf4>
   10aa4:	04810004 	movi	r18,1024
   10aa8:	003fc306 	br	109b8 <__smakebuf_r+0xbc>
   10aac:	0027883a 	mov	r19,zero
   10ab0:	04810004 	movi	r18,1024
   10ab4:	003fc006 	br	109b8 <__smakebuf_r+0xbc>

00010ab8 <_malloc_r>:
   10ab8:	defff504 	addi	sp,sp,-44
   10abc:	dc800315 	stw	r18,12(sp)
   10ac0:	dfc00a15 	stw	ra,40(sp)
   10ac4:	df000915 	stw	fp,36(sp)
   10ac8:	ddc00815 	stw	r23,32(sp)
   10acc:	dd800715 	stw	r22,28(sp)
   10ad0:	dd400615 	stw	r21,24(sp)
   10ad4:	dd000515 	stw	r20,20(sp)
   10ad8:	dcc00415 	stw	r19,16(sp)
   10adc:	dc400215 	stw	r17,8(sp)
   10ae0:	dc000115 	stw	r16,4(sp)
   10ae4:	288002c4 	addi	r2,r5,11
   10ae8:	00c00584 	movi	r3,22
   10aec:	2025883a 	mov	r18,r4
   10af0:	18807f2e 	bgeu	r3,r2,10cf0 <_malloc_r+0x238>
   10af4:	047ffe04 	movi	r17,-8
   10af8:	1462703a 	and	r17,r2,r17
   10afc:	8800a316 	blt	r17,zero,10d8c <_malloc_r+0x2d4>
   10b00:	8940a236 	bltu	r17,r5,10d8c <_malloc_r+0x2d4>
   10b04:	0012d1c0 	call	12d1c <__malloc_lock>
   10b08:	00807dc4 	movi	r2,503
   10b0c:	1441e92e 	bgeu	r2,r17,112b4 <_malloc_r+0x7fc>
   10b10:	8804d27a 	srli	r2,r17,9
   10b14:	1000a126 	beq	r2,zero,10d9c <_malloc_r+0x2e4>
   10b18:	00c00104 	movi	r3,4
   10b1c:	18811e36 	bltu	r3,r2,10f98 <_malloc_r+0x4e0>
   10b20:	8804d1ba 	srli	r2,r17,6
   10b24:	12000e44 	addi	r8,r2,57
   10b28:	11c00e04 	addi	r7,r2,56
   10b2c:	4209883a 	add	r4,r8,r8
   10b30:	04c00074 	movhi	r19,1
   10b34:	2109883a 	add	r4,r4,r4
   10b38:	9cd7ad04 	addi	r19,r19,24244
   10b3c:	2109883a 	add	r4,r4,r4
   10b40:	9909883a 	add	r4,r19,r4
   10b44:	24000117 	ldw	r16,4(r4)
   10b48:	213ffe04 	addi	r4,r4,-8
   10b4c:	24009726 	beq	r4,r16,10dac <_malloc_r+0x2f4>
   10b50:	80800117 	ldw	r2,4(r16)
   10b54:	01bfff04 	movi	r6,-4
   10b58:	014003c4 	movi	r5,15
   10b5c:	1184703a 	and	r2,r2,r6
   10b60:	1447c83a 	sub	r3,r2,r17
   10b64:	28c00716 	blt	r5,r3,10b84 <_malloc_r+0xcc>
   10b68:	1800920e 	bge	r3,zero,10db4 <_malloc_r+0x2fc>
   10b6c:	84000317 	ldw	r16,12(r16)
   10b70:	24008e26 	beq	r4,r16,10dac <_malloc_r+0x2f4>
   10b74:	80800117 	ldw	r2,4(r16)
   10b78:	1184703a 	and	r2,r2,r6
   10b7c:	1447c83a 	sub	r3,r2,r17
   10b80:	28fff90e 	bge	r5,r3,10b68 <_malloc_r+0xb0>
   10b84:	3809883a 	mov	r4,r7
   10b88:	01800074 	movhi	r6,1
   10b8c:	9c000417 	ldw	r16,16(r19)
   10b90:	3197ad04 	addi	r6,r6,24244
   10b94:	32000204 	addi	r8,r6,8
   10b98:	82013426 	beq	r16,r8,1106c <_malloc_r+0x5b4>
   10b9c:	80c00117 	ldw	r3,4(r16)
   10ba0:	00bfff04 	movi	r2,-4
   10ba4:	188e703a 	and	r7,r3,r2
   10ba8:	3c45c83a 	sub	r2,r7,r17
   10bac:	00c003c4 	movi	r3,15
   10bb0:	18811f16 	blt	r3,r2,11030 <_malloc_r+0x578>
   10bb4:	32000515 	stw	r8,20(r6)
   10bb8:	32000415 	stw	r8,16(r6)
   10bbc:	10007f0e 	bge	r2,zero,10dbc <_malloc_r+0x304>
   10bc0:	00807fc4 	movi	r2,511
   10bc4:	11c0fd36 	bltu	r2,r7,10fbc <_malloc_r+0x504>
   10bc8:	3806d0fa 	srli	r3,r7,3
   10bcc:	01c00044 	movi	r7,1
   10bd0:	30800117 	ldw	r2,4(r6)
   10bd4:	19400044 	addi	r5,r3,1
   10bd8:	294b883a 	add	r5,r5,r5
   10bdc:	1807d0ba 	srai	r3,r3,2
   10be0:	294b883a 	add	r5,r5,r5
   10be4:	294b883a 	add	r5,r5,r5
   10be8:	298b883a 	add	r5,r5,r6
   10bec:	38c6983a 	sll	r3,r7,r3
   10bf0:	29c00017 	ldw	r7,0(r5)
   10bf4:	2a7ffe04 	addi	r9,r5,-8
   10bf8:	1886b03a 	or	r3,r3,r2
   10bfc:	82400315 	stw	r9,12(r16)
   10c00:	81c00215 	stw	r7,8(r16)
   10c04:	30c00115 	stw	r3,4(r6)
   10c08:	2c000015 	stw	r16,0(r5)
   10c0c:	3c000315 	stw	r16,12(r7)
   10c10:	2005d0ba 	srai	r2,r4,2
   10c14:	01400044 	movi	r5,1
   10c18:	288a983a 	sll	r5,r5,r2
   10c1c:	19406f36 	bltu	r3,r5,10ddc <_malloc_r+0x324>
   10c20:	28c4703a 	and	r2,r5,r3
   10c24:	10000a1e 	bne	r2,zero,10c50 <_malloc_r+0x198>
   10c28:	00bfff04 	movi	r2,-4
   10c2c:	294b883a 	add	r5,r5,r5
   10c30:	2088703a 	and	r4,r4,r2
   10c34:	28c4703a 	and	r2,r5,r3
   10c38:	21000104 	addi	r4,r4,4
   10c3c:	1000041e 	bne	r2,zero,10c50 <_malloc_r+0x198>
   10c40:	294b883a 	add	r5,r5,r5
   10c44:	28c4703a 	and	r2,r5,r3
   10c48:	21000104 	addi	r4,r4,4
   10c4c:	103ffc26 	beq	r2,zero,10c40 <_malloc_r+0x188>
   10c50:	02bfff04 	movi	r10,-4
   10c54:	024003c4 	movi	r9,15
   10c58:	21800044 	addi	r6,r4,1
   10c5c:	318d883a 	add	r6,r6,r6
   10c60:	318d883a 	add	r6,r6,r6
   10c64:	318d883a 	add	r6,r6,r6
   10c68:	998d883a 	add	r6,r19,r6
   10c6c:	333ffe04 	addi	r12,r6,-8
   10c70:	2017883a 	mov	r11,r4
   10c74:	31800104 	addi	r6,r6,4
   10c78:	34000017 	ldw	r16,0(r6)
   10c7c:	31fffd04 	addi	r7,r6,-12
   10c80:	81c0041e 	bne	r16,r7,10c94 <_malloc_r+0x1dc>
   10c84:	0000fb06 	br	11074 <_malloc_r+0x5bc>
   10c88:	1801030e 	bge	r3,zero,11098 <_malloc_r+0x5e0>
   10c8c:	84000317 	ldw	r16,12(r16)
   10c90:	81c0f826 	beq	r16,r7,11074 <_malloc_r+0x5bc>
   10c94:	80800117 	ldw	r2,4(r16)
   10c98:	1284703a 	and	r2,r2,r10
   10c9c:	1447c83a 	sub	r3,r2,r17
   10ca0:	48fff90e 	bge	r9,r3,10c88 <_malloc_r+0x1d0>
   10ca4:	80800317 	ldw	r2,12(r16)
   10ca8:	81000217 	ldw	r4,8(r16)
   10cac:	89400054 	ori	r5,r17,1
   10cb0:	81400115 	stw	r5,4(r16)
   10cb4:	20800315 	stw	r2,12(r4)
   10cb8:	11000215 	stw	r4,8(r2)
   10cbc:	8463883a 	add	r17,r16,r17
   10cc0:	9c400515 	stw	r17,20(r19)
   10cc4:	9c400415 	stw	r17,16(r19)
   10cc8:	18800054 	ori	r2,r3,1
   10ccc:	88800115 	stw	r2,4(r17)
   10cd0:	8a000315 	stw	r8,12(r17)
   10cd4:	8a000215 	stw	r8,8(r17)
   10cd8:	88e3883a 	add	r17,r17,r3
   10cdc:	88c00015 	stw	r3,0(r17)
   10ce0:	9009883a 	mov	r4,r18
   10ce4:	0012d400 	call	12d40 <__malloc_unlock>
   10ce8:	80800204 	addi	r2,r16,8
   10cec:	00001b06 	br	10d5c <_malloc_r+0x2a4>
   10cf0:	04400404 	movi	r17,16
   10cf4:	89402536 	bltu	r17,r5,10d8c <_malloc_r+0x2d4>
   10cf8:	0012d1c0 	call	12d1c <__malloc_lock>
   10cfc:	00800184 	movi	r2,6
   10d00:	01000084 	movi	r4,2
   10d04:	04c00074 	movhi	r19,1
   10d08:	1085883a 	add	r2,r2,r2
   10d0c:	9cd7ad04 	addi	r19,r19,24244
   10d10:	1085883a 	add	r2,r2,r2
   10d14:	9885883a 	add	r2,r19,r2
   10d18:	14000117 	ldw	r16,4(r2)
   10d1c:	10fffe04 	addi	r3,r2,-8
   10d20:	80c0d926 	beq	r16,r3,11088 <_malloc_r+0x5d0>
   10d24:	80c00117 	ldw	r3,4(r16)
   10d28:	81000317 	ldw	r4,12(r16)
   10d2c:	00bfff04 	movi	r2,-4
   10d30:	1884703a 	and	r2,r3,r2
   10d34:	81400217 	ldw	r5,8(r16)
   10d38:	8085883a 	add	r2,r16,r2
   10d3c:	10c00117 	ldw	r3,4(r2)
   10d40:	29000315 	stw	r4,12(r5)
   10d44:	21400215 	stw	r5,8(r4)
   10d48:	18c00054 	ori	r3,r3,1
   10d4c:	10c00115 	stw	r3,4(r2)
   10d50:	9009883a 	mov	r4,r18
   10d54:	0012d400 	call	12d40 <__malloc_unlock>
   10d58:	80800204 	addi	r2,r16,8
   10d5c:	dfc00a17 	ldw	ra,40(sp)
   10d60:	df000917 	ldw	fp,36(sp)
   10d64:	ddc00817 	ldw	r23,32(sp)
   10d68:	dd800717 	ldw	r22,28(sp)
   10d6c:	dd400617 	ldw	r21,24(sp)
   10d70:	dd000517 	ldw	r20,20(sp)
   10d74:	dcc00417 	ldw	r19,16(sp)
   10d78:	dc800317 	ldw	r18,12(sp)
   10d7c:	dc400217 	ldw	r17,8(sp)
   10d80:	dc000117 	ldw	r16,4(sp)
   10d84:	dec00b04 	addi	sp,sp,44
   10d88:	f800283a 	ret
   10d8c:	00800304 	movi	r2,12
   10d90:	90800015 	stw	r2,0(r18)
   10d94:	0005883a 	mov	r2,zero
   10d98:	003ff006 	br	10d5c <_malloc_r+0x2a4>
   10d9c:	01002004 	movi	r4,128
   10da0:	02001004 	movi	r8,64
   10da4:	01c00fc4 	movi	r7,63
   10da8:	003f6106 	br	10b30 <_malloc_r+0x78>
   10dac:	4009883a 	mov	r4,r8
   10db0:	003f7506 	br	10b88 <_malloc_r+0xd0>
   10db4:	81000317 	ldw	r4,12(r16)
   10db8:	003fde06 	br	10d34 <_malloc_r+0x27c>
   10dbc:	81c5883a 	add	r2,r16,r7
   10dc0:	11400117 	ldw	r5,4(r2)
   10dc4:	9009883a 	mov	r4,r18
   10dc8:	29400054 	ori	r5,r5,1
   10dcc:	11400115 	stw	r5,4(r2)
   10dd0:	0012d400 	call	12d40 <__malloc_unlock>
   10dd4:	80800204 	addi	r2,r16,8
   10dd8:	003fe006 	br	10d5c <_malloc_r+0x2a4>
   10ddc:	9c000217 	ldw	r16,8(r19)
   10de0:	00bfff04 	movi	r2,-4
   10de4:	85800117 	ldw	r22,4(r16)
   10de8:	b0ac703a 	and	r22,r22,r2
   10dec:	b4400336 	bltu	r22,r17,10dfc <_malloc_r+0x344>
   10df0:	b445c83a 	sub	r2,r22,r17
   10df4:	00c003c4 	movi	r3,15
   10df8:	18805d16 	blt	r3,r2,10f70 <_malloc_r+0x4b8>
   10dfc:	05c00074 	movhi	r23,1
   10e00:	008000b4 	movhi	r2,2
   10e04:	10a3f304 	addi	r2,r2,-28724
   10e08:	bddd3e04 	addi	r23,r23,29944
   10e0c:	15400017 	ldw	r21,0(r2)
   10e10:	b8c00017 	ldw	r3,0(r23)
   10e14:	00bfffc4 	movi	r2,-1
   10e18:	858d883a 	add	r6,r16,r22
   10e1c:	8d6b883a 	add	r21,r17,r21
   10e20:	1880ea26 	beq	r3,r2,111cc <_malloc_r+0x714>
   10e24:	ad4403c4 	addi	r21,r21,4111
   10e28:	00bc0004 	movi	r2,-4096
   10e2c:	a8aa703a 	and	r21,r21,r2
   10e30:	a80b883a 	mov	r5,r21
   10e34:	9009883a 	mov	r4,r18
   10e38:	d9800015 	stw	r6,0(sp)
   10e3c:	001163c0 	call	1163c <_sbrk_r>
   10e40:	1029883a 	mov	r20,r2
   10e44:	00bfffc4 	movi	r2,-1
   10e48:	d9800017 	ldw	r6,0(sp)
   10e4c:	a080e826 	beq	r20,r2,111f0 <_malloc_r+0x738>
   10e50:	a180a636 	bltu	r20,r6,110ec <_malloc_r+0x634>
   10e54:	070000b4 	movhi	fp,2
   10e58:	e723fb04 	addi	fp,fp,-28692
   10e5c:	e0800017 	ldw	r2,0(fp)
   10e60:	a887883a 	add	r3,r21,r2
   10e64:	e0c00015 	stw	r3,0(fp)
   10e68:	3500e626 	beq	r6,r20,11204 <_malloc_r+0x74c>
   10e6c:	b9000017 	ldw	r4,0(r23)
   10e70:	00bfffc4 	movi	r2,-1
   10e74:	2080ee26 	beq	r4,r2,11230 <_malloc_r+0x778>
   10e78:	a185c83a 	sub	r2,r20,r6
   10e7c:	10c5883a 	add	r2,r2,r3
   10e80:	e0800015 	stw	r2,0(fp)
   10e84:	a0c001cc 	andi	r3,r20,7
   10e88:	1800bc26 	beq	r3,zero,1117c <_malloc_r+0x6c4>
   10e8c:	a0e9c83a 	sub	r20,r20,r3
   10e90:	00840204 	movi	r2,4104
   10e94:	a5000204 	addi	r20,r20,8
   10e98:	10c7c83a 	sub	r3,r2,r3
   10e9c:	a545883a 	add	r2,r20,r21
   10ea0:	1083ffcc 	andi	r2,r2,4095
   10ea4:	18abc83a 	sub	r21,r3,r2
   10ea8:	a80b883a 	mov	r5,r21
   10eac:	9009883a 	mov	r4,r18
   10eb0:	001163c0 	call	1163c <_sbrk_r>
   10eb4:	00ffffc4 	movi	r3,-1
   10eb8:	10c0e126 	beq	r2,r3,11240 <_malloc_r+0x788>
   10ebc:	1505c83a 	sub	r2,r2,r20
   10ec0:	1545883a 	add	r2,r2,r21
   10ec4:	10800054 	ori	r2,r2,1
   10ec8:	e0c00017 	ldw	r3,0(fp)
   10ecc:	9d000215 	stw	r20,8(r19)
   10ed0:	a0800115 	stw	r2,4(r20)
   10ed4:	a8c7883a 	add	r3,r21,r3
   10ed8:	e0c00015 	stw	r3,0(fp)
   10edc:	84c00e26 	beq	r16,r19,10f18 <_malloc_r+0x460>
   10ee0:	018003c4 	movi	r6,15
   10ee4:	3580a72e 	bgeu	r6,r22,11184 <_malloc_r+0x6cc>
   10ee8:	81400117 	ldw	r5,4(r16)
   10eec:	013ffe04 	movi	r4,-8
   10ef0:	b0bffd04 	addi	r2,r22,-12
   10ef4:	1104703a 	and	r2,r2,r4
   10ef8:	2900004c 	andi	r4,r5,1
   10efc:	2088b03a 	or	r4,r4,r2
   10f00:	81000115 	stw	r4,4(r16)
   10f04:	01400144 	movi	r5,5
   10f08:	8089883a 	add	r4,r16,r2
   10f0c:	21400115 	stw	r5,4(r4)
   10f10:	21400215 	stw	r5,8(r4)
   10f14:	3080cd36 	bltu	r6,r2,1124c <_malloc_r+0x794>
   10f18:	008000b4 	movhi	r2,2
   10f1c:	10a3f204 	addi	r2,r2,-28728
   10f20:	11000017 	ldw	r4,0(r2)
   10f24:	20c0012e 	bgeu	r4,r3,10f2c <_malloc_r+0x474>
   10f28:	10c00015 	stw	r3,0(r2)
   10f2c:	008000b4 	movhi	r2,2
   10f30:	10a3f104 	addi	r2,r2,-28732
   10f34:	11000017 	ldw	r4,0(r2)
   10f38:	9c000217 	ldw	r16,8(r19)
   10f3c:	20c0012e 	bgeu	r4,r3,10f44 <_malloc_r+0x48c>
   10f40:	10c00015 	stw	r3,0(r2)
   10f44:	80c00117 	ldw	r3,4(r16)
   10f48:	00bfff04 	movi	r2,-4
   10f4c:	1886703a 	and	r3,r3,r2
   10f50:	1c45c83a 	sub	r2,r3,r17
   10f54:	1c400236 	bltu	r3,r17,10f60 <_malloc_r+0x4a8>
   10f58:	00c003c4 	movi	r3,15
   10f5c:	18800416 	blt	r3,r2,10f70 <_malloc_r+0x4b8>
   10f60:	9009883a 	mov	r4,r18
   10f64:	0012d400 	call	12d40 <__malloc_unlock>
   10f68:	0005883a 	mov	r2,zero
   10f6c:	003f7b06 	br	10d5c <_malloc_r+0x2a4>
   10f70:	88c00054 	ori	r3,r17,1
   10f74:	80c00115 	stw	r3,4(r16)
   10f78:	8463883a 	add	r17,r16,r17
   10f7c:	10800054 	ori	r2,r2,1
   10f80:	9c400215 	stw	r17,8(r19)
   10f84:	88800115 	stw	r2,4(r17)
   10f88:	9009883a 	mov	r4,r18
   10f8c:	0012d400 	call	12d40 <__malloc_unlock>
   10f90:	80800204 	addi	r2,r16,8
   10f94:	003f7106 	br	10d5c <_malloc_r+0x2a4>
   10f98:	00c00504 	movi	r3,20
   10f9c:	18804a2e 	bgeu	r3,r2,110c8 <_malloc_r+0x610>
   10fa0:	00c01504 	movi	r3,84
   10fa4:	18806e36 	bltu	r3,r2,11160 <_malloc_r+0x6a8>
   10fa8:	8804d33a 	srli	r2,r17,12
   10fac:	12001bc4 	addi	r8,r2,111
   10fb0:	11c01b84 	addi	r7,r2,110
   10fb4:	4209883a 	add	r4,r8,r8
   10fb8:	003edd06 	br	10b30 <_malloc_r+0x78>
   10fbc:	3804d27a 	srli	r2,r7,9
   10fc0:	00c00104 	movi	r3,4
   10fc4:	1880442e 	bgeu	r3,r2,110d8 <_malloc_r+0x620>
   10fc8:	00c00504 	movi	r3,20
   10fcc:	18808136 	bltu	r3,r2,111d4 <_malloc_r+0x71c>
   10fd0:	11401704 	addi	r5,r2,92
   10fd4:	10c016c4 	addi	r3,r2,91
   10fd8:	294b883a 	add	r5,r5,r5
   10fdc:	294b883a 	add	r5,r5,r5
   10fe0:	294b883a 	add	r5,r5,r5
   10fe4:	994b883a 	add	r5,r19,r5
   10fe8:	28800017 	ldw	r2,0(r5)
   10fec:	01800074 	movhi	r6,1
   10ff0:	297ffe04 	addi	r5,r5,-8
   10ff4:	3197ad04 	addi	r6,r6,24244
   10ff8:	28806526 	beq	r5,r2,11190 <_malloc_r+0x6d8>
   10ffc:	01bfff04 	movi	r6,-4
   11000:	10c00117 	ldw	r3,4(r2)
   11004:	1986703a 	and	r3,r3,r6
   11008:	38c0022e 	bgeu	r7,r3,11014 <_malloc_r+0x55c>
   1100c:	10800217 	ldw	r2,8(r2)
   11010:	28bffb1e 	bne	r5,r2,11000 <_malloc_r+0x548>
   11014:	11400317 	ldw	r5,12(r2)
   11018:	98c00117 	ldw	r3,4(r19)
   1101c:	81400315 	stw	r5,12(r16)
   11020:	80800215 	stw	r2,8(r16)
   11024:	2c000215 	stw	r16,8(r5)
   11028:	14000315 	stw	r16,12(r2)
   1102c:	003ef806 	br	10c10 <_malloc_r+0x158>
   11030:	88c00054 	ori	r3,r17,1
   11034:	80c00115 	stw	r3,4(r16)
   11038:	8463883a 	add	r17,r16,r17
   1103c:	34400515 	stw	r17,20(r6)
   11040:	34400415 	stw	r17,16(r6)
   11044:	10c00054 	ori	r3,r2,1
   11048:	8a000315 	stw	r8,12(r17)
   1104c:	8a000215 	stw	r8,8(r17)
   11050:	88c00115 	stw	r3,4(r17)
   11054:	88a3883a 	add	r17,r17,r2
   11058:	88800015 	stw	r2,0(r17)
   1105c:	9009883a 	mov	r4,r18
   11060:	0012d400 	call	12d40 <__malloc_unlock>
   11064:	80800204 	addi	r2,r16,8
   11068:	003f3c06 	br	10d5c <_malloc_r+0x2a4>
   1106c:	30c00117 	ldw	r3,4(r6)
   11070:	003ee706 	br	10c10 <_malloc_r+0x158>
   11074:	5ac00044 	addi	r11,r11,1
   11078:	588000cc 	andi	r2,r11,3
   1107c:	31800204 	addi	r6,r6,8
   11080:	103efd1e 	bne	r2,zero,10c78 <_malloc_r+0x1c0>
   11084:	00002406 	br	11118 <_malloc_r+0x660>
   11088:	14000317 	ldw	r16,12(r2)
   1108c:	143f251e 	bne	r2,r16,10d24 <_malloc_r+0x26c>
   11090:	21000084 	addi	r4,r4,2
   11094:	003ebc06 	br	10b88 <_malloc_r+0xd0>
   11098:	8085883a 	add	r2,r16,r2
   1109c:	10c00117 	ldw	r3,4(r2)
   110a0:	81000317 	ldw	r4,12(r16)
   110a4:	81400217 	ldw	r5,8(r16)
   110a8:	18c00054 	ori	r3,r3,1
   110ac:	10c00115 	stw	r3,4(r2)
   110b0:	29000315 	stw	r4,12(r5)
   110b4:	21400215 	stw	r5,8(r4)
   110b8:	9009883a 	mov	r4,r18
   110bc:	0012d400 	call	12d40 <__malloc_unlock>
   110c0:	80800204 	addi	r2,r16,8
   110c4:	003f2506 	br	10d5c <_malloc_r+0x2a4>
   110c8:	12001704 	addi	r8,r2,92
   110cc:	11c016c4 	addi	r7,r2,91
   110d0:	4209883a 	add	r4,r8,r8
   110d4:	003e9606 	br	10b30 <_malloc_r+0x78>
   110d8:	3804d1ba 	srli	r2,r7,6
   110dc:	11400e44 	addi	r5,r2,57
   110e0:	10c00e04 	addi	r3,r2,56
   110e4:	294b883a 	add	r5,r5,r5
   110e8:	003fbc06 	br	10fdc <_malloc_r+0x524>
   110ec:	84ff5926 	beq	r16,r19,10e54 <_malloc_r+0x39c>
   110f0:	00800074 	movhi	r2,1
   110f4:	1097ad04 	addi	r2,r2,24244
   110f8:	14000217 	ldw	r16,8(r2)
   110fc:	00bfff04 	movi	r2,-4
   11100:	80c00117 	ldw	r3,4(r16)
   11104:	1886703a 	and	r3,r3,r2
   11108:	003f9106 	br	10f50 <_malloc_r+0x498>
   1110c:	60800217 	ldw	r2,8(r12)
   11110:	213fffc4 	addi	r4,r4,-1
   11114:	1300651e 	bne	r2,r12,112ac <_malloc_r+0x7f4>
   11118:	208000cc 	andi	r2,r4,3
   1111c:	633ffe04 	addi	r12,r12,-8
   11120:	103ffa1e 	bne	r2,zero,1110c <_malloc_r+0x654>
   11124:	98800117 	ldw	r2,4(r19)
   11128:	0146303a 	nor	r3,zero,r5
   1112c:	1884703a 	and	r2,r3,r2
   11130:	98800115 	stw	r2,4(r19)
   11134:	294b883a 	add	r5,r5,r5
   11138:	117f2836 	bltu	r2,r5,10ddc <_malloc_r+0x324>
   1113c:	283f2726 	beq	r5,zero,10ddc <_malloc_r+0x324>
   11140:	2886703a 	and	r3,r5,r2
   11144:	5809883a 	mov	r4,r11
   11148:	183ec31e 	bne	r3,zero,10c58 <_malloc_r+0x1a0>
   1114c:	294b883a 	add	r5,r5,r5
   11150:	2886703a 	and	r3,r5,r2
   11154:	21000104 	addi	r4,r4,4
   11158:	183ffc26 	beq	r3,zero,1114c <_malloc_r+0x694>
   1115c:	003ebe06 	br	10c58 <_malloc_r+0x1a0>
   11160:	00c05504 	movi	r3,340
   11164:	18801236 	bltu	r3,r2,111b0 <_malloc_r+0x6f8>
   11168:	8804d3fa 	srli	r2,r17,15
   1116c:	12001e04 	addi	r8,r2,120
   11170:	11c01dc4 	addi	r7,r2,119
   11174:	4209883a 	add	r4,r8,r8
   11178:	003e6d06 	br	10b30 <_malloc_r+0x78>
   1117c:	00c40004 	movi	r3,4096
   11180:	003f4606 	br	10e9c <_malloc_r+0x3e4>
   11184:	00800044 	movi	r2,1
   11188:	a0800115 	stw	r2,4(r20)
   1118c:	003f7406 	br	10f60 <_malloc_r+0x4a8>
   11190:	1805d0ba 	srai	r2,r3,2
   11194:	01c00044 	movi	r7,1
   11198:	30c00117 	ldw	r3,4(r6)
   1119c:	388e983a 	sll	r7,r7,r2
   111a0:	2805883a 	mov	r2,r5
   111a4:	38c6b03a 	or	r3,r7,r3
   111a8:	30c00115 	stw	r3,4(r6)
   111ac:	003f9b06 	br	1101c <_malloc_r+0x564>
   111b0:	00c15504 	movi	r3,1364
   111b4:	18801a36 	bltu	r3,r2,11220 <_malloc_r+0x768>
   111b8:	8804d4ba 	srli	r2,r17,18
   111bc:	12001f44 	addi	r8,r2,125
   111c0:	11c01f04 	addi	r7,r2,124
   111c4:	4209883a 	add	r4,r8,r8
   111c8:	003e5906 	br	10b30 <_malloc_r+0x78>
   111cc:	ad400404 	addi	r21,r21,16
   111d0:	003f1706 	br	10e30 <_malloc_r+0x378>
   111d4:	00c01504 	movi	r3,84
   111d8:	18802336 	bltu	r3,r2,11268 <_malloc_r+0x7b0>
   111dc:	3804d33a 	srli	r2,r7,12
   111e0:	11401bc4 	addi	r5,r2,111
   111e4:	10c01b84 	addi	r3,r2,110
   111e8:	294b883a 	add	r5,r5,r5
   111ec:	003f7b06 	br	10fdc <_malloc_r+0x524>
   111f0:	9c000217 	ldw	r16,8(r19)
   111f4:	00bfff04 	movi	r2,-4
   111f8:	80c00117 	ldw	r3,4(r16)
   111fc:	1886703a 	and	r3,r3,r2
   11200:	003f5306 	br	10f50 <_malloc_r+0x498>
   11204:	3083ffcc 	andi	r2,r6,4095
   11208:	103f181e 	bne	r2,zero,10e6c <_malloc_r+0x3b4>
   1120c:	99000217 	ldw	r4,8(r19)
   11210:	b545883a 	add	r2,r22,r21
   11214:	10800054 	ori	r2,r2,1
   11218:	20800115 	stw	r2,4(r4)
   1121c:	003f3e06 	br	10f18 <_malloc_r+0x460>
   11220:	01003f84 	movi	r4,254
   11224:	02001fc4 	movi	r8,127
   11228:	01c01f84 	movi	r7,126
   1122c:	003e4006 	br	10b30 <_malloc_r+0x78>
   11230:	00800074 	movhi	r2,1
   11234:	109d3e04 	addi	r2,r2,29944
   11238:	15000015 	stw	r20,0(r2)
   1123c:	003f1106 	br	10e84 <_malloc_r+0x3cc>
   11240:	00800044 	movi	r2,1
   11244:	002b883a 	mov	r21,zero
   11248:	003f1f06 	br	10ec8 <_malloc_r+0x410>
   1124c:	81400204 	addi	r5,r16,8
   11250:	9009883a 	mov	r4,r18
   11254:	00120a80 	call	120a8 <_free_r>
   11258:	008000b4 	movhi	r2,2
   1125c:	10a3fb04 	addi	r2,r2,-28692
   11260:	10c00017 	ldw	r3,0(r2)
   11264:	003f2c06 	br	10f18 <_malloc_r+0x460>
   11268:	00c05504 	movi	r3,340
   1126c:	18800536 	bltu	r3,r2,11284 <_malloc_r+0x7cc>
   11270:	3804d3fa 	srli	r2,r7,15
   11274:	11401e04 	addi	r5,r2,120
   11278:	10c01dc4 	addi	r3,r2,119
   1127c:	294b883a 	add	r5,r5,r5
   11280:	003f5606 	br	10fdc <_malloc_r+0x524>
   11284:	00c15504 	movi	r3,1364
   11288:	18800536 	bltu	r3,r2,112a0 <_malloc_r+0x7e8>
   1128c:	3804d4ba 	srli	r2,r7,18
   11290:	11401f44 	addi	r5,r2,125
   11294:	10c01f04 	addi	r3,r2,124
   11298:	294b883a 	add	r5,r5,r5
   1129c:	003f4f06 	br	10fdc <_malloc_r+0x524>
   112a0:	01403f84 	movi	r5,254
   112a4:	00c01f84 	movi	r3,126
   112a8:	003f4c06 	br	10fdc <_malloc_r+0x524>
   112ac:	98800117 	ldw	r2,4(r19)
   112b0:	003fa006 	br	11134 <_malloc_r+0x67c>
   112b4:	8808d0fa 	srli	r4,r17,3
   112b8:	20800044 	addi	r2,r4,1
   112bc:	1085883a 	add	r2,r2,r2
   112c0:	003e9006 	br	10d04 <_malloc_r+0x24c>

000112c4 <memset>:
   112c4:	20c000cc 	andi	r3,r4,3
   112c8:	2005883a 	mov	r2,r4
   112cc:	18004426 	beq	r3,zero,113e0 <memset+0x11c>
   112d0:	31ffffc4 	addi	r7,r6,-1
   112d4:	30004026 	beq	r6,zero,113d8 <memset+0x114>
   112d8:	2813883a 	mov	r9,r5
   112dc:	200d883a 	mov	r6,r4
   112e0:	2007883a 	mov	r3,r4
   112e4:	00000406 	br	112f8 <memset+0x34>
   112e8:	3a3fffc4 	addi	r8,r7,-1
   112ec:	31800044 	addi	r6,r6,1
   112f0:	38003926 	beq	r7,zero,113d8 <memset+0x114>
   112f4:	400f883a 	mov	r7,r8
   112f8:	18c00044 	addi	r3,r3,1
   112fc:	32400005 	stb	r9,0(r6)
   11300:	1a0000cc 	andi	r8,r3,3
   11304:	403ff81e 	bne	r8,zero,112e8 <memset+0x24>
   11308:	010000c4 	movi	r4,3
   1130c:	21c02d2e 	bgeu	r4,r7,113c4 <memset+0x100>
   11310:	29003fcc 	andi	r4,r5,255
   11314:	200c923a 	slli	r6,r4,8
   11318:	3108b03a 	or	r4,r6,r4
   1131c:	200c943a 	slli	r6,r4,16
   11320:	218cb03a 	or	r6,r4,r6
   11324:	010003c4 	movi	r4,15
   11328:	21c0182e 	bgeu	r4,r7,1138c <memset+0xc8>
   1132c:	3b3ffc04 	addi	r12,r7,-16
   11330:	6018d13a 	srli	r12,r12,4
   11334:	1a000104 	addi	r8,r3,4
   11338:	1ac00204 	addi	r11,r3,8
   1133c:	6008913a 	slli	r4,r12,4
   11340:	1a800304 	addi	r10,r3,12
   11344:	1813883a 	mov	r9,r3
   11348:	21000504 	addi	r4,r4,20
   1134c:	1909883a 	add	r4,r3,r4
   11350:	49800015 	stw	r6,0(r9)
   11354:	41800015 	stw	r6,0(r8)
   11358:	59800015 	stw	r6,0(r11)
   1135c:	51800015 	stw	r6,0(r10)
   11360:	42000404 	addi	r8,r8,16
   11364:	4a400404 	addi	r9,r9,16
   11368:	5ac00404 	addi	r11,r11,16
   1136c:	52800404 	addi	r10,r10,16
   11370:	413ff71e 	bne	r8,r4,11350 <memset+0x8c>
   11374:	63000044 	addi	r12,r12,1
   11378:	6018913a 	slli	r12,r12,4
   1137c:	39c003cc 	andi	r7,r7,15
   11380:	010000c4 	movi	r4,3
   11384:	1b07883a 	add	r3,r3,r12
   11388:	21c00e2e 	bgeu	r4,r7,113c4 <memset+0x100>
   1138c:	1813883a 	mov	r9,r3
   11390:	3811883a 	mov	r8,r7
   11394:	010000c4 	movi	r4,3
   11398:	49800015 	stw	r6,0(r9)
   1139c:	423fff04 	addi	r8,r8,-4
   113a0:	4a400104 	addi	r9,r9,4
   113a4:	223ffc36 	bltu	r4,r8,11398 <memset+0xd4>
   113a8:	393fff04 	addi	r4,r7,-4
   113ac:	2008d0ba 	srli	r4,r4,2
   113b0:	39c000cc 	andi	r7,r7,3
   113b4:	21000044 	addi	r4,r4,1
   113b8:	2109883a 	add	r4,r4,r4
   113bc:	2109883a 	add	r4,r4,r4
   113c0:	1907883a 	add	r3,r3,r4
   113c4:	38000526 	beq	r7,zero,113dc <memset+0x118>
   113c8:	19cf883a 	add	r7,r3,r7
   113cc:	19400005 	stb	r5,0(r3)
   113d0:	18c00044 	addi	r3,r3,1
   113d4:	38fffd1e 	bne	r7,r3,113cc <memset+0x108>
   113d8:	f800283a 	ret
   113dc:	f800283a 	ret
   113e0:	2007883a 	mov	r3,r4
   113e4:	300f883a 	mov	r7,r6
   113e8:	003fc706 	br	11308 <memset+0x44>

000113ec <_open_r>:
   113ec:	defffd04 	addi	sp,sp,-12
   113f0:	2805883a 	mov	r2,r5
   113f4:	dc000015 	stw	r16,0(sp)
   113f8:	040000b4 	movhi	r16,2
   113fc:	dc400115 	stw	r17,4(sp)
   11400:	300b883a 	mov	r5,r6
   11404:	8423f004 	addi	r16,r16,-28736
   11408:	2023883a 	mov	r17,r4
   1140c:	380d883a 	mov	r6,r7
   11410:	1009883a 	mov	r4,r2
   11414:	dfc00215 	stw	ra,8(sp)
   11418:	80000015 	stw	zero,0(r16)
   1141c:	0012e8c0 	call	12e8c <open>
   11420:	00ffffc4 	movi	r3,-1
   11424:	10c00526 	beq	r2,r3,1143c <_open_r+0x50>
   11428:	dfc00217 	ldw	ra,8(sp)
   1142c:	dc400117 	ldw	r17,4(sp)
   11430:	dc000017 	ldw	r16,0(sp)
   11434:	dec00304 	addi	sp,sp,12
   11438:	f800283a 	ret
   1143c:	80c00017 	ldw	r3,0(r16)
   11440:	183ff926 	beq	r3,zero,11428 <_open_r+0x3c>
   11444:	88c00015 	stw	r3,0(r17)
   11448:	003ff706 	br	11428 <_open_r+0x3c>

0001144c <lflush>:
   1144c:	2080030b 	ldhu	r2,12(r4)
   11450:	00c00244 	movi	r3,9
   11454:	1080024c 	andi	r2,r2,9
   11458:	10c00226 	beq	r2,r3,11464 <lflush+0x18>
   1145c:	0005883a 	mov	r2,zero
   11460:	f800283a 	ret
   11464:	0011af81 	jmpi	11af8 <fflush>

00011468 <__srefill_r>:
   11468:	defffc04 	addi	sp,sp,-16
   1146c:	dc400115 	stw	r17,4(sp)
   11470:	dc000015 	stw	r16,0(sp)
   11474:	dfc00315 	stw	ra,12(sp)
   11478:	dc800215 	stw	r18,8(sp)
   1147c:	2023883a 	mov	r17,r4
   11480:	2821883a 	mov	r16,r5
   11484:	20000226 	beq	r4,zero,11490 <__srefill_r+0x28>
   11488:	20800e17 	ldw	r2,56(r4)
   1148c:	10003c26 	beq	r2,zero,11580 <__srefill_r+0x118>
   11490:	80c0030b 	ldhu	r3,12(r16)
   11494:	1908000c 	andi	r4,r3,8192
   11498:	1805883a 	mov	r2,r3
   1149c:	2000071e 	bne	r4,zero,114bc <__srefill_r+0x54>
   114a0:	81001917 	ldw	r4,100(r16)
   114a4:	18880014 	ori	r2,r3,8192
   114a8:	00f7ffc4 	movi	r3,-8193
   114ac:	20c8703a 	and	r4,r4,r3
   114b0:	8080030d 	sth	r2,12(r16)
   114b4:	1007883a 	mov	r3,r2
   114b8:	81001915 	stw	r4,100(r16)
   114bc:	80000115 	stw	zero,4(r16)
   114c0:	1100080c 	andi	r4,r2,32
   114c4:	2000571e 	bne	r4,zero,11624 <__srefill_r+0x1bc>
   114c8:	1100010c 	andi	r4,r2,4
   114cc:	20001f26 	beq	r4,zero,1154c <__srefill_r+0xe4>
   114d0:	81400c17 	ldw	r5,48(r16)
   114d4:	28000826 	beq	r5,zero,114f8 <__srefill_r+0x90>
   114d8:	80801004 	addi	r2,r16,64
   114dc:	28800226 	beq	r5,r2,114e8 <__srefill_r+0x80>
   114e0:	8809883a 	mov	r4,r17
   114e4:	00120a80 	call	120a8 <_free_r>
   114e8:	80800f17 	ldw	r2,60(r16)
   114ec:	80000c15 	stw	zero,48(r16)
   114f0:	80800115 	stw	r2,4(r16)
   114f4:	1000391e 	bne	r2,zero,115dc <__srefill_r+0x174>
   114f8:	80800417 	ldw	r2,16(r16)
   114fc:	10004b26 	beq	r2,zero,1162c <__srefill_r+0x1c4>
   11500:	8480030b 	ldhu	r18,12(r16)
   11504:	908000cc 	andi	r2,r18,3
   11508:	10001f1e 	bne	r2,zero,11588 <__srefill_r+0x120>
   1150c:	81800417 	ldw	r6,16(r16)
   11510:	80800817 	ldw	r2,32(r16)
   11514:	81c00517 	ldw	r7,20(r16)
   11518:	81400717 	ldw	r5,28(r16)
   1151c:	81800015 	stw	r6,0(r16)
   11520:	8809883a 	mov	r4,r17
   11524:	103ee83a 	callr	r2
   11528:	80800115 	stw	r2,4(r16)
   1152c:	00800e0e 	bge	zero,r2,11568 <__srefill_r+0x100>
   11530:	0005883a 	mov	r2,zero
   11534:	dfc00317 	ldw	ra,12(sp)
   11538:	dc800217 	ldw	r18,8(sp)
   1153c:	dc400117 	ldw	r17,4(sp)
   11540:	dc000017 	ldw	r16,0(sp)
   11544:	dec00404 	addi	sp,sp,16
   11548:	f800283a 	ret
   1154c:	1100040c 	andi	r4,r2,16
   11550:	20003026 	beq	r4,zero,11614 <__srefill_r+0x1ac>
   11554:	1080020c 	andi	r2,r2,8
   11558:	1000241e 	bne	r2,zero,115ec <__srefill_r+0x184>
   1155c:	18c00114 	ori	r3,r3,4
   11560:	80c0030d 	sth	r3,12(r16)
   11564:	003fe406 	br	114f8 <__srefill_r+0x90>
   11568:	80c0030b 	ldhu	r3,12(r16)
   1156c:	1000161e 	bne	r2,zero,115c8 <__srefill_r+0x160>
   11570:	18c00814 	ori	r3,r3,32
   11574:	00bfffc4 	movi	r2,-1
   11578:	80c0030d 	sth	r3,12(r16)
   1157c:	003fed06 	br	11534 <__srefill_r+0xcc>
   11580:	0011e880 	call	11e88 <__sinit>
   11584:	003fc206 	br	11490 <__srefill_r+0x28>
   11588:	00800074 	movhi	r2,1
   1158c:	109d3c04 	addi	r2,r2,29936
   11590:	11000017 	ldw	r4,0(r2)
   11594:	01400074 	movhi	r5,1
   11598:	00800044 	movi	r2,1
   1159c:	29451304 	addi	r5,r5,5196
   115a0:	8080030d 	sth	r2,12(r16)
   115a4:	00123b80 	call	123b8 <_fwalk>
   115a8:	00800244 	movi	r2,9
   115ac:	8480030d 	sth	r18,12(r16)
   115b0:	9480024c 	andi	r18,r18,9
   115b4:	90bfd51e 	bne	r18,r2,1150c <__srefill_r+0xa4>
   115b8:	800b883a 	mov	r5,r16
   115bc:	8809883a 	mov	r4,r17
   115c0:	00118800 	call	11880 <__sflush_r>
   115c4:	003fd106 	br	1150c <__srefill_r+0xa4>
   115c8:	18c01014 	ori	r3,r3,64
   115cc:	80000115 	stw	zero,4(r16)
   115d0:	00bfffc4 	movi	r2,-1
   115d4:	80c0030d 	sth	r3,12(r16)
   115d8:	003fd606 	br	11534 <__srefill_r+0xcc>
   115dc:	80c00e17 	ldw	r3,56(r16)
   115e0:	0005883a 	mov	r2,zero
   115e4:	80c00015 	stw	r3,0(r16)
   115e8:	003fd206 	br	11534 <__srefill_r+0xcc>
   115ec:	800b883a 	mov	r5,r16
   115f0:	8809883a 	mov	r4,r17
   115f4:	0011a9c0 	call	11a9c <_fflush_r>
   115f8:	10000a1e 	bne	r2,zero,11624 <__srefill_r+0x1bc>
   115fc:	8080030b 	ldhu	r2,12(r16)
   11600:	00fffdc4 	movi	r3,-9
   11604:	80000215 	stw	zero,8(r16)
   11608:	1886703a 	and	r3,r3,r2
   1160c:	80000615 	stw	zero,24(r16)
   11610:	003fd206 	br	1155c <__srefill_r+0xf4>
   11614:	00800244 	movi	r2,9
   11618:	88800015 	stw	r2,0(r17)
   1161c:	18c01014 	ori	r3,r3,64
   11620:	80c0030d 	sth	r3,12(r16)
   11624:	00bfffc4 	movi	r2,-1
   11628:	003fc206 	br	11534 <__srefill_r+0xcc>
   1162c:	800b883a 	mov	r5,r16
   11630:	8809883a 	mov	r4,r17
   11634:	00108fc0 	call	108fc <__smakebuf_r>
   11638:	003fb106 	br	11500 <__srefill_r+0x98>

0001163c <_sbrk_r>:
   1163c:	defffd04 	addi	sp,sp,-12
   11640:	dc000015 	stw	r16,0(sp)
   11644:	040000b4 	movhi	r16,2
   11648:	dc400115 	stw	r17,4(sp)
   1164c:	8423f004 	addi	r16,r16,-28736
   11650:	2023883a 	mov	r17,r4
   11654:	2809883a 	mov	r4,r5
   11658:	dfc00215 	stw	ra,8(sp)
   1165c:	80000015 	stw	zero,0(r16)
   11660:	00134140 	call	13414 <sbrk>
   11664:	00ffffc4 	movi	r3,-1
   11668:	10c00526 	beq	r2,r3,11680 <_sbrk_r+0x44>
   1166c:	dfc00217 	ldw	ra,8(sp)
   11670:	dc400117 	ldw	r17,4(sp)
   11674:	dc000017 	ldw	r16,0(sp)
   11678:	dec00304 	addi	sp,sp,12
   1167c:	f800283a 	ret
   11680:	80c00017 	ldw	r3,0(r16)
   11684:	183ff926 	beq	r3,zero,1166c <_sbrk_r+0x30>
   11688:	88c00015 	stw	r3,0(r17)
   1168c:	003ff706 	br	1166c <_sbrk_r+0x30>

00011690 <__sread>:
   11690:	defffe04 	addi	sp,sp,-8
   11694:	dc000015 	stw	r16,0(sp)
   11698:	2821883a 	mov	r16,r5
   1169c:	2940038f 	ldh	r5,14(r5)
   116a0:	dfc00115 	stw	ra,4(sp)
   116a4:	00125f40 	call	125f4 <_read_r>
   116a8:	10000716 	blt	r2,zero,116c8 <__sread+0x38>
   116ac:	80c01417 	ldw	r3,80(r16)
   116b0:	1887883a 	add	r3,r3,r2
   116b4:	80c01415 	stw	r3,80(r16)
   116b8:	dfc00117 	ldw	ra,4(sp)
   116bc:	dc000017 	ldw	r16,0(sp)
   116c0:	dec00204 	addi	sp,sp,8
   116c4:	f800283a 	ret
   116c8:	80c0030b 	ldhu	r3,12(r16)
   116cc:	18fbffcc 	andi	r3,r3,61439
   116d0:	80c0030d 	sth	r3,12(r16)
   116d4:	dfc00117 	ldw	ra,4(sp)
   116d8:	dc000017 	ldw	r16,0(sp)
   116dc:	dec00204 	addi	sp,sp,8
   116e0:	f800283a 	ret

000116e4 <__seofread>:
   116e4:	0005883a 	mov	r2,zero
   116e8:	f800283a 	ret

000116ec <__swrite>:
   116ec:	2880030b 	ldhu	r2,12(r5)
   116f0:	defffb04 	addi	sp,sp,-20
   116f4:	dcc00315 	stw	r19,12(sp)
   116f8:	dc800215 	stw	r18,8(sp)
   116fc:	dc400115 	stw	r17,4(sp)
   11700:	dc000015 	stw	r16,0(sp)
   11704:	dfc00415 	stw	ra,16(sp)
   11708:	10c0400c 	andi	r3,r2,256
   1170c:	2821883a 	mov	r16,r5
   11710:	2023883a 	mov	r17,r4
   11714:	3025883a 	mov	r18,r6
   11718:	3827883a 	mov	r19,r7
   1171c:	18000526 	beq	r3,zero,11734 <__swrite+0x48>
   11720:	2940038f 	ldh	r5,14(r5)
   11724:	01c00084 	movi	r7,2
   11728:	000d883a 	mov	r6,zero
   1172c:	00125940 	call	12594 <_lseek_r>
   11730:	8080030b 	ldhu	r2,12(r16)
   11734:	8140038f 	ldh	r5,14(r16)
   11738:	10bbffcc 	andi	r2,r2,61439
   1173c:	980f883a 	mov	r7,r19
   11740:	900d883a 	mov	r6,r18
   11744:	8809883a 	mov	r4,r17
   11748:	8080030d 	sth	r2,12(r16)
   1174c:	dfc00417 	ldw	ra,16(sp)
   11750:	dcc00317 	ldw	r19,12(sp)
   11754:	dc800217 	ldw	r18,8(sp)
   11758:	dc400117 	ldw	r17,4(sp)
   1175c:	dc000017 	ldw	r16,0(sp)
   11760:	dec00504 	addi	sp,sp,20
   11764:	00117cc1 	jmpi	117cc <_write_r>

00011768 <__sseek>:
   11768:	defffe04 	addi	sp,sp,-8
   1176c:	dc000015 	stw	r16,0(sp)
   11770:	2821883a 	mov	r16,r5
   11774:	2940038f 	ldh	r5,14(r5)
   11778:	dfc00115 	stw	ra,4(sp)
   1177c:	00125940 	call	12594 <_lseek_r>
   11780:	00ffffc4 	movi	r3,-1
   11784:	10c00826 	beq	r2,r3,117a8 <__sseek+0x40>
   11788:	80c0030b 	ldhu	r3,12(r16)
   1178c:	80801415 	stw	r2,80(r16)
   11790:	18c40014 	ori	r3,r3,4096
   11794:	80c0030d 	sth	r3,12(r16)
   11798:	dfc00117 	ldw	ra,4(sp)
   1179c:	dc000017 	ldw	r16,0(sp)
   117a0:	dec00204 	addi	sp,sp,8
   117a4:	f800283a 	ret
   117a8:	80c0030b 	ldhu	r3,12(r16)
   117ac:	18fbffcc 	andi	r3,r3,61439
   117b0:	80c0030d 	sth	r3,12(r16)
   117b4:	dfc00117 	ldw	ra,4(sp)
   117b8:	dc000017 	ldw	r16,0(sp)
   117bc:	dec00204 	addi	sp,sp,8
   117c0:	f800283a 	ret

000117c4 <__sclose>:
   117c4:	2940038f 	ldh	r5,14(r5)
   117c8:	001182c1 	jmpi	1182c <_close_r>

000117cc <_write_r>:
   117cc:	defffd04 	addi	sp,sp,-12
   117d0:	2805883a 	mov	r2,r5
   117d4:	dc000015 	stw	r16,0(sp)
   117d8:	040000b4 	movhi	r16,2
   117dc:	dc400115 	stw	r17,4(sp)
   117e0:	300b883a 	mov	r5,r6
   117e4:	8423f004 	addi	r16,r16,-28736
   117e8:	2023883a 	mov	r17,r4
   117ec:	380d883a 	mov	r6,r7
   117f0:	1009883a 	mov	r4,r2
   117f4:	dfc00215 	stw	ra,8(sp)
   117f8:	80000015 	stw	zero,0(r16)
   117fc:	00135000 	call	13500 <write>
   11800:	00ffffc4 	movi	r3,-1
   11804:	10c00526 	beq	r2,r3,1181c <_write_r+0x50>
   11808:	dfc00217 	ldw	ra,8(sp)
   1180c:	dc400117 	ldw	r17,4(sp)
   11810:	dc000017 	ldw	r16,0(sp)
   11814:	dec00304 	addi	sp,sp,12
   11818:	f800283a 	ret
   1181c:	80c00017 	ldw	r3,0(r16)
   11820:	183ff926 	beq	r3,zero,11808 <_write_r+0x3c>
   11824:	88c00015 	stw	r3,0(r17)
   11828:	003ff706 	br	11808 <_write_r+0x3c>

0001182c <_close_r>:
   1182c:	defffd04 	addi	sp,sp,-12
   11830:	dc000015 	stw	r16,0(sp)
   11834:	040000b4 	movhi	r16,2
   11838:	dc400115 	stw	r17,4(sp)
   1183c:	8423f004 	addi	r16,r16,-28736
   11840:	2023883a 	mov	r17,r4
   11844:	2809883a 	mov	r4,r5
   11848:	dfc00215 	stw	ra,8(sp)
   1184c:	80000015 	stw	zero,0(r16)
   11850:	00127bc0 	call	127bc <close>
   11854:	00ffffc4 	movi	r3,-1
   11858:	10c00526 	beq	r2,r3,11870 <_close_r+0x44>
   1185c:	dfc00217 	ldw	ra,8(sp)
   11860:	dc400117 	ldw	r17,4(sp)
   11864:	dc000017 	ldw	r16,0(sp)
   11868:	dec00304 	addi	sp,sp,12
   1186c:	f800283a 	ret
   11870:	80c00017 	ldw	r3,0(r16)
   11874:	183ff926 	beq	r3,zero,1185c <_close_r+0x30>
   11878:	88c00015 	stw	r3,0(r17)
   1187c:	003ff706 	br	1185c <_close_r+0x30>

00011880 <__sflush_r>:
   11880:	2880030b 	ldhu	r2,12(r5)
   11884:	defffb04 	addi	sp,sp,-20
   11888:	dcc00315 	stw	r19,12(sp)
   1188c:	dc400115 	stw	r17,4(sp)
   11890:	dfc00415 	stw	ra,16(sp)
   11894:	dc800215 	stw	r18,8(sp)
   11898:	dc000015 	stw	r16,0(sp)
   1189c:	10c0020c 	andi	r3,r2,8
   118a0:	2823883a 	mov	r17,r5
   118a4:	2027883a 	mov	r19,r4
   118a8:	1800311e 	bne	r3,zero,11970 <__sflush_r+0xf0>
   118ac:	28c00117 	ldw	r3,4(r5)
   118b0:	10820014 	ori	r2,r2,2048
   118b4:	2880030d 	sth	r2,12(r5)
   118b8:	00c04b0e 	bge	zero,r3,119e8 <__sflush_r+0x168>
   118bc:	8a000a17 	ldw	r8,40(r17)
   118c0:	40002326 	beq	r8,zero,11950 <__sflush_r+0xd0>
   118c4:	9c000017 	ldw	r16,0(r19)
   118c8:	10c4000c 	andi	r3,r2,4096
   118cc:	98000015 	stw	zero,0(r19)
   118d0:	18004826 	beq	r3,zero,119f4 <__sflush_r+0x174>
   118d4:	89801417 	ldw	r6,80(r17)
   118d8:	10c0010c 	andi	r3,r2,4
   118dc:	18000626 	beq	r3,zero,118f8 <__sflush_r+0x78>
   118e0:	88c00117 	ldw	r3,4(r17)
   118e4:	88800c17 	ldw	r2,48(r17)
   118e8:	30cdc83a 	sub	r6,r6,r3
   118ec:	10000226 	beq	r2,zero,118f8 <__sflush_r+0x78>
   118f0:	88800f17 	ldw	r2,60(r17)
   118f4:	308dc83a 	sub	r6,r6,r2
   118f8:	89400717 	ldw	r5,28(r17)
   118fc:	000f883a 	mov	r7,zero
   11900:	9809883a 	mov	r4,r19
   11904:	403ee83a 	callr	r8
   11908:	00ffffc4 	movi	r3,-1
   1190c:	10c04426 	beq	r2,r3,11a20 <__sflush_r+0x1a0>
   11910:	88c0030b 	ldhu	r3,12(r17)
   11914:	89000417 	ldw	r4,16(r17)
   11918:	88000115 	stw	zero,4(r17)
   1191c:	197dffcc 	andi	r5,r3,63487
   11920:	8940030d 	sth	r5,12(r17)
   11924:	89000015 	stw	r4,0(r17)
   11928:	18c4000c 	andi	r3,r3,4096
   1192c:	18002c1e 	bne	r3,zero,119e0 <__sflush_r+0x160>
   11930:	89400c17 	ldw	r5,48(r17)
   11934:	9c000015 	stw	r16,0(r19)
   11938:	28000526 	beq	r5,zero,11950 <__sflush_r+0xd0>
   1193c:	88801004 	addi	r2,r17,64
   11940:	28800226 	beq	r5,r2,1194c <__sflush_r+0xcc>
   11944:	9809883a 	mov	r4,r19
   11948:	00120a80 	call	120a8 <_free_r>
   1194c:	88000c15 	stw	zero,48(r17)
   11950:	0005883a 	mov	r2,zero
   11954:	dfc00417 	ldw	ra,16(sp)
   11958:	dcc00317 	ldw	r19,12(sp)
   1195c:	dc800217 	ldw	r18,8(sp)
   11960:	dc400117 	ldw	r17,4(sp)
   11964:	dc000017 	ldw	r16,0(sp)
   11968:	dec00504 	addi	sp,sp,20
   1196c:	f800283a 	ret
   11970:	2c800417 	ldw	r18,16(r5)
   11974:	903ff626 	beq	r18,zero,11950 <__sflush_r+0xd0>
   11978:	2c000017 	ldw	r16,0(r5)
   1197c:	108000cc 	andi	r2,r2,3
   11980:	2c800015 	stw	r18,0(r5)
   11984:	84a1c83a 	sub	r16,r16,r18
   11988:	1000131e 	bne	r2,zero,119d8 <__sflush_r+0x158>
   1198c:	28800517 	ldw	r2,20(r5)
   11990:	88800215 	stw	r2,8(r17)
   11994:	04000316 	blt	zero,r16,119a4 <__sflush_r+0x124>
   11998:	003fed06 	br	11950 <__sflush_r+0xd0>
   1199c:	90a5883a 	add	r18,r18,r2
   119a0:	043feb0e 	bge	zero,r16,11950 <__sflush_r+0xd0>
   119a4:	88800917 	ldw	r2,36(r17)
   119a8:	89400717 	ldw	r5,28(r17)
   119ac:	800f883a 	mov	r7,r16
   119b0:	900d883a 	mov	r6,r18
   119b4:	9809883a 	mov	r4,r19
   119b8:	103ee83a 	callr	r2
   119bc:	80a1c83a 	sub	r16,r16,r2
   119c0:	00bff616 	blt	zero,r2,1199c <__sflush_r+0x11c>
   119c4:	88c0030b 	ldhu	r3,12(r17)
   119c8:	00bfffc4 	movi	r2,-1
   119cc:	18c01014 	ori	r3,r3,64
   119d0:	88c0030d 	sth	r3,12(r17)
   119d4:	003fdf06 	br	11954 <__sflush_r+0xd4>
   119d8:	0005883a 	mov	r2,zero
   119dc:	003fec06 	br	11990 <__sflush_r+0x110>
   119e0:	88801415 	stw	r2,80(r17)
   119e4:	003fd206 	br	11930 <__sflush_r+0xb0>
   119e8:	28c00f17 	ldw	r3,60(r5)
   119ec:	00ffb316 	blt	zero,r3,118bc <__sflush_r+0x3c>
   119f0:	003fd706 	br	11950 <__sflush_r+0xd0>
   119f4:	89400717 	ldw	r5,28(r17)
   119f8:	000d883a 	mov	r6,zero
   119fc:	01c00044 	movi	r7,1
   11a00:	9809883a 	mov	r4,r19
   11a04:	403ee83a 	callr	r8
   11a08:	100d883a 	mov	r6,r2
   11a0c:	00bfffc4 	movi	r2,-1
   11a10:	30801426 	beq	r6,r2,11a64 <__sflush_r+0x1e4>
   11a14:	8880030b 	ldhu	r2,12(r17)
   11a18:	8a000a17 	ldw	r8,40(r17)
   11a1c:	003fae06 	br	118d8 <__sflush_r+0x58>
   11a20:	98c00017 	ldw	r3,0(r19)
   11a24:	183fba26 	beq	r3,zero,11910 <__sflush_r+0x90>
   11a28:	01000744 	movi	r4,29
   11a2c:	19000626 	beq	r3,r4,11a48 <__sflush_r+0x1c8>
   11a30:	01000584 	movi	r4,22
   11a34:	19000426 	beq	r3,r4,11a48 <__sflush_r+0x1c8>
   11a38:	88c0030b 	ldhu	r3,12(r17)
   11a3c:	18c01014 	ori	r3,r3,64
   11a40:	88c0030d 	sth	r3,12(r17)
   11a44:	003fc306 	br	11954 <__sflush_r+0xd4>
   11a48:	8880030b 	ldhu	r2,12(r17)
   11a4c:	88c00417 	ldw	r3,16(r17)
   11a50:	88000115 	stw	zero,4(r17)
   11a54:	10bdffcc 	andi	r2,r2,63487
   11a58:	8880030d 	sth	r2,12(r17)
   11a5c:	88c00015 	stw	r3,0(r17)
   11a60:	003fb306 	br	11930 <__sflush_r+0xb0>
   11a64:	98800017 	ldw	r2,0(r19)
   11a68:	103fea26 	beq	r2,zero,11a14 <__sflush_r+0x194>
   11a6c:	00c00744 	movi	r3,29
   11a70:	10c00226 	beq	r2,r3,11a7c <__sflush_r+0x1fc>
   11a74:	00c00584 	movi	r3,22
   11a78:	10c0031e 	bne	r2,r3,11a88 <__sflush_r+0x208>
   11a7c:	9c000015 	stw	r16,0(r19)
   11a80:	0005883a 	mov	r2,zero
   11a84:	003fb306 	br	11954 <__sflush_r+0xd4>
   11a88:	88c0030b 	ldhu	r3,12(r17)
   11a8c:	3005883a 	mov	r2,r6
   11a90:	18c01014 	ori	r3,r3,64
   11a94:	88c0030d 	sth	r3,12(r17)
   11a98:	003fae06 	br	11954 <__sflush_r+0xd4>

00011a9c <_fflush_r>:
   11a9c:	defffd04 	addi	sp,sp,-12
   11aa0:	dc000115 	stw	r16,4(sp)
   11aa4:	dfc00215 	stw	ra,8(sp)
   11aa8:	2021883a 	mov	r16,r4
   11aac:	20000226 	beq	r4,zero,11ab8 <_fflush_r+0x1c>
   11ab0:	20800e17 	ldw	r2,56(r4)
   11ab4:	10000c26 	beq	r2,zero,11ae8 <_fflush_r+0x4c>
   11ab8:	2880030f 	ldh	r2,12(r5)
   11abc:	1000051e 	bne	r2,zero,11ad4 <_fflush_r+0x38>
   11ac0:	0005883a 	mov	r2,zero
   11ac4:	dfc00217 	ldw	ra,8(sp)
   11ac8:	dc000117 	ldw	r16,4(sp)
   11acc:	dec00304 	addi	sp,sp,12
   11ad0:	f800283a 	ret
   11ad4:	8009883a 	mov	r4,r16
   11ad8:	dfc00217 	ldw	ra,8(sp)
   11adc:	dc000117 	ldw	r16,4(sp)
   11ae0:	dec00304 	addi	sp,sp,12
   11ae4:	00118801 	jmpi	11880 <__sflush_r>
   11ae8:	d9400015 	stw	r5,0(sp)
   11aec:	0011e880 	call	11e88 <__sinit>
   11af0:	d9400017 	ldw	r5,0(sp)
   11af4:	003ff006 	br	11ab8 <_fflush_r+0x1c>

00011af8 <fflush>:
   11af8:	20000526 	beq	r4,zero,11b10 <fflush+0x18>
   11afc:	00800074 	movhi	r2,1
   11b00:	109d3d04 	addi	r2,r2,29940
   11b04:	200b883a 	mov	r5,r4
   11b08:	11000017 	ldw	r4,0(r2)
   11b0c:	0011a9c1 	jmpi	11a9c <_fflush_r>
   11b10:	00800074 	movhi	r2,1
   11b14:	109d3c04 	addi	r2,r2,29936
   11b18:	11000017 	ldw	r4,0(r2)
   11b1c:	01400074 	movhi	r5,1
   11b20:	2946a704 	addi	r5,r5,6812
   11b24:	001247c1 	jmpi	1247c <_fwalk_reent>

00011b28 <__fp_unlock>:
   11b28:	0005883a 	mov	r2,zero
   11b2c:	f800283a 	ret

00011b30 <_cleanup_r>:
   11b30:	01400074 	movhi	r5,1
   11b34:	29499504 	addi	r5,r5,9812
   11b38:	001247c1 	jmpi	1247c <_fwalk_reent>

00011b3c <__sinit.part.1>:
   11b3c:	defff704 	addi	sp,sp,-36
   11b40:	00c00074 	movhi	r3,1
   11b44:	dfc00815 	stw	ra,32(sp)
   11b48:	ddc00715 	stw	r23,28(sp)
   11b4c:	dd800615 	stw	r22,24(sp)
   11b50:	dd400515 	stw	r21,20(sp)
   11b54:	dd000415 	stw	r20,16(sp)
   11b58:	dcc00315 	stw	r19,12(sp)
   11b5c:	dc800215 	stw	r18,8(sp)
   11b60:	dc400115 	stw	r17,4(sp)
   11b64:	dc000015 	stw	r16,0(sp)
   11b68:	18c6cc04 	addi	r3,r3,6960
   11b6c:	24000117 	ldw	r16,4(r4)
   11b70:	20c00f15 	stw	r3,60(r4)
   11b74:	2080bb04 	addi	r2,r4,748
   11b78:	00c000c4 	movi	r3,3
   11b7c:	20c0b915 	stw	r3,740(r4)
   11b80:	2080ba15 	stw	r2,744(r4)
   11b84:	2000b815 	stw	zero,736(r4)
   11b88:	05c00204 	movi	r23,8
   11b8c:	00800104 	movi	r2,4
   11b90:	2025883a 	mov	r18,r4
   11b94:	b80d883a 	mov	r6,r23
   11b98:	81001704 	addi	r4,r16,92
   11b9c:	000b883a 	mov	r5,zero
   11ba0:	80000015 	stw	zero,0(r16)
   11ba4:	80000115 	stw	zero,4(r16)
   11ba8:	80000215 	stw	zero,8(r16)
   11bac:	8080030d 	sth	r2,12(r16)
   11bb0:	80001915 	stw	zero,100(r16)
   11bb4:	8000038d 	sth	zero,14(r16)
   11bb8:	80000415 	stw	zero,16(r16)
   11bbc:	80000515 	stw	zero,20(r16)
   11bc0:	80000615 	stw	zero,24(r16)
   11bc4:	00112c40 	call	112c4 <memset>
   11bc8:	05800074 	movhi	r22,1
   11bcc:	94400217 	ldw	r17,8(r18)
   11bd0:	05400074 	movhi	r21,1
   11bd4:	05000074 	movhi	r20,1
   11bd8:	04c00074 	movhi	r19,1
   11bdc:	b585a404 	addi	r22,r22,5776
   11be0:	ad45bb04 	addi	r21,r21,5868
   11be4:	a505da04 	addi	r20,r20,5992
   11be8:	9cc5f104 	addi	r19,r19,6084
   11bec:	85800815 	stw	r22,32(r16)
   11bf0:	85400915 	stw	r21,36(r16)
   11bf4:	85000a15 	stw	r20,40(r16)
   11bf8:	84c00b15 	stw	r19,44(r16)
   11bfc:	84000715 	stw	r16,28(r16)
   11c00:	00800284 	movi	r2,10
   11c04:	8880030d 	sth	r2,12(r17)
   11c08:	00800044 	movi	r2,1
   11c0c:	b80d883a 	mov	r6,r23
   11c10:	89001704 	addi	r4,r17,92
   11c14:	000b883a 	mov	r5,zero
   11c18:	88000015 	stw	zero,0(r17)
   11c1c:	88000115 	stw	zero,4(r17)
   11c20:	88000215 	stw	zero,8(r17)
   11c24:	88001915 	stw	zero,100(r17)
   11c28:	8880038d 	sth	r2,14(r17)
   11c2c:	88000415 	stw	zero,16(r17)
   11c30:	88000515 	stw	zero,20(r17)
   11c34:	88000615 	stw	zero,24(r17)
   11c38:	00112c40 	call	112c4 <memset>
   11c3c:	94000317 	ldw	r16,12(r18)
   11c40:	00800484 	movi	r2,18
   11c44:	8c400715 	stw	r17,28(r17)
   11c48:	8d800815 	stw	r22,32(r17)
   11c4c:	8d400915 	stw	r21,36(r17)
   11c50:	8d000a15 	stw	r20,40(r17)
   11c54:	8cc00b15 	stw	r19,44(r17)
   11c58:	8080030d 	sth	r2,12(r16)
   11c5c:	00800084 	movi	r2,2
   11c60:	80000015 	stw	zero,0(r16)
   11c64:	80000115 	stw	zero,4(r16)
   11c68:	80000215 	stw	zero,8(r16)
   11c6c:	80001915 	stw	zero,100(r16)
   11c70:	8080038d 	sth	r2,14(r16)
   11c74:	80000415 	stw	zero,16(r16)
   11c78:	80000515 	stw	zero,20(r16)
   11c7c:	80000615 	stw	zero,24(r16)
   11c80:	b80d883a 	mov	r6,r23
   11c84:	000b883a 	mov	r5,zero
   11c88:	81001704 	addi	r4,r16,92
   11c8c:	00112c40 	call	112c4 <memset>
   11c90:	00800044 	movi	r2,1
   11c94:	84000715 	stw	r16,28(r16)
   11c98:	85800815 	stw	r22,32(r16)
   11c9c:	85400915 	stw	r21,36(r16)
   11ca0:	85000a15 	stw	r20,40(r16)
   11ca4:	84c00b15 	stw	r19,44(r16)
   11ca8:	90800e15 	stw	r2,56(r18)
   11cac:	dfc00817 	ldw	ra,32(sp)
   11cb0:	ddc00717 	ldw	r23,28(sp)
   11cb4:	dd800617 	ldw	r22,24(sp)
   11cb8:	dd400517 	ldw	r21,20(sp)
   11cbc:	dd000417 	ldw	r20,16(sp)
   11cc0:	dcc00317 	ldw	r19,12(sp)
   11cc4:	dc800217 	ldw	r18,8(sp)
   11cc8:	dc400117 	ldw	r17,4(sp)
   11ccc:	dc000017 	ldw	r16,0(sp)
   11cd0:	dec00904 	addi	sp,sp,36
   11cd4:	f800283a 	ret

00011cd8 <__fp_lock>:
   11cd8:	0005883a 	mov	r2,zero
   11cdc:	f800283a 	ret

00011ce0 <__sfmoreglue>:
   11ce0:	defffc04 	addi	sp,sp,-16
   11ce4:	dc800215 	stw	r18,8(sp)
   11ce8:	2825883a 	mov	r18,r5
   11cec:	dc000015 	stw	r16,0(sp)
   11cf0:	01401a04 	movi	r5,104
   11cf4:	2021883a 	mov	r16,r4
   11cf8:	913fffc4 	addi	r4,r18,-1
   11cfc:	dfc00315 	stw	ra,12(sp)
   11d00:	dc400115 	stw	r17,4(sp)
   11d04:	00127580 	call	12758 <__mulsi3>
   11d08:	8009883a 	mov	r4,r16
   11d0c:	11401d04 	addi	r5,r2,116
   11d10:	1023883a 	mov	r17,r2
   11d14:	0010ab80 	call	10ab8 <_malloc_r>
   11d18:	1021883a 	mov	r16,r2
   11d1c:	10000726 	beq	r2,zero,11d3c <__sfmoreglue+0x5c>
   11d20:	11000304 	addi	r4,r2,12
   11d24:	10000015 	stw	zero,0(r2)
   11d28:	14800115 	stw	r18,4(r2)
   11d2c:	11000215 	stw	r4,8(r2)
   11d30:	89801a04 	addi	r6,r17,104
   11d34:	000b883a 	mov	r5,zero
   11d38:	00112c40 	call	112c4 <memset>
   11d3c:	8005883a 	mov	r2,r16
   11d40:	dfc00317 	ldw	ra,12(sp)
   11d44:	dc800217 	ldw	r18,8(sp)
   11d48:	dc400117 	ldw	r17,4(sp)
   11d4c:	dc000017 	ldw	r16,0(sp)
   11d50:	dec00404 	addi	sp,sp,16
   11d54:	f800283a 	ret

00011d58 <__sfp>:
   11d58:	defffb04 	addi	sp,sp,-20
   11d5c:	dc000015 	stw	r16,0(sp)
   11d60:	04000074 	movhi	r16,1
   11d64:	841d3c04 	addi	r16,r16,29936
   11d68:	dcc00315 	stw	r19,12(sp)
   11d6c:	2027883a 	mov	r19,r4
   11d70:	81000017 	ldw	r4,0(r16)
   11d74:	dfc00415 	stw	ra,16(sp)
   11d78:	dc800215 	stw	r18,8(sp)
   11d7c:	20800e17 	ldw	r2,56(r4)
   11d80:	dc400115 	stw	r17,4(sp)
   11d84:	1000021e 	bne	r2,zero,11d90 <__sfp+0x38>
   11d88:	0011b3c0 	call	11b3c <__sinit.part.1>
   11d8c:	81000017 	ldw	r4,0(r16)
   11d90:	2480b804 	addi	r18,r4,736
   11d94:	047fffc4 	movi	r17,-1
   11d98:	91000117 	ldw	r4,4(r18)
   11d9c:	94000217 	ldw	r16,8(r18)
   11da0:	213fffc4 	addi	r4,r4,-1
   11da4:	20000a16 	blt	r4,zero,11dd0 <__sfp+0x78>
   11da8:	8080030f 	ldh	r2,12(r16)
   11dac:	10000c26 	beq	r2,zero,11de0 <__sfp+0x88>
   11db0:	80c01d04 	addi	r3,r16,116
   11db4:	00000206 	br	11dc0 <__sfp+0x68>
   11db8:	18bfe60f 	ldh	r2,-104(r3)
   11dbc:	10000826 	beq	r2,zero,11de0 <__sfp+0x88>
   11dc0:	213fffc4 	addi	r4,r4,-1
   11dc4:	1c3ffd04 	addi	r16,r3,-12
   11dc8:	18c01a04 	addi	r3,r3,104
   11dcc:	247ffa1e 	bne	r4,r17,11db8 <__sfp+0x60>
   11dd0:	90800017 	ldw	r2,0(r18)
   11dd4:	10001d26 	beq	r2,zero,11e4c <__sfp+0xf4>
   11dd8:	1025883a 	mov	r18,r2
   11ddc:	003fee06 	br	11d98 <__sfp+0x40>
   11de0:	00bfffc4 	movi	r2,-1
   11de4:	8080038d 	sth	r2,14(r16)
   11de8:	00800044 	movi	r2,1
   11dec:	8080030d 	sth	r2,12(r16)
   11df0:	80001915 	stw	zero,100(r16)
   11df4:	80000015 	stw	zero,0(r16)
   11df8:	80000215 	stw	zero,8(r16)
   11dfc:	80000115 	stw	zero,4(r16)
   11e00:	80000415 	stw	zero,16(r16)
   11e04:	80000515 	stw	zero,20(r16)
   11e08:	80000615 	stw	zero,24(r16)
   11e0c:	01800204 	movi	r6,8
   11e10:	000b883a 	mov	r5,zero
   11e14:	81001704 	addi	r4,r16,92
   11e18:	00112c40 	call	112c4 <memset>
   11e1c:	8005883a 	mov	r2,r16
   11e20:	80000c15 	stw	zero,48(r16)
   11e24:	80000d15 	stw	zero,52(r16)
   11e28:	80001115 	stw	zero,68(r16)
   11e2c:	80001215 	stw	zero,72(r16)
   11e30:	dfc00417 	ldw	ra,16(sp)
   11e34:	dcc00317 	ldw	r19,12(sp)
   11e38:	dc800217 	ldw	r18,8(sp)
   11e3c:	dc400117 	ldw	r17,4(sp)
   11e40:	dc000017 	ldw	r16,0(sp)
   11e44:	dec00504 	addi	sp,sp,20
   11e48:	f800283a 	ret
   11e4c:	01400104 	movi	r5,4
   11e50:	9809883a 	mov	r4,r19
   11e54:	0011ce00 	call	11ce0 <__sfmoreglue>
   11e58:	90800015 	stw	r2,0(r18)
   11e5c:	103fde1e 	bne	r2,zero,11dd8 <__sfp+0x80>
   11e60:	00800304 	movi	r2,12
   11e64:	98800015 	stw	r2,0(r19)
   11e68:	0005883a 	mov	r2,zero
   11e6c:	003ff006 	br	11e30 <__sfp+0xd8>

00011e70 <_cleanup>:
   11e70:	00800074 	movhi	r2,1
   11e74:	109d3c04 	addi	r2,r2,29936
   11e78:	11000017 	ldw	r4,0(r2)
   11e7c:	01400074 	movhi	r5,1
   11e80:	29499504 	addi	r5,r5,9812
   11e84:	001247c1 	jmpi	1247c <_fwalk_reent>

00011e88 <__sinit>:
   11e88:	20800e17 	ldw	r2,56(r4)
   11e8c:	10000126 	beq	r2,zero,11e94 <__sinit+0xc>
   11e90:	f800283a 	ret
   11e94:	0011b3c1 	jmpi	11b3c <__sinit.part.1>

00011e98 <__sfp_lock_acquire>:
   11e98:	f800283a 	ret

00011e9c <__sfp_lock_release>:
   11e9c:	f800283a 	ret

00011ea0 <__sinit_lock_acquire>:
   11ea0:	f800283a 	ret

00011ea4 <__sinit_lock_release>:
   11ea4:	f800283a 	ret

00011ea8 <__fp_lock_all>:
   11ea8:	00800074 	movhi	r2,1
   11eac:	109d3d04 	addi	r2,r2,29940
   11eb0:	11000017 	ldw	r4,0(r2)
   11eb4:	01400074 	movhi	r5,1
   11eb8:	29473604 	addi	r5,r5,7384
   11ebc:	00123b81 	jmpi	123b8 <_fwalk>

00011ec0 <__fp_unlock_all>:
   11ec0:	00800074 	movhi	r2,1
   11ec4:	109d3d04 	addi	r2,r2,29940
   11ec8:	11000017 	ldw	r4,0(r2)
   11ecc:	01400074 	movhi	r5,1
   11ed0:	2946ca04 	addi	r5,r5,6952
   11ed4:	00123b81 	jmpi	123b8 <_fwalk>

00011ed8 <__sflags>:
   11ed8:	28800007 	ldb	r2,0(r5)
   11edc:	00c01c84 	movi	r3,114
   11ee0:	10c02426 	beq	r2,r3,11f74 <__sflags+0x9c>
   11ee4:	00c01dc4 	movi	r3,119
   11ee8:	10c01e26 	beq	r2,r3,11f64 <__sflags+0x8c>
   11eec:	00c01844 	movi	r3,97
   11ef0:	10c00426 	beq	r2,r3,11f04 <__sflags+0x2c>
   11ef4:	00800584 	movi	r2,22
   11ef8:	20800015 	stw	r2,0(r4)
   11efc:	0005883a 	mov	r2,zero
   11f00:	f800283a 	ret
   11f04:	02c08204 	movi	r11,520
   11f08:	01000044 	movi	r4,1
   11f0c:	00804204 	movi	r2,264
   11f10:	01c00ac4 	movi	r7,43
   11f14:	02bff8c4 	movi	r10,-29
   11f18:	027fff04 	movi	r9,-4
   11f1c:	02001e04 	movi	r8,120
   11f20:	29400044 	addi	r5,r5,1
   11f24:	28c00007 	ldb	r3,0(r5)
   11f28:	18000626 	beq	r3,zero,11f44 <__sflags+0x6c>
   11f2c:	19c00826 	beq	r3,r7,11f50 <__sflags+0x78>
   11f30:	1a3ffb1e 	bne	r3,r8,11f20 <__sflags+0x48>
   11f34:	29400044 	addi	r5,r5,1
   11f38:	28c00007 	ldb	r3,0(r5)
   11f3c:	21020014 	ori	r4,r4,2048
   11f40:	183ffa1e 	bne	r3,zero,11f2c <__sflags+0x54>
   11f44:	22c8b03a 	or	r4,r4,r11
   11f48:	31000015 	stw	r4,0(r6)
   11f4c:	f800283a 	ret
   11f50:	1284703a 	and	r2,r2,r10
   11f54:	2248703a 	and	r4,r4,r9
   11f58:	10800414 	ori	r2,r2,16
   11f5c:	21000094 	ori	r4,r4,2
   11f60:	003fef06 	br	11f20 <__sflags+0x48>
   11f64:	02c18004 	movi	r11,1536
   11f68:	01000044 	movi	r4,1
   11f6c:	00800204 	movi	r2,8
   11f70:	003fe706 	br	11f10 <__sflags+0x38>
   11f74:	0017883a 	mov	r11,zero
   11f78:	0009883a 	mov	r4,zero
   11f7c:	00800104 	movi	r2,4
   11f80:	003fe306 	br	11f10 <__sflags+0x38>

00011f84 <_malloc_trim_r>:
   11f84:	defffb04 	addi	sp,sp,-20
   11f88:	dcc00315 	stw	r19,12(sp)
   11f8c:	04c00074 	movhi	r19,1
   11f90:	dc800215 	stw	r18,8(sp)
   11f94:	dc400115 	stw	r17,4(sp)
   11f98:	dc000015 	stw	r16,0(sp)
   11f9c:	dfc00415 	stw	ra,16(sp)
   11fa0:	2821883a 	mov	r16,r5
   11fa4:	9cd7ad04 	addi	r19,r19,24244
   11fa8:	2025883a 	mov	r18,r4
   11fac:	0012d1c0 	call	12d1c <__malloc_lock>
   11fb0:	98800217 	ldw	r2,8(r19)
   11fb4:	14400117 	ldw	r17,4(r2)
   11fb8:	00bfff04 	movi	r2,-4
   11fbc:	88a2703a 	and	r17,r17,r2
   11fc0:	8c21c83a 	sub	r16,r17,r16
   11fc4:	8403fbc4 	addi	r16,r16,4079
   11fc8:	8020d33a 	srli	r16,r16,12
   11fcc:	0083ffc4 	movi	r2,4095
   11fd0:	843fffc4 	addi	r16,r16,-1
   11fd4:	8020933a 	slli	r16,r16,12
   11fd8:	1400060e 	bge	r2,r16,11ff4 <_malloc_trim_r+0x70>
   11fdc:	000b883a 	mov	r5,zero
   11fe0:	9009883a 	mov	r4,r18
   11fe4:	001163c0 	call	1163c <_sbrk_r>
   11fe8:	98c00217 	ldw	r3,8(r19)
   11fec:	1c47883a 	add	r3,r3,r17
   11ff0:	10c00a26 	beq	r2,r3,1201c <_malloc_trim_r+0x98>
   11ff4:	9009883a 	mov	r4,r18
   11ff8:	0012d400 	call	12d40 <__malloc_unlock>
   11ffc:	0005883a 	mov	r2,zero
   12000:	dfc00417 	ldw	ra,16(sp)
   12004:	dcc00317 	ldw	r19,12(sp)
   12008:	dc800217 	ldw	r18,8(sp)
   1200c:	dc400117 	ldw	r17,4(sp)
   12010:	dc000017 	ldw	r16,0(sp)
   12014:	dec00504 	addi	sp,sp,20
   12018:	f800283a 	ret
   1201c:	040bc83a 	sub	r5,zero,r16
   12020:	9009883a 	mov	r4,r18
   12024:	001163c0 	call	1163c <_sbrk_r>
   12028:	00ffffc4 	movi	r3,-1
   1202c:	10c00d26 	beq	r2,r3,12064 <_malloc_trim_r+0xe0>
   12030:	00c000b4 	movhi	r3,2
   12034:	18e3fb04 	addi	r3,r3,-28692
   12038:	18800017 	ldw	r2,0(r3)
   1203c:	99000217 	ldw	r4,8(r19)
   12040:	8c23c83a 	sub	r17,r17,r16
   12044:	8c400054 	ori	r17,r17,1
   12048:	1421c83a 	sub	r16,r2,r16
   1204c:	24400115 	stw	r17,4(r4)
   12050:	9009883a 	mov	r4,r18
   12054:	1c000015 	stw	r16,0(r3)
   12058:	0012d400 	call	12d40 <__malloc_unlock>
   1205c:	00800044 	movi	r2,1
   12060:	003fe706 	br	12000 <_malloc_trim_r+0x7c>
   12064:	000b883a 	mov	r5,zero
   12068:	9009883a 	mov	r4,r18
   1206c:	001163c0 	call	1163c <_sbrk_r>
   12070:	99000217 	ldw	r4,8(r19)
   12074:	014003c4 	movi	r5,15
   12078:	1107c83a 	sub	r3,r2,r4
   1207c:	28ffdd0e 	bge	r5,r3,11ff4 <_malloc_trim_r+0x70>
   12080:	01400074 	movhi	r5,1
   12084:	295d3e04 	addi	r5,r5,29944
   12088:	29400017 	ldw	r5,0(r5)
   1208c:	18c00054 	ori	r3,r3,1
   12090:	20c00115 	stw	r3,4(r4)
   12094:	00c000b4 	movhi	r3,2
   12098:	1145c83a 	sub	r2,r2,r5
   1209c:	18e3fb04 	addi	r3,r3,-28692
   120a0:	18800015 	stw	r2,0(r3)
   120a4:	003fd306 	br	11ff4 <_malloc_trim_r+0x70>

000120a8 <_free_r>:
   120a8:	28004126 	beq	r5,zero,121b0 <_free_r+0x108>
   120ac:	defffd04 	addi	sp,sp,-12
   120b0:	dc400115 	stw	r17,4(sp)
   120b4:	dc000015 	stw	r16,0(sp)
   120b8:	2023883a 	mov	r17,r4
   120bc:	2821883a 	mov	r16,r5
   120c0:	dfc00215 	stw	ra,8(sp)
   120c4:	0012d1c0 	call	12d1c <__malloc_lock>
   120c8:	81ffff17 	ldw	r7,-4(r16)
   120cc:	00bfff84 	movi	r2,-2
   120d0:	01000074 	movhi	r4,1
   120d4:	81bffe04 	addi	r6,r16,-8
   120d8:	3884703a 	and	r2,r7,r2
   120dc:	2117ad04 	addi	r4,r4,24244
   120e0:	308b883a 	add	r5,r6,r2
   120e4:	2a400117 	ldw	r9,4(r5)
   120e8:	22000217 	ldw	r8,8(r4)
   120ec:	00ffff04 	movi	r3,-4
   120f0:	48c6703a 	and	r3,r9,r3
   120f4:	2a005726 	beq	r5,r8,12254 <_free_r+0x1ac>
   120f8:	28c00115 	stw	r3,4(r5)
   120fc:	39c0004c 	andi	r7,r7,1
   12100:	3800091e 	bne	r7,zero,12128 <_free_r+0x80>
   12104:	823ffe17 	ldw	r8,-8(r16)
   12108:	22400204 	addi	r9,r4,8
   1210c:	320dc83a 	sub	r6,r6,r8
   12110:	31c00217 	ldw	r7,8(r6)
   12114:	1205883a 	add	r2,r2,r8
   12118:	3a406526 	beq	r7,r9,122b0 <_free_r+0x208>
   1211c:	32000317 	ldw	r8,12(r6)
   12120:	3a000315 	stw	r8,12(r7)
   12124:	41c00215 	stw	r7,8(r8)
   12128:	28cf883a 	add	r7,r5,r3
   1212c:	39c00117 	ldw	r7,4(r7)
   12130:	39c0004c 	andi	r7,r7,1
   12134:	38003a26 	beq	r7,zero,12220 <_free_r+0x178>
   12138:	10c00054 	ori	r3,r2,1
   1213c:	30c00115 	stw	r3,4(r6)
   12140:	3087883a 	add	r3,r6,r2
   12144:	18800015 	stw	r2,0(r3)
   12148:	00c07fc4 	movi	r3,511
   1214c:	18801936 	bltu	r3,r2,121b4 <_free_r+0x10c>
   12150:	1004d0fa 	srli	r2,r2,3
   12154:	01c00044 	movi	r7,1
   12158:	21400117 	ldw	r5,4(r4)
   1215c:	10c00044 	addi	r3,r2,1
   12160:	18c7883a 	add	r3,r3,r3
   12164:	1005d0ba 	srai	r2,r2,2
   12168:	18c7883a 	add	r3,r3,r3
   1216c:	18c7883a 	add	r3,r3,r3
   12170:	1907883a 	add	r3,r3,r4
   12174:	3884983a 	sll	r2,r7,r2
   12178:	19c00017 	ldw	r7,0(r3)
   1217c:	1a3ffe04 	addi	r8,r3,-8
   12180:	1144b03a 	or	r2,r2,r5
   12184:	32000315 	stw	r8,12(r6)
   12188:	31c00215 	stw	r7,8(r6)
   1218c:	20800115 	stw	r2,4(r4)
   12190:	19800015 	stw	r6,0(r3)
   12194:	39800315 	stw	r6,12(r7)
   12198:	8809883a 	mov	r4,r17
   1219c:	dfc00217 	ldw	ra,8(sp)
   121a0:	dc400117 	ldw	r17,4(sp)
   121a4:	dc000017 	ldw	r16,0(sp)
   121a8:	dec00304 	addi	sp,sp,12
   121ac:	0012d401 	jmpi	12d40 <__malloc_unlock>
   121b0:	f800283a 	ret
   121b4:	100ad27a 	srli	r5,r2,9
   121b8:	00c00104 	movi	r3,4
   121bc:	19404a36 	bltu	r3,r5,122e8 <_free_r+0x240>
   121c0:	100ad1ba 	srli	r5,r2,6
   121c4:	28c00e44 	addi	r3,r5,57
   121c8:	18c7883a 	add	r3,r3,r3
   121cc:	29400e04 	addi	r5,r5,56
   121d0:	18c7883a 	add	r3,r3,r3
   121d4:	18c7883a 	add	r3,r3,r3
   121d8:	1909883a 	add	r4,r3,r4
   121dc:	20c00017 	ldw	r3,0(r4)
   121e0:	01c00074 	movhi	r7,1
   121e4:	213ffe04 	addi	r4,r4,-8
   121e8:	39d7ad04 	addi	r7,r7,24244
   121ec:	20c04426 	beq	r4,r3,12300 <_free_r+0x258>
   121f0:	01ffff04 	movi	r7,-4
   121f4:	19400117 	ldw	r5,4(r3)
   121f8:	29ca703a 	and	r5,r5,r7
   121fc:	1140022e 	bgeu	r2,r5,12208 <_free_r+0x160>
   12200:	18c00217 	ldw	r3,8(r3)
   12204:	20fffb1e 	bne	r4,r3,121f4 <_free_r+0x14c>
   12208:	19000317 	ldw	r4,12(r3)
   1220c:	31000315 	stw	r4,12(r6)
   12210:	30c00215 	stw	r3,8(r6)
   12214:	21800215 	stw	r6,8(r4)
   12218:	19800315 	stw	r6,12(r3)
   1221c:	003fde06 	br	12198 <_free_r+0xf0>
   12220:	29c00217 	ldw	r7,8(r5)
   12224:	10c5883a 	add	r2,r2,r3
   12228:	00c00074 	movhi	r3,1
   1222c:	18d7af04 	addi	r3,r3,24252
   12230:	38c03b26 	beq	r7,r3,12320 <_free_r+0x278>
   12234:	2a000317 	ldw	r8,12(r5)
   12238:	11400054 	ori	r5,r2,1
   1223c:	3087883a 	add	r3,r6,r2
   12240:	3a000315 	stw	r8,12(r7)
   12244:	41c00215 	stw	r7,8(r8)
   12248:	31400115 	stw	r5,4(r6)
   1224c:	18800015 	stw	r2,0(r3)
   12250:	003fbd06 	br	12148 <_free_r+0xa0>
   12254:	39c0004c 	andi	r7,r7,1
   12258:	10c5883a 	add	r2,r2,r3
   1225c:	3800071e 	bne	r7,zero,1227c <_free_r+0x1d4>
   12260:	81fffe17 	ldw	r7,-8(r16)
   12264:	31cdc83a 	sub	r6,r6,r7
   12268:	30c00317 	ldw	r3,12(r6)
   1226c:	31400217 	ldw	r5,8(r6)
   12270:	11c5883a 	add	r2,r2,r7
   12274:	28c00315 	stw	r3,12(r5)
   12278:	19400215 	stw	r5,8(r3)
   1227c:	10c00054 	ori	r3,r2,1
   12280:	30c00115 	stw	r3,4(r6)
   12284:	00c00074 	movhi	r3,1
   12288:	18dd3f04 	addi	r3,r3,29948
   1228c:	18c00017 	ldw	r3,0(r3)
   12290:	21800215 	stw	r6,8(r4)
   12294:	10ffc036 	bltu	r2,r3,12198 <_free_r+0xf0>
   12298:	008000b4 	movhi	r2,2
   1229c:	10a3f304 	addi	r2,r2,-28724
   122a0:	11400017 	ldw	r5,0(r2)
   122a4:	8809883a 	mov	r4,r17
   122a8:	0011f840 	call	11f84 <_malloc_trim_r>
   122ac:	003fba06 	br	12198 <_free_r+0xf0>
   122b0:	28c9883a 	add	r4,r5,r3
   122b4:	21000117 	ldw	r4,4(r4)
   122b8:	2100004c 	andi	r4,r4,1
   122bc:	2000391e 	bne	r4,zero,123a4 <_free_r+0x2fc>
   122c0:	29c00217 	ldw	r7,8(r5)
   122c4:	29000317 	ldw	r4,12(r5)
   122c8:	1885883a 	add	r2,r3,r2
   122cc:	10c00054 	ori	r3,r2,1
   122d0:	39000315 	stw	r4,12(r7)
   122d4:	21c00215 	stw	r7,8(r4)
   122d8:	30c00115 	stw	r3,4(r6)
   122dc:	308d883a 	add	r6,r6,r2
   122e0:	30800015 	stw	r2,0(r6)
   122e4:	003fac06 	br	12198 <_free_r+0xf0>
   122e8:	00c00504 	movi	r3,20
   122ec:	19401536 	bltu	r3,r5,12344 <_free_r+0x29c>
   122f0:	28c01704 	addi	r3,r5,92
   122f4:	18c7883a 	add	r3,r3,r3
   122f8:	294016c4 	addi	r5,r5,91
   122fc:	003fb406 	br	121d0 <_free_r+0x128>
   12300:	280bd0ba 	srai	r5,r5,2
   12304:	00c00044 	movi	r3,1
   12308:	38800117 	ldw	r2,4(r7)
   1230c:	194a983a 	sll	r5,r3,r5
   12310:	2007883a 	mov	r3,r4
   12314:	2884b03a 	or	r2,r5,r2
   12318:	38800115 	stw	r2,4(r7)
   1231c:	003fbb06 	br	1220c <_free_r+0x164>
   12320:	21800515 	stw	r6,20(r4)
   12324:	21800415 	stw	r6,16(r4)
   12328:	10c00054 	ori	r3,r2,1
   1232c:	31c00315 	stw	r7,12(r6)
   12330:	31c00215 	stw	r7,8(r6)
   12334:	30c00115 	stw	r3,4(r6)
   12338:	308d883a 	add	r6,r6,r2
   1233c:	30800015 	stw	r2,0(r6)
   12340:	003f9506 	br	12198 <_free_r+0xf0>
   12344:	00c01504 	movi	r3,84
   12348:	19400536 	bltu	r3,r5,12360 <_free_r+0x2b8>
   1234c:	100ad33a 	srli	r5,r2,12
   12350:	28c01bc4 	addi	r3,r5,111
   12354:	18c7883a 	add	r3,r3,r3
   12358:	29401b84 	addi	r5,r5,110
   1235c:	003f9c06 	br	121d0 <_free_r+0x128>
   12360:	00c05504 	movi	r3,340
   12364:	19400536 	bltu	r3,r5,1237c <_free_r+0x2d4>
   12368:	100ad3fa 	srli	r5,r2,15
   1236c:	28c01e04 	addi	r3,r5,120
   12370:	18c7883a 	add	r3,r3,r3
   12374:	29401dc4 	addi	r5,r5,119
   12378:	003f9506 	br	121d0 <_free_r+0x128>
   1237c:	00c15504 	movi	r3,1364
   12380:	19400536 	bltu	r3,r5,12398 <_free_r+0x2f0>
   12384:	100ad4ba 	srli	r5,r2,18
   12388:	28c01f44 	addi	r3,r5,125
   1238c:	18c7883a 	add	r3,r3,r3
   12390:	29401f04 	addi	r5,r5,124
   12394:	003f8e06 	br	121d0 <_free_r+0x128>
   12398:	00c03f84 	movi	r3,254
   1239c:	01401f84 	movi	r5,126
   123a0:	003f8b06 	br	121d0 <_free_r+0x128>
   123a4:	10c00054 	ori	r3,r2,1
   123a8:	30c00115 	stw	r3,4(r6)
   123ac:	308d883a 	add	r6,r6,r2
   123b0:	30800015 	stw	r2,0(r6)
   123b4:	003f7806 	br	12198 <_free_r+0xf0>

000123b8 <_fwalk>:
   123b8:	defff704 	addi	sp,sp,-36
   123bc:	dd000415 	stw	r20,16(sp)
   123c0:	dfc00815 	stw	ra,32(sp)
   123c4:	ddc00715 	stw	r23,28(sp)
   123c8:	dd800615 	stw	r22,24(sp)
   123cc:	dd400515 	stw	r21,20(sp)
   123d0:	dcc00315 	stw	r19,12(sp)
   123d4:	dc800215 	stw	r18,8(sp)
   123d8:	dc400115 	stw	r17,4(sp)
   123dc:	dc000015 	stw	r16,0(sp)
   123e0:	2500b804 	addi	r20,r4,736
   123e4:	a0002326 	beq	r20,zero,12474 <_fwalk+0xbc>
   123e8:	282b883a 	mov	r21,r5
   123ec:	002f883a 	mov	r23,zero
   123f0:	05800044 	movi	r22,1
   123f4:	04ffffc4 	movi	r19,-1
   123f8:	a4400117 	ldw	r17,4(r20)
   123fc:	a4800217 	ldw	r18,8(r20)
   12400:	8c7fffc4 	addi	r17,r17,-1
   12404:	88000d16 	blt	r17,zero,1243c <_fwalk+0x84>
   12408:	94000304 	addi	r16,r18,12
   1240c:	94800384 	addi	r18,r18,14
   12410:	8080000b 	ldhu	r2,0(r16)
   12414:	8c7fffc4 	addi	r17,r17,-1
   12418:	813ffd04 	addi	r4,r16,-12
   1241c:	b080042e 	bgeu	r22,r2,12430 <_fwalk+0x78>
   12420:	9080000f 	ldh	r2,0(r18)
   12424:	14c00226 	beq	r2,r19,12430 <_fwalk+0x78>
   12428:	a83ee83a 	callr	r21
   1242c:	b8aeb03a 	or	r23,r23,r2
   12430:	84001a04 	addi	r16,r16,104
   12434:	94801a04 	addi	r18,r18,104
   12438:	8cfff51e 	bne	r17,r19,12410 <_fwalk+0x58>
   1243c:	a5000017 	ldw	r20,0(r20)
   12440:	a03fed1e 	bne	r20,zero,123f8 <_fwalk+0x40>
   12444:	b805883a 	mov	r2,r23
   12448:	dfc00817 	ldw	ra,32(sp)
   1244c:	ddc00717 	ldw	r23,28(sp)
   12450:	dd800617 	ldw	r22,24(sp)
   12454:	dd400517 	ldw	r21,20(sp)
   12458:	dd000417 	ldw	r20,16(sp)
   1245c:	dcc00317 	ldw	r19,12(sp)
   12460:	dc800217 	ldw	r18,8(sp)
   12464:	dc400117 	ldw	r17,4(sp)
   12468:	dc000017 	ldw	r16,0(sp)
   1246c:	dec00904 	addi	sp,sp,36
   12470:	f800283a 	ret
   12474:	002f883a 	mov	r23,zero
   12478:	003ff206 	br	12444 <_fwalk+0x8c>

0001247c <_fwalk_reent>:
   1247c:	defff704 	addi	sp,sp,-36
   12480:	dd000415 	stw	r20,16(sp)
   12484:	dfc00815 	stw	ra,32(sp)
   12488:	ddc00715 	stw	r23,28(sp)
   1248c:	dd800615 	stw	r22,24(sp)
   12490:	dd400515 	stw	r21,20(sp)
   12494:	dcc00315 	stw	r19,12(sp)
   12498:	dc800215 	stw	r18,8(sp)
   1249c:	dc400115 	stw	r17,4(sp)
   124a0:	dc000015 	stw	r16,0(sp)
   124a4:	2500b804 	addi	r20,r4,736
   124a8:	a0002326 	beq	r20,zero,12538 <_fwalk_reent+0xbc>
   124ac:	282b883a 	mov	r21,r5
   124b0:	2027883a 	mov	r19,r4
   124b4:	002f883a 	mov	r23,zero
   124b8:	05800044 	movi	r22,1
   124bc:	04bfffc4 	movi	r18,-1
   124c0:	a4400117 	ldw	r17,4(r20)
   124c4:	a4000217 	ldw	r16,8(r20)
   124c8:	8c7fffc4 	addi	r17,r17,-1
   124cc:	88000c16 	blt	r17,zero,12500 <_fwalk_reent+0x84>
   124d0:	84000304 	addi	r16,r16,12
   124d4:	8080000b 	ldhu	r2,0(r16)
   124d8:	8c7fffc4 	addi	r17,r17,-1
   124dc:	817ffd04 	addi	r5,r16,-12
   124e0:	b080052e 	bgeu	r22,r2,124f8 <_fwalk_reent+0x7c>
   124e4:	8080008f 	ldh	r2,2(r16)
   124e8:	9809883a 	mov	r4,r19
   124ec:	14800226 	beq	r2,r18,124f8 <_fwalk_reent+0x7c>
   124f0:	a83ee83a 	callr	r21
   124f4:	b8aeb03a 	or	r23,r23,r2
   124f8:	84001a04 	addi	r16,r16,104
   124fc:	8cbff51e 	bne	r17,r18,124d4 <_fwalk_reent+0x58>
   12500:	a5000017 	ldw	r20,0(r20)
   12504:	a03fee1e 	bne	r20,zero,124c0 <_fwalk_reent+0x44>
   12508:	b805883a 	mov	r2,r23
   1250c:	dfc00817 	ldw	ra,32(sp)
   12510:	ddc00717 	ldw	r23,28(sp)
   12514:	dd800617 	ldw	r22,24(sp)
   12518:	dd400517 	ldw	r21,20(sp)
   1251c:	dd000417 	ldw	r20,16(sp)
   12520:	dcc00317 	ldw	r19,12(sp)
   12524:	dc800217 	ldw	r18,8(sp)
   12528:	dc400117 	ldw	r17,4(sp)
   1252c:	dc000017 	ldw	r16,0(sp)
   12530:	dec00904 	addi	sp,sp,36
   12534:	f800283a 	ret
   12538:	002f883a 	mov	r23,zero
   1253c:	003ff206 	br	12508 <_fwalk_reent+0x8c>

00012540 <_isatty_r>:
   12540:	defffd04 	addi	sp,sp,-12
   12544:	dc000015 	stw	r16,0(sp)
   12548:	040000b4 	movhi	r16,2
   1254c:	dc400115 	stw	r17,4(sp)
   12550:	8423f004 	addi	r16,r16,-28736
   12554:	2023883a 	mov	r17,r4
   12558:	2809883a 	mov	r4,r5
   1255c:	dfc00215 	stw	ra,8(sp)
   12560:	80000015 	stw	zero,0(r16)
   12564:	00129f00 	call	129f0 <isatty>
   12568:	00ffffc4 	movi	r3,-1
   1256c:	10c00526 	beq	r2,r3,12584 <_isatty_r+0x44>
   12570:	dfc00217 	ldw	ra,8(sp)
   12574:	dc400117 	ldw	r17,4(sp)
   12578:	dc000017 	ldw	r16,0(sp)
   1257c:	dec00304 	addi	sp,sp,12
   12580:	f800283a 	ret
   12584:	80c00017 	ldw	r3,0(r16)
   12588:	183ff926 	beq	r3,zero,12570 <_isatty_r+0x30>
   1258c:	88c00015 	stw	r3,0(r17)
   12590:	003ff706 	br	12570 <_isatty_r+0x30>

00012594 <_lseek_r>:
   12594:	defffd04 	addi	sp,sp,-12
   12598:	2805883a 	mov	r2,r5
   1259c:	dc000015 	stw	r16,0(sp)
   125a0:	040000b4 	movhi	r16,2
   125a4:	dc400115 	stw	r17,4(sp)
   125a8:	300b883a 	mov	r5,r6
   125ac:	8423f004 	addi	r16,r16,-28736
   125b0:	2023883a 	mov	r17,r4
   125b4:	380d883a 	mov	r6,r7
   125b8:	1009883a 	mov	r4,r2
   125bc:	dfc00215 	stw	ra,8(sp)
   125c0:	80000015 	stw	zero,0(r16)
   125c4:	0012bc40 	call	12bc4 <lseek>
   125c8:	00ffffc4 	movi	r3,-1
   125cc:	10c00526 	beq	r2,r3,125e4 <_lseek_r+0x50>
   125d0:	dfc00217 	ldw	ra,8(sp)
   125d4:	dc400117 	ldw	r17,4(sp)
   125d8:	dc000017 	ldw	r16,0(sp)
   125dc:	dec00304 	addi	sp,sp,12
   125e0:	f800283a 	ret
   125e4:	80c00017 	ldw	r3,0(r16)
   125e8:	183ff926 	beq	r3,zero,125d0 <_lseek_r+0x3c>
   125ec:	88c00015 	stw	r3,0(r17)
   125f0:	003ff706 	br	125d0 <_lseek_r+0x3c>

000125f4 <_read_r>:
   125f4:	defffd04 	addi	sp,sp,-12
   125f8:	2805883a 	mov	r2,r5
   125fc:	dc000015 	stw	r16,0(sp)
   12600:	040000b4 	movhi	r16,2
   12604:	dc400115 	stw	r17,4(sp)
   12608:	300b883a 	mov	r5,r6
   1260c:	8423f004 	addi	r16,r16,-28736
   12610:	2023883a 	mov	r17,r4
   12614:	380d883a 	mov	r6,r7
   12618:	1009883a 	mov	r4,r2
   1261c:	dfc00215 	stw	ra,8(sp)
   12620:	80000015 	stw	zero,0(r16)
   12624:	001328c0 	call	1328c <read>
   12628:	00ffffc4 	movi	r3,-1
   1262c:	10c00526 	beq	r2,r3,12644 <_read_r+0x50>
   12630:	dfc00217 	ldw	ra,8(sp)
   12634:	dc400117 	ldw	r17,4(sp)
   12638:	dc000017 	ldw	r16,0(sp)
   1263c:	dec00304 	addi	sp,sp,12
   12640:	f800283a 	ret
   12644:	80c00017 	ldw	r3,0(r16)
   12648:	183ff926 	beq	r3,zero,12630 <_read_r+0x3c>
   1264c:	88c00015 	stw	r3,0(r17)
   12650:	003ff706 	br	12630 <_read_r+0x3c>

00012654 <_fclose_r>:
   12654:	28003926 	beq	r5,zero,1273c <_fclose_r+0xe8>
   12658:	defffc04 	addi	sp,sp,-16
   1265c:	dc400115 	stw	r17,4(sp)
   12660:	dc000015 	stw	r16,0(sp)
   12664:	dfc00315 	stw	ra,12(sp)
   12668:	dc800215 	stw	r18,8(sp)
   1266c:	2023883a 	mov	r17,r4
   12670:	2821883a 	mov	r16,r5
   12674:	20000226 	beq	r4,zero,12680 <_fclose_r+0x2c>
   12678:	20800e17 	ldw	r2,56(r4)
   1267c:	10002726 	beq	r2,zero,1271c <_fclose_r+0xc8>
   12680:	8080030f 	ldh	r2,12(r16)
   12684:	1000071e 	bne	r2,zero,126a4 <_fclose_r+0x50>
   12688:	0005883a 	mov	r2,zero
   1268c:	dfc00317 	ldw	ra,12(sp)
   12690:	dc800217 	ldw	r18,8(sp)
   12694:	dc400117 	ldw	r17,4(sp)
   12698:	dc000017 	ldw	r16,0(sp)
   1269c:	dec00404 	addi	sp,sp,16
   126a0:	f800283a 	ret
   126a4:	800b883a 	mov	r5,r16
   126a8:	8809883a 	mov	r4,r17
   126ac:	00118800 	call	11880 <__sflush_r>
   126b0:	1025883a 	mov	r18,r2
   126b4:	80800b17 	ldw	r2,44(r16)
   126b8:	10000426 	beq	r2,zero,126cc <_fclose_r+0x78>
   126bc:	81400717 	ldw	r5,28(r16)
   126c0:	8809883a 	mov	r4,r17
   126c4:	103ee83a 	callr	r2
   126c8:	10001616 	blt	r2,zero,12724 <_fclose_r+0xd0>
   126cc:	8080030b 	ldhu	r2,12(r16)
   126d0:	1080200c 	andi	r2,r2,128
   126d4:	1000151e 	bne	r2,zero,1272c <_fclose_r+0xd8>
   126d8:	81400c17 	ldw	r5,48(r16)
   126dc:	28000526 	beq	r5,zero,126f4 <_fclose_r+0xa0>
   126e0:	80801004 	addi	r2,r16,64
   126e4:	28800226 	beq	r5,r2,126f0 <_fclose_r+0x9c>
   126e8:	8809883a 	mov	r4,r17
   126ec:	00120a80 	call	120a8 <_free_r>
   126f0:	80000c15 	stw	zero,48(r16)
   126f4:	81401117 	ldw	r5,68(r16)
   126f8:	28000326 	beq	r5,zero,12708 <_fclose_r+0xb4>
   126fc:	8809883a 	mov	r4,r17
   12700:	00120a80 	call	120a8 <_free_r>
   12704:	80001115 	stw	zero,68(r16)
   12708:	0011e980 	call	11e98 <__sfp_lock_acquire>
   1270c:	8000030d 	sth	zero,12(r16)
   12710:	0011e9c0 	call	11e9c <__sfp_lock_release>
   12714:	9005883a 	mov	r2,r18
   12718:	003fdc06 	br	1268c <_fclose_r+0x38>
   1271c:	0011e880 	call	11e88 <__sinit>
   12720:	003fd706 	br	12680 <_fclose_r+0x2c>
   12724:	04bfffc4 	movi	r18,-1
   12728:	003fe806 	br	126cc <_fclose_r+0x78>
   1272c:	81400417 	ldw	r5,16(r16)
   12730:	8809883a 	mov	r4,r17
   12734:	00120a80 	call	120a8 <_free_r>
   12738:	003fe706 	br	126d8 <_fclose_r+0x84>
   1273c:	0005883a 	mov	r2,zero
   12740:	f800283a 	ret

00012744 <fclose>:
   12744:	00800074 	movhi	r2,1
   12748:	109d3d04 	addi	r2,r2,29940
   1274c:	200b883a 	mov	r5,r4
   12750:	11000017 	ldw	r4,0(r2)
   12754:	00126541 	jmpi	12654 <_fclose_r>

00012758 <__mulsi3>:
   12758:	0005883a 	mov	r2,zero
   1275c:	20000726 	beq	r4,zero,1277c <__mulsi3+0x24>
   12760:	20c0004c 	andi	r3,r4,1
   12764:	2008d07a 	srli	r4,r4,1
   12768:	18000126 	beq	r3,zero,12770 <__mulsi3+0x18>
   1276c:	1145883a 	add	r2,r2,r5
   12770:	294b883a 	add	r5,r5,r5
   12774:	203ffa1e 	bne	r4,zero,12760 <__mulsi3+0x8>
   12778:	f800283a 	ret
   1277c:	f800283a 	ret

00012780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12780:	defffe04 	addi	sp,sp,-8
   12784:	dfc00115 	stw	ra,4(sp)
   12788:	df000015 	stw	fp,0(sp)
   1278c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12790:	d0a00917 	ldw	r2,-32732(gp)
   12794:	10000326 	beq	r2,zero,127a4 <alt_get_errno+0x24>
   12798:	d0a00917 	ldw	r2,-32732(gp)
   1279c:	103ee83a 	callr	r2
   127a0:	00000106 	br	127a8 <alt_get_errno+0x28>
   127a4:	d0a6b404 	addi	r2,gp,-25904
}
   127a8:	e037883a 	mov	sp,fp
   127ac:	dfc00117 	ldw	ra,4(sp)
   127b0:	df000017 	ldw	fp,0(sp)
   127b4:	dec00204 	addi	sp,sp,8
   127b8:	f800283a 	ret

000127bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   127bc:	defffb04 	addi	sp,sp,-20
   127c0:	dfc00415 	stw	ra,16(sp)
   127c4:	df000315 	stw	fp,12(sp)
   127c8:	df000304 	addi	fp,sp,12
   127cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   127d0:	e0bfff17 	ldw	r2,-4(fp)
   127d4:	10000816 	blt	r2,zero,127f8 <close+0x3c>
   127d8:	01400304 	movi	r5,12
   127dc:	e13fff17 	ldw	r4,-4(fp)
   127e0:	00127580 	call	12758 <__mulsi3>
   127e4:	1007883a 	mov	r3,r2
   127e8:	00800074 	movhi	r2,1
   127ec:	1098b904 	addi	r2,r2,25316
   127f0:	1885883a 	add	r2,r3,r2
   127f4:	00000106 	br	127fc <close+0x40>
   127f8:	0005883a 	mov	r2,zero
   127fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12800:	e0bffd17 	ldw	r2,-12(fp)
   12804:	10001926 	beq	r2,zero,1286c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12808:	e0bffd17 	ldw	r2,-12(fp)
   1280c:	10800017 	ldw	r2,0(r2)
   12810:	10800417 	ldw	r2,16(r2)
   12814:	10000626 	beq	r2,zero,12830 <close+0x74>
   12818:	e0bffd17 	ldw	r2,-12(fp)
   1281c:	10800017 	ldw	r2,0(r2)
   12820:	10800417 	ldw	r2,16(r2)
   12824:	e13ffd17 	ldw	r4,-12(fp)
   12828:	103ee83a 	callr	r2
   1282c:	00000106 	br	12834 <close+0x78>
   12830:	0005883a 	mov	r2,zero
   12834:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12838:	e13fff17 	ldw	r4,-4(fp)
   1283c:	00133900 	call	13390 <alt_release_fd>
    if (rval < 0)
   12840:	e0bffe17 	ldw	r2,-8(fp)
   12844:	1000070e 	bge	r2,zero,12864 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   12848:	00127800 	call	12780 <alt_get_errno>
   1284c:	1007883a 	mov	r3,r2
   12850:	e0bffe17 	ldw	r2,-8(fp)
   12854:	0085c83a 	sub	r2,zero,r2
   12858:	18800015 	stw	r2,0(r3)
      return -1;
   1285c:	00bfffc4 	movi	r2,-1
   12860:	00000706 	br	12880 <close+0xc4>
    }
    return 0;
   12864:	0005883a 	mov	r2,zero
   12868:	00000506 	br	12880 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1286c:	00127800 	call	12780 <alt_get_errno>
   12870:	1007883a 	mov	r3,r2
   12874:	00801444 	movi	r2,81
   12878:	18800015 	stw	r2,0(r3)
    return -1;
   1287c:	00bfffc4 	movi	r2,-1
  }
}
   12880:	e037883a 	mov	sp,fp
   12884:	dfc00117 	ldw	ra,4(sp)
   12888:	df000017 	ldw	fp,0(sp)
   1288c:	dec00204 	addi	sp,sp,8
   12890:	f800283a 	ret

00012894 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12894:	defffc04 	addi	sp,sp,-16
   12898:	df000315 	stw	fp,12(sp)
   1289c:	df000304 	addi	fp,sp,12
   128a0:	e13ffd15 	stw	r4,-12(fp)
   128a4:	e17ffe15 	stw	r5,-8(fp)
   128a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   128ac:	e0bfff17 	ldw	r2,-4(fp)
}
   128b0:	e037883a 	mov	sp,fp
   128b4:	df000017 	ldw	fp,0(sp)
   128b8:	dec00104 	addi	sp,sp,4
   128bc:	f800283a 	ret

000128c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   128c0:	defffe04 	addi	sp,sp,-8
   128c4:	dfc00115 	stw	ra,4(sp)
   128c8:	df000015 	stw	fp,0(sp)
   128cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   128d0:	d0a00917 	ldw	r2,-32732(gp)
   128d4:	10000326 	beq	r2,zero,128e4 <alt_get_errno+0x24>
   128d8:	d0a00917 	ldw	r2,-32732(gp)
   128dc:	103ee83a 	callr	r2
   128e0:	00000106 	br	128e8 <alt_get_errno+0x28>
   128e4:	d0a6b404 	addi	r2,gp,-25904
}
   128e8:	e037883a 	mov	sp,fp
   128ec:	dfc00117 	ldw	ra,4(sp)
   128f0:	df000017 	ldw	fp,0(sp)
   128f4:	dec00204 	addi	sp,sp,8
   128f8:	f800283a 	ret

000128fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   128fc:	defffb04 	addi	sp,sp,-20
   12900:	dfc00415 	stw	ra,16(sp)
   12904:	df000315 	stw	fp,12(sp)
   12908:	df000304 	addi	fp,sp,12
   1290c:	e13ffe15 	stw	r4,-8(fp)
   12910:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12914:	e0bffe17 	ldw	r2,-8(fp)
   12918:	10000816 	blt	r2,zero,1293c <fstat+0x40>
   1291c:	01400304 	movi	r5,12
   12920:	e13ffe17 	ldw	r4,-8(fp)
   12924:	00127580 	call	12758 <__mulsi3>
   12928:	1007883a 	mov	r3,r2
   1292c:	00800074 	movhi	r2,1
   12930:	1098b904 	addi	r2,r2,25316
   12934:	1885883a 	add	r2,r3,r2
   12938:	00000106 	br	12940 <fstat+0x44>
   1293c:	0005883a 	mov	r2,zero
   12940:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12944:	e0bffd17 	ldw	r2,-12(fp)
   12948:	10001026 	beq	r2,zero,1298c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1294c:	e0bffd17 	ldw	r2,-12(fp)
   12950:	10800017 	ldw	r2,0(r2)
   12954:	10800817 	ldw	r2,32(r2)
   12958:	10000726 	beq	r2,zero,12978 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1295c:	e0bffd17 	ldw	r2,-12(fp)
   12960:	10800017 	ldw	r2,0(r2)
   12964:	10800817 	ldw	r2,32(r2)
   12968:	e17fff17 	ldw	r5,-4(fp)
   1296c:	e13ffd17 	ldw	r4,-12(fp)
   12970:	103ee83a 	callr	r2
   12974:	00000a06 	br	129a0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12978:	e0bfff17 	ldw	r2,-4(fp)
   1297c:	00c80004 	movi	r3,8192
   12980:	10c00115 	stw	r3,4(r2)
      return 0;
   12984:	0005883a 	mov	r2,zero
   12988:	00000506 	br	129a0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1298c:	00128c00 	call	128c0 <alt_get_errno>
   12990:	1007883a 	mov	r3,r2
   12994:	00801444 	movi	r2,81
   12998:	18800015 	stw	r2,0(r3)
    return -1;
   1299c:	00bfffc4 	movi	r2,-1
  }
}
   129a0:	e037883a 	mov	sp,fp
   129a4:	dfc00117 	ldw	ra,4(sp)
   129a8:	df000017 	ldw	fp,0(sp)
   129ac:	dec00204 	addi	sp,sp,8
   129b0:	f800283a 	ret

000129b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   129b4:	defffe04 	addi	sp,sp,-8
   129b8:	dfc00115 	stw	ra,4(sp)
   129bc:	df000015 	stw	fp,0(sp)
   129c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   129c4:	d0a00917 	ldw	r2,-32732(gp)
   129c8:	10000326 	beq	r2,zero,129d8 <alt_get_errno+0x24>
   129cc:	d0a00917 	ldw	r2,-32732(gp)
   129d0:	103ee83a 	callr	r2
   129d4:	00000106 	br	129dc <alt_get_errno+0x28>
   129d8:	d0a6b404 	addi	r2,gp,-25904
}
   129dc:	e037883a 	mov	sp,fp
   129e0:	dfc00117 	ldw	ra,4(sp)
   129e4:	df000017 	ldw	fp,0(sp)
   129e8:	dec00204 	addi	sp,sp,8
   129ec:	f800283a 	ret

000129f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   129f0:	deffed04 	addi	sp,sp,-76
   129f4:	dfc01215 	stw	ra,72(sp)
   129f8:	df001115 	stw	fp,68(sp)
   129fc:	df001104 	addi	fp,sp,68
   12a00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12a04:	e0bfff17 	ldw	r2,-4(fp)
   12a08:	10000816 	blt	r2,zero,12a2c <isatty+0x3c>
   12a0c:	01400304 	movi	r5,12
   12a10:	e13fff17 	ldw	r4,-4(fp)
   12a14:	00127580 	call	12758 <__mulsi3>
   12a18:	1007883a 	mov	r3,r2
   12a1c:	00800074 	movhi	r2,1
   12a20:	1098b904 	addi	r2,r2,25316
   12a24:	1885883a 	add	r2,r3,r2
   12a28:	00000106 	br	12a30 <isatty+0x40>
   12a2c:	0005883a 	mov	r2,zero
   12a30:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   12a34:	e0bfef17 	ldw	r2,-68(fp)
   12a38:	10000e26 	beq	r2,zero,12a74 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12a3c:	e0bfef17 	ldw	r2,-68(fp)
   12a40:	10800017 	ldw	r2,0(r2)
   12a44:	10800817 	ldw	r2,32(r2)
   12a48:	1000021e 	bne	r2,zero,12a54 <isatty+0x64>
    {
      return 1;
   12a4c:	00800044 	movi	r2,1
   12a50:	00000d06 	br	12a88 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12a54:	e0bff004 	addi	r2,fp,-64
   12a58:	100b883a 	mov	r5,r2
   12a5c:	e13fff17 	ldw	r4,-4(fp)
   12a60:	00128fc0 	call	128fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12a64:	e0bff117 	ldw	r2,-60(fp)
   12a68:	10880020 	cmpeqi	r2,r2,8192
   12a6c:	10803fcc 	andi	r2,r2,255
   12a70:	00000506 	br	12a88 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12a74:	00129b40 	call	129b4 <alt_get_errno>
   12a78:	1007883a 	mov	r3,r2
   12a7c:	00801444 	movi	r2,81
   12a80:	18800015 	stw	r2,0(r3)
    return 0;
   12a84:	0005883a 	mov	r2,zero
  }
}
   12a88:	e037883a 	mov	sp,fp
   12a8c:	dfc00117 	ldw	ra,4(sp)
   12a90:	df000017 	ldw	fp,0(sp)
   12a94:	dec00204 	addi	sp,sp,8
   12a98:	f800283a 	ret

00012a9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12a9c:	defffc04 	addi	sp,sp,-16
   12aa0:	df000315 	stw	fp,12(sp)
   12aa4:	df000304 	addi	fp,sp,12
   12aa8:	e13ffd15 	stw	r4,-12(fp)
   12aac:	e17ffe15 	stw	r5,-8(fp)
   12ab0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12ab4:	e0fffe17 	ldw	r3,-8(fp)
   12ab8:	e0bffd17 	ldw	r2,-12(fp)
   12abc:	18800c26 	beq	r3,r2,12af0 <alt_load_section+0x54>
  {
    while( to != end )
   12ac0:	00000806 	br	12ae4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12ac4:	e0bffe17 	ldw	r2,-8(fp)
   12ac8:	10c00104 	addi	r3,r2,4
   12acc:	e0fffe15 	stw	r3,-8(fp)
   12ad0:	e0fffd17 	ldw	r3,-12(fp)
   12ad4:	19000104 	addi	r4,r3,4
   12ad8:	e13ffd15 	stw	r4,-12(fp)
   12adc:	18c00017 	ldw	r3,0(r3)
   12ae0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12ae4:	e0fffe17 	ldw	r3,-8(fp)
   12ae8:	e0bfff17 	ldw	r2,-4(fp)
   12aec:	18bff51e 	bne	r3,r2,12ac4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   12af0:	0001883a 	nop
   12af4:	e037883a 	mov	sp,fp
   12af8:	df000017 	ldw	fp,0(sp)
   12afc:	dec00104 	addi	sp,sp,4
   12b00:	f800283a 	ret

00012b04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12b04:	defffe04 	addi	sp,sp,-8
   12b08:	dfc00115 	stw	ra,4(sp)
   12b0c:	df000015 	stw	fp,0(sp)
   12b10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12b14:	01800074 	movhi	r6,1
   12b18:	319d4a04 	addi	r6,r6,29992
   12b1c:	01400074 	movhi	r5,1
   12b20:	2956a404 	addi	r5,r5,23184
   12b24:	01000074 	movhi	r4,1
   12b28:	211d4a04 	addi	r4,r4,29992
   12b2c:	0012a9c0 	call	12a9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12b30:	01800074 	movhi	r6,1
   12b34:	31808d04 	addi	r6,r6,564
   12b38:	01400074 	movhi	r5,1
   12b3c:	29400804 	addi	r5,r5,32
   12b40:	01000074 	movhi	r4,1
   12b44:	21000804 	addi	r4,r4,32
   12b48:	0012a9c0 	call	12a9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12b4c:	01800074 	movhi	r6,1
   12b50:	3196a404 	addi	r6,r6,23184
   12b54:	01400074 	movhi	r5,1
   12b58:	29568304 	addi	r5,r5,23052
   12b5c:	01000074 	movhi	r4,1
   12b60:	21168304 	addi	r4,r4,23052
   12b64:	0012a9c0 	call	12a9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12b68:	00147040 	call	14704 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12b6c:	0014b200 	call	14b20 <alt_icache_flush_all>
}
   12b70:	0001883a 	nop
   12b74:	e037883a 	mov	sp,fp
   12b78:	dfc00117 	ldw	ra,4(sp)
   12b7c:	df000017 	ldw	fp,0(sp)
   12b80:	dec00204 	addi	sp,sp,8
   12b84:	f800283a 	ret

00012b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12b88:	defffe04 	addi	sp,sp,-8
   12b8c:	dfc00115 	stw	ra,4(sp)
   12b90:	df000015 	stw	fp,0(sp)
   12b94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12b98:	d0a00917 	ldw	r2,-32732(gp)
   12b9c:	10000326 	beq	r2,zero,12bac <alt_get_errno+0x24>
   12ba0:	d0a00917 	ldw	r2,-32732(gp)
   12ba4:	103ee83a 	callr	r2
   12ba8:	00000106 	br	12bb0 <alt_get_errno+0x28>
   12bac:	d0a6b404 	addi	r2,gp,-25904
}
   12bb0:	e037883a 	mov	sp,fp
   12bb4:	dfc00117 	ldw	ra,4(sp)
   12bb8:	df000017 	ldw	fp,0(sp)
   12bbc:	dec00204 	addi	sp,sp,8
   12bc0:	f800283a 	ret

00012bc4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12bc4:	defff904 	addi	sp,sp,-28
   12bc8:	dfc00615 	stw	ra,24(sp)
   12bcc:	df000515 	stw	fp,20(sp)
   12bd0:	df000504 	addi	fp,sp,20
   12bd4:	e13ffd15 	stw	r4,-12(fp)
   12bd8:	e17ffe15 	stw	r5,-8(fp)
   12bdc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12be0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12be4:	e0bffd17 	ldw	r2,-12(fp)
   12be8:	10000816 	blt	r2,zero,12c0c <lseek+0x48>
   12bec:	01400304 	movi	r5,12
   12bf0:	e13ffd17 	ldw	r4,-12(fp)
   12bf4:	00127580 	call	12758 <__mulsi3>
   12bf8:	1007883a 	mov	r3,r2
   12bfc:	00800074 	movhi	r2,1
   12c00:	1098b904 	addi	r2,r2,25316
   12c04:	1885883a 	add	r2,r3,r2
   12c08:	00000106 	br	12c10 <lseek+0x4c>
   12c0c:	0005883a 	mov	r2,zero
   12c10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	10001026 	beq	r2,zero,12c5c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12c1c:	e0bffc17 	ldw	r2,-16(fp)
   12c20:	10800017 	ldw	r2,0(r2)
   12c24:	10800717 	ldw	r2,28(r2)
   12c28:	10000926 	beq	r2,zero,12c50 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12c2c:	e0bffc17 	ldw	r2,-16(fp)
   12c30:	10800017 	ldw	r2,0(r2)
   12c34:	10800717 	ldw	r2,28(r2)
   12c38:	e1bfff17 	ldw	r6,-4(fp)
   12c3c:	e17ffe17 	ldw	r5,-8(fp)
   12c40:	e13ffc17 	ldw	r4,-16(fp)
   12c44:	103ee83a 	callr	r2
   12c48:	e0bffb15 	stw	r2,-20(fp)
   12c4c:	00000506 	br	12c64 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12c50:	00bfde84 	movi	r2,-134
   12c54:	e0bffb15 	stw	r2,-20(fp)
   12c58:	00000206 	br	12c64 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   12c5c:	00bfebc4 	movi	r2,-81
   12c60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12c64:	e0bffb17 	ldw	r2,-20(fp)
   12c68:	1000070e 	bge	r2,zero,12c88 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   12c6c:	0012b880 	call	12b88 <alt_get_errno>
   12c70:	1007883a 	mov	r3,r2
   12c74:	e0bffb17 	ldw	r2,-20(fp)
   12c78:	0085c83a 	sub	r2,zero,r2
   12c7c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12c80:	00bfffc4 	movi	r2,-1
   12c84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12c88:	e0bffb17 	ldw	r2,-20(fp)
}
   12c8c:	e037883a 	mov	sp,fp
   12c90:	dfc00117 	ldw	ra,4(sp)
   12c94:	df000017 	ldw	fp,0(sp)
   12c98:	dec00204 	addi	sp,sp,8
   12c9c:	f800283a 	ret

00012ca0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12ca0:	defffd04 	addi	sp,sp,-12
   12ca4:	dfc00215 	stw	ra,8(sp)
   12ca8:	df000115 	stw	fp,4(sp)
   12cac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12cb0:	0009883a 	mov	r4,zero
   12cb4:	00136340 	call	13634 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12cb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12cbc:	001366c0 	call	1366c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12cc0:	01800074 	movhi	r6,1
   12cc4:	31969604 	addi	r6,r6,23128
   12cc8:	01400074 	movhi	r5,1
   12ccc:	29569604 	addi	r5,r5,23128
   12cd0:	01000074 	movhi	r4,1
   12cd4:	21169604 	addi	r4,r4,23128
   12cd8:	0014c240 	call	14c24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12cdc:	00148040 	call	14804 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12ce0:	01000074 	movhi	r4,1
   12ce4:	21121904 	addi	r4,r4,18532
   12ce8:	00150840 	call	15084 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12cec:	d0a6b817 	ldw	r2,-25888(gp)
   12cf0:	d0e6b917 	ldw	r3,-25884(gp)
   12cf4:	d126ba17 	ldw	r4,-25880(gp)
   12cf8:	200d883a 	mov	r6,r4
   12cfc:	180b883a 	mov	r5,r3
   12d00:	1009883a 	mov	r4,r2
   12d04:	00102700 	call	10270 <main>
   12d08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   12d0c:	01000044 	movi	r4,1
   12d10:	00127bc0 	call	127bc <close>
  exit (result);
   12d14:	e13fff17 	ldw	r4,-4(fp)
   12d18:	00150980 	call	15098 <exit>

00012d1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   12d1c:	defffe04 	addi	sp,sp,-8
   12d20:	df000115 	stw	fp,4(sp)
   12d24:	df000104 	addi	fp,sp,4
   12d28:	e13fff15 	stw	r4,-4(fp)
}
   12d2c:	0001883a 	nop
   12d30:	e037883a 	mov	sp,fp
   12d34:	df000017 	ldw	fp,0(sp)
   12d38:	dec00104 	addi	sp,sp,4
   12d3c:	f800283a 	ret

00012d40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   12d40:	defffe04 	addi	sp,sp,-8
   12d44:	df000115 	stw	fp,4(sp)
   12d48:	df000104 	addi	fp,sp,4
   12d4c:	e13fff15 	stw	r4,-4(fp)
}
   12d50:	0001883a 	nop
   12d54:	e037883a 	mov	sp,fp
   12d58:	df000017 	ldw	fp,0(sp)
   12d5c:	dec00104 	addi	sp,sp,4
   12d60:	f800283a 	ret

00012d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d64:	defffe04 	addi	sp,sp,-8
   12d68:	dfc00115 	stw	ra,4(sp)
   12d6c:	df000015 	stw	fp,0(sp)
   12d70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d74:	d0a00917 	ldw	r2,-32732(gp)
   12d78:	10000326 	beq	r2,zero,12d88 <alt_get_errno+0x24>
   12d7c:	d0a00917 	ldw	r2,-32732(gp)
   12d80:	103ee83a 	callr	r2
   12d84:	00000106 	br	12d8c <alt_get_errno+0x28>
   12d88:	d0a6b404 	addi	r2,gp,-25904
}
   12d8c:	e037883a 	mov	sp,fp
   12d90:	dfc00117 	ldw	ra,4(sp)
   12d94:	df000017 	ldw	fp,0(sp)
   12d98:	dec00204 	addi	sp,sp,8
   12d9c:	f800283a 	ret

00012da0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12da0:	defffb04 	addi	sp,sp,-20
   12da4:	dfc00415 	stw	ra,16(sp)
   12da8:	df000315 	stw	fp,12(sp)
   12dac:	dc000215 	stw	r16,8(sp)
   12db0:	df000304 	addi	fp,sp,12
   12db4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12db8:	e0bffe17 	ldw	r2,-8(fp)
   12dbc:	10800217 	ldw	r2,8(r2)
   12dc0:	10d00034 	orhi	r3,r2,16384
   12dc4:	e0bffe17 	ldw	r2,-8(fp)
   12dc8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12dcc:	e03ffd15 	stw	zero,-12(fp)
   12dd0:	00002306 	br	12e60 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12dd4:	04000074 	movhi	r16,1
   12dd8:	8418b904 	addi	r16,r16,25316
   12ddc:	e0bffd17 	ldw	r2,-12(fp)
   12de0:	01400304 	movi	r5,12
   12de4:	1009883a 	mov	r4,r2
   12de8:	00127580 	call	12758 <__mulsi3>
   12dec:	8085883a 	add	r2,r16,r2
   12df0:	10c00017 	ldw	r3,0(r2)
   12df4:	e0bffe17 	ldw	r2,-8(fp)
   12df8:	10800017 	ldw	r2,0(r2)
   12dfc:	1880151e 	bne	r3,r2,12e54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12e00:	04000074 	movhi	r16,1
   12e04:	8418b904 	addi	r16,r16,25316
   12e08:	e0bffd17 	ldw	r2,-12(fp)
   12e0c:	01400304 	movi	r5,12
   12e10:	1009883a 	mov	r4,r2
   12e14:	00127580 	call	12758 <__mulsi3>
   12e18:	8085883a 	add	r2,r16,r2
   12e1c:	10800204 	addi	r2,r2,8
   12e20:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12e24:	10000b0e 	bge	r2,zero,12e54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12e28:	01400304 	movi	r5,12
   12e2c:	e13ffd17 	ldw	r4,-12(fp)
   12e30:	00127580 	call	12758 <__mulsi3>
   12e34:	1007883a 	mov	r3,r2
   12e38:	00800074 	movhi	r2,1
   12e3c:	1098b904 	addi	r2,r2,25316
   12e40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12e44:	e0bffe17 	ldw	r2,-8(fp)
   12e48:	18800226 	beq	r3,r2,12e54 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12e4c:	00bffcc4 	movi	r2,-13
   12e50:	00000806 	br	12e74 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12e54:	e0bffd17 	ldw	r2,-12(fp)
   12e58:	10800044 	addi	r2,r2,1
   12e5c:	e0bffd15 	stw	r2,-12(fp)
   12e60:	d0a00817 	ldw	r2,-32736(gp)
   12e64:	1007883a 	mov	r3,r2
   12e68:	e0bffd17 	ldw	r2,-12(fp)
   12e6c:	18bfd92e 	bgeu	r3,r2,12dd4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12e70:	0005883a 	mov	r2,zero
}
   12e74:	e6ffff04 	addi	sp,fp,-4
   12e78:	dfc00217 	ldw	ra,8(sp)
   12e7c:	df000117 	ldw	fp,4(sp)
   12e80:	dc000017 	ldw	r16,0(sp)
   12e84:	dec00304 	addi	sp,sp,12
   12e88:	f800283a 	ret

00012e8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12e8c:	defff604 	addi	sp,sp,-40
   12e90:	dfc00915 	stw	ra,36(sp)
   12e94:	df000815 	stw	fp,32(sp)
   12e98:	df000804 	addi	fp,sp,32
   12e9c:	e13ffd15 	stw	r4,-12(fp)
   12ea0:	e17ffe15 	stw	r5,-8(fp)
   12ea4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12ea8:	00bfffc4 	movi	r2,-1
   12eac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12eb0:	00bffb44 	movi	r2,-19
   12eb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12eb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12ebc:	d1600604 	addi	r5,gp,-32744
   12ec0:	e13ffd17 	ldw	r4,-12(fp)
   12ec4:	00148c40 	call	148c4 <alt_find_dev>
   12ec8:	e0bff815 	stw	r2,-32(fp)
   12ecc:	e0bff817 	ldw	r2,-32(fp)
   12ed0:	1000051e 	bne	r2,zero,12ee8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12ed4:	e13ffd17 	ldw	r4,-12(fp)
   12ed8:	00149540 	call	14954 <alt_find_file>
   12edc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12ee0:	00800044 	movi	r2,1
   12ee4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12ee8:	e0bff817 	ldw	r2,-32(fp)
   12eec:	10002b26 	beq	r2,zero,12f9c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12ef0:	e13ff817 	ldw	r4,-32(fp)
   12ef4:	0014a5c0 	call	14a5c <alt_get_fd>
   12ef8:	e0bff915 	stw	r2,-28(fp)
   12efc:	e0bff917 	ldw	r2,-28(fp)
   12f00:	1000030e 	bge	r2,zero,12f10 <open+0x84>
    {
      status = index;
   12f04:	e0bff917 	ldw	r2,-28(fp)
   12f08:	e0bffa15 	stw	r2,-24(fp)
   12f0c:	00002506 	br	12fa4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12f10:	01400304 	movi	r5,12
   12f14:	e13ff917 	ldw	r4,-28(fp)
   12f18:	00127580 	call	12758 <__mulsi3>
   12f1c:	1007883a 	mov	r3,r2
   12f20:	00800074 	movhi	r2,1
   12f24:	1098b904 	addi	r2,r2,25316
   12f28:	1885883a 	add	r2,r3,r2
   12f2c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12f30:	e0fffe17 	ldw	r3,-8(fp)
   12f34:	00900034 	movhi	r2,16384
   12f38:	10bfffc4 	addi	r2,r2,-1
   12f3c:	1886703a 	and	r3,r3,r2
   12f40:	e0bffc17 	ldw	r2,-16(fp)
   12f44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12f48:	e0bffb17 	ldw	r2,-20(fp)
   12f4c:	1000051e 	bne	r2,zero,12f64 <open+0xd8>
   12f50:	e13ffc17 	ldw	r4,-16(fp)
   12f54:	0012da00 	call	12da0 <alt_file_locked>
   12f58:	e0bffa15 	stw	r2,-24(fp)
   12f5c:	e0bffa17 	ldw	r2,-24(fp)
   12f60:	10001016 	blt	r2,zero,12fa4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12f64:	e0bff817 	ldw	r2,-32(fp)
   12f68:	10800317 	ldw	r2,12(r2)
   12f6c:	10000826 	beq	r2,zero,12f90 <open+0x104>
   12f70:	e0bff817 	ldw	r2,-32(fp)
   12f74:	10800317 	ldw	r2,12(r2)
   12f78:	e1ffff17 	ldw	r7,-4(fp)
   12f7c:	e1bffe17 	ldw	r6,-8(fp)
   12f80:	e17ffd17 	ldw	r5,-12(fp)
   12f84:	e13ffc17 	ldw	r4,-16(fp)
   12f88:	103ee83a 	callr	r2
   12f8c:	00000106 	br	12f94 <open+0x108>
   12f90:	0005883a 	mov	r2,zero
   12f94:	e0bffa15 	stw	r2,-24(fp)
   12f98:	00000206 	br	12fa4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12f9c:	00bffb44 	movi	r2,-19
   12fa0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12fa4:	e0bffa17 	ldw	r2,-24(fp)
   12fa8:	1000090e 	bge	r2,zero,12fd0 <open+0x144>
  {
    alt_release_fd (index);  
   12fac:	e13ff917 	ldw	r4,-28(fp)
   12fb0:	00133900 	call	13390 <alt_release_fd>
    ALT_ERRNO = -status;
   12fb4:	0012d640 	call	12d64 <alt_get_errno>
   12fb8:	1007883a 	mov	r3,r2
   12fbc:	e0bffa17 	ldw	r2,-24(fp)
   12fc0:	0085c83a 	sub	r2,zero,r2
   12fc4:	18800015 	stw	r2,0(r3)
    return -1;
   12fc8:	00bfffc4 	movi	r2,-1
   12fcc:	00000106 	br	12fd4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12fd0:	e0bff917 	ldw	r2,-28(fp)
}
   12fd4:	e037883a 	mov	sp,fp
   12fd8:	dfc00117 	ldw	ra,4(sp)
   12fdc:	df000017 	ldw	fp,0(sp)
   12fe0:	dec00204 	addi	sp,sp,8
   12fe4:	f800283a 	ret

00012fe8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   12fe8:	defff204 	addi	sp,sp,-56
   12fec:	dfc00a15 	stw	ra,40(sp)
   12ff0:	df000915 	stw	fp,36(sp)
   12ff4:	df000904 	addi	fp,sp,36
   12ff8:	e13fff15 	stw	r4,-4(fp)
   12ffc:	e1400215 	stw	r5,8(fp)
   13000:	e1800315 	stw	r6,12(fp)
   13004:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   13008:	e0800204 	addi	r2,fp,8
   1300c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   13010:	e0bfff17 	ldw	r2,-4(fp)
   13014:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   13018:	00006f06 	br	131d8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1301c:	e0bff807 	ldb	r2,-32(fp)
   13020:	10800960 	cmpeqi	r2,r2,37
   13024:	1000041e 	bne	r2,zero,13038 <alt_printf+0x50>
        {
            alt_putchar(c);
   13028:	e0bff807 	ldb	r2,-32(fp)
   1302c:	1009883a 	mov	r4,r2
   13030:	00132140 	call	13214 <alt_putchar>
   13034:	00006806 	br	131d8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   13038:	e0bff717 	ldw	r2,-36(fp)
   1303c:	10c00044 	addi	r3,r2,1
   13040:	e0fff715 	stw	r3,-36(fp)
   13044:	10800003 	ldbu	r2,0(r2)
   13048:	e0bff805 	stb	r2,-32(fp)
   1304c:	e0bff807 	ldb	r2,-32(fp)
   13050:	10006926 	beq	r2,zero,131f8 <alt_printf+0x210>
            {
                if (c == '%')
   13054:	e0bff807 	ldb	r2,-32(fp)
   13058:	10800958 	cmpnei	r2,r2,37
   1305c:	1000041e 	bne	r2,zero,13070 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   13060:	e0bff807 	ldb	r2,-32(fp)
   13064:	1009883a 	mov	r4,r2
   13068:	00132140 	call	13214 <alt_putchar>
   1306c:	00005a06 	br	131d8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   13070:	e0bff807 	ldb	r2,-32(fp)
   13074:	108018d8 	cmpnei	r2,r2,99
   13078:	1000081e 	bne	r2,zero,1309c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   1307c:	e0bffe17 	ldw	r2,-8(fp)
   13080:	10c00104 	addi	r3,r2,4
   13084:	e0fffe15 	stw	r3,-8(fp)
   13088:	10800017 	ldw	r2,0(r2)
   1308c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   13090:	e13ffd17 	ldw	r4,-12(fp)
   13094:	00132140 	call	13214 <alt_putchar>
   13098:	00004f06 	br	131d8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   1309c:	e0bff807 	ldb	r2,-32(fp)
   130a0:	10801e18 	cmpnei	r2,r2,120
   130a4:	1000341e 	bne	r2,zero,13178 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   130a8:	e0bffe17 	ldw	r2,-8(fp)
   130ac:	10c00104 	addi	r3,r2,4
   130b0:	e0fffe15 	stw	r3,-8(fp)
   130b4:	10800017 	ldw	r2,0(r2)
   130b8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   130bc:	e0bffb17 	ldw	r2,-20(fp)
   130c0:	1000031e 	bne	r2,zero,130d0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   130c4:	01000c04 	movi	r4,48
   130c8:	00132140 	call	13214 <alt_putchar>
                        continue;
   130cc:	00004206 	br	131d8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   130d0:	00800704 	movi	r2,28
   130d4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   130d8:	00000306 	br	130e8 <alt_printf+0x100>
                        digit_shift -= 4;
   130dc:	e0bff917 	ldw	r2,-28(fp)
   130e0:	10bfff04 	addi	r2,r2,-4
   130e4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   130e8:	00c003c4 	movi	r3,15
   130ec:	e0bff917 	ldw	r2,-28(fp)
   130f0:	1884983a 	sll	r2,r3,r2
   130f4:	1007883a 	mov	r3,r2
   130f8:	e0bffb17 	ldw	r2,-20(fp)
   130fc:	1884703a 	and	r2,r3,r2
   13100:	103ff626 	beq	r2,zero,130dc <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   13104:	00001906 	br	1316c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   13108:	00c003c4 	movi	r3,15
   1310c:	e0bff917 	ldw	r2,-28(fp)
   13110:	1884983a 	sll	r2,r3,r2
   13114:	1007883a 	mov	r3,r2
   13118:	e0bffb17 	ldw	r2,-20(fp)
   1311c:	1886703a 	and	r3,r3,r2
   13120:	e0bff917 	ldw	r2,-28(fp)
   13124:	1884d83a 	srl	r2,r3,r2
   13128:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   1312c:	e0bffc17 	ldw	r2,-16(fp)
   13130:	108002a8 	cmpgeui	r2,r2,10
   13134:	1000041e 	bne	r2,zero,13148 <alt_printf+0x160>
                            c = '0' + digit;
   13138:	e0bffc17 	ldw	r2,-16(fp)
   1313c:	10800c04 	addi	r2,r2,48
   13140:	e0bff805 	stb	r2,-32(fp)
   13144:	00000306 	br	13154 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   13148:	e0bffc17 	ldw	r2,-16(fp)
   1314c:	108015c4 	addi	r2,r2,87
   13150:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   13154:	e0bff807 	ldb	r2,-32(fp)
   13158:	1009883a 	mov	r4,r2
   1315c:	00132140 	call	13214 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   13160:	e0bff917 	ldw	r2,-28(fp)
   13164:	10bfff04 	addi	r2,r2,-4
   13168:	e0bff915 	stw	r2,-28(fp)
   1316c:	e0bff917 	ldw	r2,-28(fp)
   13170:	103fe50e 	bge	r2,zero,13108 <alt_printf+0x120>
   13174:	00001806 	br	131d8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   13178:	e0bff807 	ldb	r2,-32(fp)
   1317c:	10801cd8 	cmpnei	r2,r2,115
   13180:	1000151e 	bne	r2,zero,131d8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   13184:	e0bffe17 	ldw	r2,-8(fp)
   13188:	10c00104 	addi	r3,r2,4
   1318c:	e0fffe15 	stw	r3,-8(fp)
   13190:	10800017 	ldw	r2,0(r2)
   13194:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   13198:	00000906 	br	131c0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   1319c:	e0bffa17 	ldw	r2,-24(fp)
   131a0:	10c00044 	addi	r3,r2,1
   131a4:	e0fffa15 	stw	r3,-24(fp)
   131a8:	10800003 	ldbu	r2,0(r2)
   131ac:	10803fcc 	andi	r2,r2,255
   131b0:	1080201c 	xori	r2,r2,128
   131b4:	10bfe004 	addi	r2,r2,-128
   131b8:	1009883a 	mov	r4,r2
   131bc:	00132140 	call	13214 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   131c0:	e0bffa17 	ldw	r2,-24(fp)
   131c4:	10800003 	ldbu	r2,0(r2)
   131c8:	10803fcc 	andi	r2,r2,255
   131cc:	1080201c 	xori	r2,r2,128
   131d0:	10bfe004 	addi	r2,r2,-128
   131d4:	103ff11e 	bne	r2,zero,1319c <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   131d8:	e0bff717 	ldw	r2,-36(fp)
   131dc:	10c00044 	addi	r3,r2,1
   131e0:	e0fff715 	stw	r3,-36(fp)
   131e4:	10800003 	ldbu	r2,0(r2)
   131e8:	e0bff805 	stb	r2,-32(fp)
   131ec:	e0bff807 	ldb	r2,-32(fp)
   131f0:	103f8a1e 	bne	r2,zero,1301c <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   131f4:	00000106 	br	131fc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   131f8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   131fc:	0001883a 	nop
   13200:	e037883a 	mov	sp,fp
   13204:	dfc00117 	ldw	ra,4(sp)
   13208:	df000017 	ldw	fp,0(sp)
   1320c:	dec00504 	addi	sp,sp,20
   13210:	f800283a 	ret

00013214 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   13214:	defffd04 	addi	sp,sp,-12
   13218:	dfc00215 	stw	ra,8(sp)
   1321c:	df000115 	stw	fp,4(sp)
   13220:	df000104 	addi	fp,sp,4
   13224:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   13228:	d0a00117 	ldw	r2,-32764(gp)
   1322c:	10800217 	ldw	r2,8(r2)
   13230:	100b883a 	mov	r5,r2
   13234:	e13fff17 	ldw	r4,-4(fp)
   13238:	00153340 	call	15334 <putc>
#endif
#endif
}
   1323c:	e037883a 	mov	sp,fp
   13240:	dfc00117 	ldw	ra,4(sp)
   13244:	df000017 	ldw	fp,0(sp)
   13248:	dec00204 	addi	sp,sp,8
   1324c:	f800283a 	ret

00013250 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13250:	defffe04 	addi	sp,sp,-8
   13254:	dfc00115 	stw	ra,4(sp)
   13258:	df000015 	stw	fp,0(sp)
   1325c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13260:	d0a00917 	ldw	r2,-32732(gp)
   13264:	10000326 	beq	r2,zero,13274 <alt_get_errno+0x24>
   13268:	d0a00917 	ldw	r2,-32732(gp)
   1326c:	103ee83a 	callr	r2
   13270:	00000106 	br	13278 <alt_get_errno+0x28>
   13274:	d0a6b404 	addi	r2,gp,-25904
}
   13278:	e037883a 	mov	sp,fp
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	df000017 	ldw	fp,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1328c:	defff904 	addi	sp,sp,-28
   13290:	dfc00615 	stw	ra,24(sp)
   13294:	df000515 	stw	fp,20(sp)
   13298:	df000504 	addi	fp,sp,20
   1329c:	e13ffd15 	stw	r4,-12(fp)
   132a0:	e17ffe15 	stw	r5,-8(fp)
   132a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   132a8:	e0bffd17 	ldw	r2,-12(fp)
   132ac:	10000816 	blt	r2,zero,132d0 <read+0x44>
   132b0:	01400304 	movi	r5,12
   132b4:	e13ffd17 	ldw	r4,-12(fp)
   132b8:	00127580 	call	12758 <__mulsi3>
   132bc:	1007883a 	mov	r3,r2
   132c0:	00800074 	movhi	r2,1
   132c4:	1098b904 	addi	r2,r2,25316
   132c8:	1885883a 	add	r2,r3,r2
   132cc:	00000106 	br	132d4 <read+0x48>
   132d0:	0005883a 	mov	r2,zero
   132d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   132d8:	e0bffb17 	ldw	r2,-20(fp)
   132dc:	10002226 	beq	r2,zero,13368 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   132e0:	e0bffb17 	ldw	r2,-20(fp)
   132e4:	10800217 	ldw	r2,8(r2)
   132e8:	108000cc 	andi	r2,r2,3
   132ec:	10800060 	cmpeqi	r2,r2,1
   132f0:	1000181e 	bne	r2,zero,13354 <read+0xc8>
        (fd->dev->read))
   132f4:	e0bffb17 	ldw	r2,-20(fp)
   132f8:	10800017 	ldw	r2,0(r2)
   132fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13300:	10001426 	beq	r2,zero,13354 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13304:	e0bffb17 	ldw	r2,-20(fp)
   13308:	10800017 	ldw	r2,0(r2)
   1330c:	10800517 	ldw	r2,20(r2)
   13310:	e0ffff17 	ldw	r3,-4(fp)
   13314:	180d883a 	mov	r6,r3
   13318:	e17ffe17 	ldw	r5,-8(fp)
   1331c:	e13ffb17 	ldw	r4,-20(fp)
   13320:	103ee83a 	callr	r2
   13324:	e0bffc15 	stw	r2,-16(fp)
   13328:	e0bffc17 	ldw	r2,-16(fp)
   1332c:	1000070e 	bge	r2,zero,1334c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   13330:	00132500 	call	13250 <alt_get_errno>
   13334:	1007883a 	mov	r3,r2
   13338:	e0bffc17 	ldw	r2,-16(fp)
   1333c:	0085c83a 	sub	r2,zero,r2
   13340:	18800015 	stw	r2,0(r3)
          return -1;
   13344:	00bfffc4 	movi	r2,-1
   13348:	00000c06 	br	1337c <read+0xf0>
        }
        return rval;
   1334c:	e0bffc17 	ldw	r2,-16(fp)
   13350:	00000a06 	br	1337c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13354:	00132500 	call	13250 <alt_get_errno>
   13358:	1007883a 	mov	r3,r2
   1335c:	00800344 	movi	r2,13
   13360:	18800015 	stw	r2,0(r3)
   13364:	00000406 	br	13378 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13368:	00132500 	call	13250 <alt_get_errno>
   1336c:	1007883a 	mov	r3,r2
   13370:	00801444 	movi	r2,81
   13374:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13378:	00bfffc4 	movi	r2,-1
}
   1337c:	e037883a 	mov	sp,fp
   13380:	dfc00117 	ldw	ra,4(sp)
   13384:	df000017 	ldw	fp,0(sp)
   13388:	dec00204 	addi	sp,sp,8
   1338c:	f800283a 	ret

00013390 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13390:	defffc04 	addi	sp,sp,-16
   13394:	dfc00315 	stw	ra,12(sp)
   13398:	df000215 	stw	fp,8(sp)
   1339c:	dc000115 	stw	r16,4(sp)
   133a0:	df000204 	addi	fp,sp,8
   133a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   133a8:	e0bffe17 	ldw	r2,-8(fp)
   133ac:	108000d0 	cmplti	r2,r2,3
   133b0:	1000111e 	bne	r2,zero,133f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   133b4:	04000074 	movhi	r16,1
   133b8:	8418b904 	addi	r16,r16,25316
   133bc:	e0bffe17 	ldw	r2,-8(fp)
   133c0:	01400304 	movi	r5,12
   133c4:	1009883a 	mov	r4,r2
   133c8:	00127580 	call	12758 <__mulsi3>
   133cc:	8085883a 	add	r2,r16,r2
   133d0:	10800204 	addi	r2,r2,8
   133d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   133d8:	04000074 	movhi	r16,1
   133dc:	8418b904 	addi	r16,r16,25316
   133e0:	e0bffe17 	ldw	r2,-8(fp)
   133e4:	01400304 	movi	r5,12
   133e8:	1009883a 	mov	r4,r2
   133ec:	00127580 	call	12758 <__mulsi3>
   133f0:	8085883a 	add	r2,r16,r2
   133f4:	10000015 	stw	zero,0(r2)
  }
}
   133f8:	0001883a 	nop
   133fc:	e6ffff04 	addi	sp,fp,-4
   13400:	dfc00217 	ldw	ra,8(sp)
   13404:	df000117 	ldw	fp,4(sp)
   13408:	dc000017 	ldw	r16,0(sp)
   1340c:	dec00304 	addi	sp,sp,12
   13410:	f800283a 	ret

00013414 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13414:	defff904 	addi	sp,sp,-28
   13418:	df000615 	stw	fp,24(sp)
   1341c:	df000604 	addi	fp,sp,24
   13420:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13424:	0005303a 	rdctl	r2,status
   13428:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1342c:	e0fffe17 	ldw	r3,-8(fp)
   13430:	00bfff84 	movi	r2,-2
   13434:	1884703a 	and	r2,r3,r2
   13438:	1001703a 	wrctl	status,r2
  
  return context;
   1343c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13440:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13444:	d0a00a17 	ldw	r2,-32728(gp)
   13448:	10c000c4 	addi	r3,r2,3
   1344c:	00bfff04 	movi	r2,-4
   13450:	1884703a 	and	r2,r3,r2
   13454:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13458:	d0e00a17 	ldw	r3,-32728(gp)
   1345c:	e0bfff17 	ldw	r2,-4(fp)
   13460:	1887883a 	add	r3,r3,r2
   13464:	008000b4 	movhi	r2,2
   13468:	10800004 	addi	r2,r2,0
   1346c:	10c0062e 	bgeu	r2,r3,13488 <sbrk+0x74>
   13470:	e0bffb17 	ldw	r2,-20(fp)
   13474:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13478:	e0bffa17 	ldw	r2,-24(fp)
   1347c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13480:	00bfffc4 	movi	r2,-1
   13484:	00000b06 	br	134b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13488:	d0a00a17 	ldw	r2,-32728(gp)
   1348c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   13490:	d0e00a17 	ldw	r3,-32728(gp)
   13494:	e0bfff17 	ldw	r2,-4(fp)
   13498:	1885883a 	add	r2,r3,r2
   1349c:	d0a00a15 	stw	r2,-32728(gp)
   134a0:	e0bffb17 	ldw	r2,-20(fp)
   134a4:	e0bffc15 	stw	r2,-16(fp)
   134a8:	e0bffc17 	ldw	r2,-16(fp)
   134ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   134b0:	e0bffd17 	ldw	r2,-12(fp)
} 
   134b4:	e037883a 	mov	sp,fp
   134b8:	df000017 	ldw	fp,0(sp)
   134bc:	dec00104 	addi	sp,sp,4
   134c0:	f800283a 	ret

000134c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   134c4:	defffe04 	addi	sp,sp,-8
   134c8:	dfc00115 	stw	ra,4(sp)
   134cc:	df000015 	stw	fp,0(sp)
   134d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   134d4:	d0a00917 	ldw	r2,-32732(gp)
   134d8:	10000326 	beq	r2,zero,134e8 <alt_get_errno+0x24>
   134dc:	d0a00917 	ldw	r2,-32732(gp)
   134e0:	103ee83a 	callr	r2
   134e4:	00000106 	br	134ec <alt_get_errno+0x28>
   134e8:	d0a6b404 	addi	r2,gp,-25904
}
   134ec:	e037883a 	mov	sp,fp
   134f0:	dfc00117 	ldw	ra,4(sp)
   134f4:	df000017 	ldw	fp,0(sp)
   134f8:	dec00204 	addi	sp,sp,8
   134fc:	f800283a 	ret

00013500 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13500:	defff904 	addi	sp,sp,-28
   13504:	dfc00615 	stw	ra,24(sp)
   13508:	df000515 	stw	fp,20(sp)
   1350c:	df000504 	addi	fp,sp,20
   13510:	e13ffd15 	stw	r4,-12(fp)
   13514:	e17ffe15 	stw	r5,-8(fp)
   13518:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1351c:	e0bffd17 	ldw	r2,-12(fp)
   13520:	10000816 	blt	r2,zero,13544 <write+0x44>
   13524:	01400304 	movi	r5,12
   13528:	e13ffd17 	ldw	r4,-12(fp)
   1352c:	00127580 	call	12758 <__mulsi3>
   13530:	1007883a 	mov	r3,r2
   13534:	00800074 	movhi	r2,1
   13538:	1098b904 	addi	r2,r2,25316
   1353c:	1885883a 	add	r2,r3,r2
   13540:	00000106 	br	13548 <write+0x48>
   13544:	0005883a 	mov	r2,zero
   13548:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1354c:	e0bffb17 	ldw	r2,-20(fp)
   13550:	10002126 	beq	r2,zero,135d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13554:	e0bffb17 	ldw	r2,-20(fp)
   13558:	10800217 	ldw	r2,8(r2)
   1355c:	108000cc 	andi	r2,r2,3
   13560:	10001826 	beq	r2,zero,135c4 <write+0xc4>
   13564:	e0bffb17 	ldw	r2,-20(fp)
   13568:	10800017 	ldw	r2,0(r2)
   1356c:	10800617 	ldw	r2,24(r2)
   13570:	10001426 	beq	r2,zero,135c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13574:	e0bffb17 	ldw	r2,-20(fp)
   13578:	10800017 	ldw	r2,0(r2)
   1357c:	10800617 	ldw	r2,24(r2)
   13580:	e0ffff17 	ldw	r3,-4(fp)
   13584:	180d883a 	mov	r6,r3
   13588:	e17ffe17 	ldw	r5,-8(fp)
   1358c:	e13ffb17 	ldw	r4,-20(fp)
   13590:	103ee83a 	callr	r2
   13594:	e0bffc15 	stw	r2,-16(fp)
   13598:	e0bffc17 	ldw	r2,-16(fp)
   1359c:	1000070e 	bge	r2,zero,135bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   135a0:	00134c40 	call	134c4 <alt_get_errno>
   135a4:	1007883a 	mov	r3,r2
   135a8:	e0bffc17 	ldw	r2,-16(fp)
   135ac:	0085c83a 	sub	r2,zero,r2
   135b0:	18800015 	stw	r2,0(r3)
        return -1;
   135b4:	00bfffc4 	movi	r2,-1
   135b8:	00000c06 	br	135ec <write+0xec>
      }
      return rval;
   135bc:	e0bffc17 	ldw	r2,-16(fp)
   135c0:	00000a06 	br	135ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   135c4:	00134c40 	call	134c4 <alt_get_errno>
   135c8:	1007883a 	mov	r3,r2
   135cc:	00800344 	movi	r2,13
   135d0:	18800015 	stw	r2,0(r3)
   135d4:	00000406 	br	135e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   135d8:	00134c40 	call	134c4 <alt_get_errno>
   135dc:	1007883a 	mov	r3,r2
   135e0:	00801444 	movi	r2,81
   135e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   135e8:	00bfffc4 	movi	r2,-1
}
   135ec:	e037883a 	mov	sp,fp
   135f0:	dfc00117 	ldw	ra,4(sp)
   135f4:	df000017 	ldw	fp,0(sp)
   135f8:	dec00204 	addi	sp,sp,8
   135fc:	f800283a 	ret

00013600 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13600:	defffd04 	addi	sp,sp,-12
   13604:	dfc00215 	stw	ra,8(sp)
   13608:	df000115 	stw	fp,4(sp)
   1360c:	df000104 	addi	fp,sp,4
   13610:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13614:	d1600604 	addi	r5,gp,-32744
   13618:	e13fff17 	ldw	r4,-4(fp)
   1361c:	00147600 	call	14760 <alt_dev_llist_insert>
}
   13620:	e037883a 	mov	sp,fp
   13624:	dfc00117 	ldw	ra,4(sp)
   13628:	df000017 	ldw	fp,0(sp)
   1362c:	dec00204 	addi	sp,sp,8
   13630:	f800283a 	ret

00013634 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13634:	defffd04 	addi	sp,sp,-12
   13638:	dfc00215 	stw	ra,8(sp)
   1363c:	df000115 	stw	fp,4(sp)
   13640:	df000104 	addi	fp,sp,4
   13644:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13648:	0014fc40 	call	14fc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1364c:	00800044 	movi	r2,1
   13650:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13654:	0001883a 	nop
   13658:	e037883a 	mov	sp,fp
   1365c:	dfc00117 	ldw	ra,4(sp)
   13660:	df000017 	ldw	fp,0(sp)
   13664:	dec00204 	addi	sp,sp,8
   13668:	f800283a 	ret

0001366c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1366c:	defffe04 	addi	sp,sp,-8
   13670:	dfc00115 	stw	ra,4(sp)
   13674:	df000015 	stw	fp,0(sp)
   13678:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1367c:	01c0fa04 	movi	r7,1000
   13680:	01800044 	movi	r6,1
   13684:	000b883a 	mov	r5,zero
   13688:	010000b4 	movhi	r4,2
   1368c:	21040004 	addi	r4,r4,4096
   13690:	00141b40 	call	141b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13694:	000d883a 	mov	r6,zero
   13698:	000b883a 	mov	r5,zero
   1369c:	01000074 	movhi	r4,1
   136a0:	21192304 	addi	r4,r4,25740
   136a4:	001383c0 	call	1383c <altera_avalon_jtag_uart_init>
   136a8:	01000074 	movhi	r4,1
   136ac:	21191904 	addi	r4,r4,25700
   136b0:	00136000 	call	13600 <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   136b4:	01000074 	movhi	r4,1
   136b8:	211d3104 	addi	r4,r4,29892
   136bc:	00136000 	call	13600 <alt_dev_reg>
}
   136c0:	0001883a 	nop
   136c4:	e037883a 	mov	sp,fp
   136c8:	dfc00117 	ldw	ra,4(sp)
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00204 	addi	sp,sp,8
   136d4:	f800283a 	ret

000136d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   136d8:	defffa04 	addi	sp,sp,-24
   136dc:	dfc00515 	stw	ra,20(sp)
   136e0:	df000415 	stw	fp,16(sp)
   136e4:	df000404 	addi	fp,sp,16
   136e8:	e13ffd15 	stw	r4,-12(fp)
   136ec:	e17ffe15 	stw	r5,-8(fp)
   136f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   136f4:	e0bffd17 	ldw	r2,-12(fp)
   136f8:	10800017 	ldw	r2,0(r2)
   136fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13700:	e0bffc17 	ldw	r2,-16(fp)
   13704:	10c00a04 	addi	r3,r2,40
   13708:	e0bffd17 	ldw	r2,-12(fp)
   1370c:	10800217 	ldw	r2,8(r2)
   13710:	100f883a 	mov	r7,r2
   13714:	e1bfff17 	ldw	r6,-4(fp)
   13718:	e17ffe17 	ldw	r5,-8(fp)
   1371c:	1809883a 	mov	r4,r3
   13720:	0013cf80 	call	13cf8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13724:	e037883a 	mov	sp,fp
   13728:	dfc00117 	ldw	ra,4(sp)
   1372c:	df000017 	ldw	fp,0(sp)
   13730:	dec00204 	addi	sp,sp,8
   13734:	f800283a 	ret

00013738 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13738:	defffa04 	addi	sp,sp,-24
   1373c:	dfc00515 	stw	ra,20(sp)
   13740:	df000415 	stw	fp,16(sp)
   13744:	df000404 	addi	fp,sp,16
   13748:	e13ffd15 	stw	r4,-12(fp)
   1374c:	e17ffe15 	stw	r5,-8(fp)
   13750:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13754:	e0bffd17 	ldw	r2,-12(fp)
   13758:	10800017 	ldw	r2,0(r2)
   1375c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13760:	e0bffc17 	ldw	r2,-16(fp)
   13764:	10c00a04 	addi	r3,r2,40
   13768:	e0bffd17 	ldw	r2,-12(fp)
   1376c:	10800217 	ldw	r2,8(r2)
   13770:	100f883a 	mov	r7,r2
   13774:	e1bfff17 	ldw	r6,-4(fp)
   13778:	e17ffe17 	ldw	r5,-8(fp)
   1377c:	1809883a 	mov	r4,r3
   13780:	0013f140 	call	13f14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13784:	e037883a 	mov	sp,fp
   13788:	dfc00117 	ldw	ra,4(sp)
   1378c:	df000017 	ldw	fp,0(sp)
   13790:	dec00204 	addi	sp,sp,8
   13794:	f800283a 	ret

00013798 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13798:	defffc04 	addi	sp,sp,-16
   1379c:	dfc00315 	stw	ra,12(sp)
   137a0:	df000215 	stw	fp,8(sp)
   137a4:	df000204 	addi	fp,sp,8
   137a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	10800017 	ldw	r2,0(r2)
   137b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   137b8:	e0bffe17 	ldw	r2,-8(fp)
   137bc:	10c00a04 	addi	r3,r2,40
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	10800217 	ldw	r2,8(r2)
   137c8:	100b883a 	mov	r5,r2
   137cc:	1809883a 	mov	r4,r3
   137d0:	0013ba00 	call	13ba0 <altera_avalon_jtag_uart_close>
}
   137d4:	e037883a 	mov	sp,fp
   137d8:	dfc00117 	ldw	ra,4(sp)
   137dc:	df000017 	ldw	fp,0(sp)
   137e0:	dec00204 	addi	sp,sp,8
   137e4:	f800283a 	ret

000137e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   137e8:	defffa04 	addi	sp,sp,-24
   137ec:	dfc00515 	stw	ra,20(sp)
   137f0:	df000415 	stw	fp,16(sp)
   137f4:	df000404 	addi	fp,sp,16
   137f8:	e13ffd15 	stw	r4,-12(fp)
   137fc:	e17ffe15 	stw	r5,-8(fp)
   13800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13804:	e0bffd17 	ldw	r2,-12(fp)
   13808:	10800017 	ldw	r2,0(r2)
   1380c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13810:	e0bffc17 	ldw	r2,-16(fp)
   13814:	10800a04 	addi	r2,r2,40
   13818:	e1bfff17 	ldw	r6,-4(fp)
   1381c:	e17ffe17 	ldw	r5,-8(fp)
   13820:	1009883a 	mov	r4,r2
   13824:	0013c080 	call	13c08 <altera_avalon_jtag_uart_ioctl>
}
   13828:	e037883a 	mov	sp,fp
   1382c:	dfc00117 	ldw	ra,4(sp)
   13830:	df000017 	ldw	fp,0(sp)
   13834:	dec00204 	addi	sp,sp,8
   13838:	f800283a 	ret

0001383c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1383c:	defffb04 	addi	sp,sp,-20
   13840:	dfc00415 	stw	ra,16(sp)
   13844:	df000315 	stw	fp,12(sp)
   13848:	df000304 	addi	fp,sp,12
   1384c:	e13ffd15 	stw	r4,-12(fp)
   13850:	e17ffe15 	stw	r5,-8(fp)
   13854:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13858:	e0bffd17 	ldw	r2,-12(fp)
   1385c:	00c00044 	movi	r3,1
   13860:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13864:	e0bffd17 	ldw	r2,-12(fp)
   13868:	10800017 	ldw	r2,0(r2)
   1386c:	10800104 	addi	r2,r2,4
   13870:	1007883a 	mov	r3,r2
   13874:	e0bffd17 	ldw	r2,-12(fp)
   13878:	10800817 	ldw	r2,32(r2)
   1387c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	01800074 	movhi	r6,1
   13888:	318e3c04 	addi	r6,r6,14576
   1388c:	e17ffd17 	ldw	r5,-12(fp)
   13890:	1009883a 	mov	r4,r2
   13894:	0014ca00 	call	14ca0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13898:	e0bffd17 	ldw	r2,-12(fp)
   1389c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   138a0:	e0bffd17 	ldw	r2,-12(fp)
   138a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   138a8:	d0e6bc17 	ldw	r3,-25872(gp)
   138ac:	e1fffd17 	ldw	r7,-12(fp)
   138b0:	01800074 	movhi	r6,1
   138b4:	318ec004 	addi	r6,r6,15104
   138b8:	180b883a 	mov	r5,r3
   138bc:	1009883a 	mov	r4,r2
   138c0:	00145d80 	call	145d8 <alt_alarm_start>
   138c4:	1000040e 	bge	r2,zero,138d8 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   138c8:	e0fffd17 	ldw	r3,-12(fp)
   138cc:	00a00034 	movhi	r2,32768
   138d0:	10bfffc4 	addi	r2,r2,-1
   138d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   138d8:	0001883a 	nop
   138dc:	e037883a 	mov	sp,fp
   138e0:	dfc00117 	ldw	ra,4(sp)
   138e4:	df000017 	ldw	fp,0(sp)
   138e8:	dec00204 	addi	sp,sp,8
   138ec:	f800283a 	ret

000138f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   138f0:	defff704 	addi	sp,sp,-36
   138f4:	df000815 	stw	fp,32(sp)
   138f8:	df000804 	addi	fp,sp,32
   138fc:	e13ffe15 	stw	r4,-8(fp)
   13900:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13904:	e0bffe17 	ldw	r2,-8(fp)
   13908:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   1390c:	e0bffa17 	ldw	r2,-24(fp)
   13910:	10800017 	ldw	r2,0(r2)
   13914:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13918:	e0bffb17 	ldw	r2,-20(fp)
   1391c:	10800104 	addi	r2,r2,4
   13920:	10800037 	ldwio	r2,0(r2)
   13924:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13928:	e0bffc17 	ldw	r2,-16(fp)
   1392c:	1080c00c 	andi	r2,r2,768
   13930:	10006d26 	beq	r2,zero,13ae8 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13934:	e0bffc17 	ldw	r2,-16(fp)
   13938:	1080400c 	andi	r2,r2,256
   1393c:	10003526 	beq	r2,zero,13a14 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13940:	00800074 	movhi	r2,1
   13944:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13948:	e0bffa17 	ldw	r2,-24(fp)
   1394c:	10800a17 	ldw	r2,40(r2)
   13950:	10800044 	addi	r2,r2,1
   13954:	1081ffcc 	andi	r2,r2,2047
   13958:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   1395c:	e0bffa17 	ldw	r2,-24(fp)
   13960:	10c00b17 	ldw	r3,44(r2)
   13964:	e0bffd17 	ldw	r2,-12(fp)
   13968:	18801526 	beq	r3,r2,139c0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1396c:	e0bffb17 	ldw	r2,-20(fp)
   13970:	10800037 	ldwio	r2,0(r2)
   13974:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13978:	e0bff817 	ldw	r2,-32(fp)
   1397c:	10a0000c 	andi	r2,r2,32768
   13980:	10001126 	beq	r2,zero,139c8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13984:	e0bffa17 	ldw	r2,-24(fp)
   13988:	10800a17 	ldw	r2,40(r2)
   1398c:	e0fff817 	ldw	r3,-32(fp)
   13990:	1809883a 	mov	r4,r3
   13994:	e0fffa17 	ldw	r3,-24(fp)
   13998:	1885883a 	add	r2,r3,r2
   1399c:	10800e04 	addi	r2,r2,56
   139a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   139a4:	e0bffa17 	ldw	r2,-24(fp)
   139a8:	10800a17 	ldw	r2,40(r2)
   139ac:	10800044 	addi	r2,r2,1
   139b0:	10c1ffcc 	andi	r3,r2,2047
   139b4:	e0bffa17 	ldw	r2,-24(fp)
   139b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   139bc:	003fe206 	br	13948 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   139c0:	0001883a 	nop
   139c4:	00000106 	br	139cc <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   139c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   139cc:	e0bff817 	ldw	r2,-32(fp)
   139d0:	10bfffec 	andhi	r2,r2,65535
   139d4:	10000f26 	beq	r2,zero,13a14 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   139d8:	e0bffa17 	ldw	r2,-24(fp)
   139dc:	10c00817 	ldw	r3,32(r2)
   139e0:	00bfff84 	movi	r2,-2
   139e4:	1886703a 	and	r3,r3,r2
   139e8:	e0bffa17 	ldw	r2,-24(fp)
   139ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   139f0:	e0bffb17 	ldw	r2,-20(fp)
   139f4:	10800104 	addi	r2,r2,4
   139f8:	1007883a 	mov	r3,r2
   139fc:	e0bffa17 	ldw	r2,-24(fp)
   13a00:	10800817 	ldw	r2,32(r2)
   13a04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13a08:	e0bffb17 	ldw	r2,-20(fp)
   13a0c:	10800104 	addi	r2,r2,4
   13a10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13a14:	e0bffc17 	ldw	r2,-16(fp)
   13a18:	1080800c 	andi	r2,r2,512
   13a1c:	103fbe26 	beq	r2,zero,13918 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13a20:	e0bffc17 	ldw	r2,-16(fp)
   13a24:	1004d43a 	srli	r2,r2,16
   13a28:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a2c:	00001406 	br	13a80 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13a30:	e0bffb17 	ldw	r2,-20(fp)
   13a34:	e0fffa17 	ldw	r3,-24(fp)
   13a38:	18c00d17 	ldw	r3,52(r3)
   13a3c:	e13ffa17 	ldw	r4,-24(fp)
   13a40:	20c7883a 	add	r3,r4,r3
   13a44:	18c20e04 	addi	r3,r3,2104
   13a48:	18c00003 	ldbu	r3,0(r3)
   13a4c:	18c03fcc 	andi	r3,r3,255
   13a50:	18c0201c 	xori	r3,r3,128
   13a54:	18ffe004 	addi	r3,r3,-128
   13a58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a5c:	e0bffa17 	ldw	r2,-24(fp)
   13a60:	10800d17 	ldw	r2,52(r2)
   13a64:	10800044 	addi	r2,r2,1
   13a68:	10c1ffcc 	andi	r3,r2,2047
   13a6c:	e0bffa17 	ldw	r2,-24(fp)
   13a70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13a74:	e0bff917 	ldw	r2,-28(fp)
   13a78:	10bfffc4 	addi	r2,r2,-1
   13a7c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a80:	e0bff917 	ldw	r2,-28(fp)
   13a84:	10000526 	beq	r2,zero,13a9c <altera_avalon_jtag_uart_irq+0x1ac>
   13a88:	e0bffa17 	ldw	r2,-24(fp)
   13a8c:	10c00d17 	ldw	r3,52(r2)
   13a90:	e0bffa17 	ldw	r2,-24(fp)
   13a94:	10800c17 	ldw	r2,48(r2)
   13a98:	18bfe51e 	bne	r3,r2,13a30 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13a9c:	e0bff917 	ldw	r2,-28(fp)
   13aa0:	103f9d26 	beq	r2,zero,13918 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13aa4:	e0bffa17 	ldw	r2,-24(fp)
   13aa8:	10c00817 	ldw	r3,32(r2)
   13aac:	00bfff44 	movi	r2,-3
   13ab0:	1886703a 	and	r3,r3,r2
   13ab4:	e0bffa17 	ldw	r2,-24(fp)
   13ab8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13abc:	e0bffa17 	ldw	r2,-24(fp)
   13ac0:	10800017 	ldw	r2,0(r2)
   13ac4:	10800104 	addi	r2,r2,4
   13ac8:	1007883a 	mov	r3,r2
   13acc:	e0bffa17 	ldw	r2,-24(fp)
   13ad0:	10800817 	ldw	r2,32(r2)
   13ad4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ad8:	e0bffb17 	ldw	r2,-20(fp)
   13adc:	10800104 	addi	r2,r2,4
   13ae0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13ae4:	003f8c06 	br	13918 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13ae8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13aec:	0001883a 	nop
   13af0:	e037883a 	mov	sp,fp
   13af4:	df000017 	ldw	fp,0(sp)
   13af8:	dec00104 	addi	sp,sp,4
   13afc:	f800283a 	ret

00013b00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13b00:	defff804 	addi	sp,sp,-32
   13b04:	df000715 	stw	fp,28(sp)
   13b08:	df000704 	addi	fp,sp,28
   13b0c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13b10:	e0bffb17 	ldw	r2,-20(fp)
   13b14:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13b18:	e0bff917 	ldw	r2,-28(fp)
   13b1c:	10800017 	ldw	r2,0(r2)
   13b20:	10800104 	addi	r2,r2,4
   13b24:	10800037 	ldwio	r2,0(r2)
   13b28:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13b2c:	e0bffa17 	ldw	r2,-24(fp)
   13b30:	1081000c 	andi	r2,r2,1024
   13b34:	10000b26 	beq	r2,zero,13b64 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13b38:	e0bff917 	ldw	r2,-28(fp)
   13b3c:	10800017 	ldw	r2,0(r2)
   13b40:	10800104 	addi	r2,r2,4
   13b44:	1007883a 	mov	r3,r2
   13b48:	e0bff917 	ldw	r2,-28(fp)
   13b4c:	10800817 	ldw	r2,32(r2)
   13b50:	10810014 	ori	r2,r2,1024
   13b54:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13b58:	e0bff917 	ldw	r2,-28(fp)
   13b5c:	10000915 	stw	zero,36(r2)
   13b60:	00000a06 	br	13b8c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13b64:	e0bff917 	ldw	r2,-28(fp)
   13b68:	10c00917 	ldw	r3,36(r2)
   13b6c:	00a00034 	movhi	r2,32768
   13b70:	10bfff04 	addi	r2,r2,-4
   13b74:	10c00536 	bltu	r2,r3,13b8c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13b78:	e0bff917 	ldw	r2,-28(fp)
   13b7c:	10800917 	ldw	r2,36(r2)
   13b80:	10c00044 	addi	r3,r2,1
   13b84:	e0bff917 	ldw	r2,-28(fp)
   13b88:	10c00915 	stw	r3,36(r2)
   13b8c:	d0a6bc17 	ldw	r2,-25872(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13b90:	e037883a 	mov	sp,fp
   13b94:	df000017 	ldw	fp,0(sp)
   13b98:	dec00104 	addi	sp,sp,4
   13b9c:	f800283a 	ret

00013ba0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13ba0:	defffd04 	addi	sp,sp,-12
   13ba4:	df000215 	stw	fp,8(sp)
   13ba8:	df000204 	addi	fp,sp,8
   13bac:	e13ffe15 	stw	r4,-8(fp)
   13bb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13bb4:	00000506 	br	13bcc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13bb8:	e0bfff17 	ldw	r2,-4(fp)
   13bbc:	1090000c 	andi	r2,r2,16384
   13bc0:	10000226 	beq	r2,zero,13bcc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13bc4:	00bffd44 	movi	r2,-11
   13bc8:	00000b06 	br	13bf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13bcc:	e0bffe17 	ldw	r2,-8(fp)
   13bd0:	10c00d17 	ldw	r3,52(r2)
   13bd4:	e0bffe17 	ldw	r2,-8(fp)
   13bd8:	10800c17 	ldw	r2,48(r2)
   13bdc:	18800526 	beq	r3,r2,13bf4 <altera_avalon_jtag_uart_close+0x54>
   13be0:	e0bffe17 	ldw	r2,-8(fp)
   13be4:	10c00917 	ldw	r3,36(r2)
   13be8:	e0bffe17 	ldw	r2,-8(fp)
   13bec:	10800117 	ldw	r2,4(r2)
   13bf0:	18bff136 	bltu	r3,r2,13bb8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13bf4:	0005883a 	mov	r2,zero
}
   13bf8:	e037883a 	mov	sp,fp
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00104 	addi	sp,sp,4
   13c04:	f800283a 	ret

00013c08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13c08:	defffa04 	addi	sp,sp,-24
   13c0c:	df000515 	stw	fp,20(sp)
   13c10:	df000504 	addi	fp,sp,20
   13c14:	e13ffd15 	stw	r4,-12(fp)
   13c18:	e17ffe15 	stw	r5,-8(fp)
   13c1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13c20:	00bff9c4 	movi	r2,-25
   13c24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13c28:	e0bffe17 	ldw	r2,-8(fp)
   13c2c:	10da8060 	cmpeqi	r3,r2,27137
   13c30:	1800031e 	bne	r3,zero,13c40 <altera_avalon_jtag_uart_ioctl+0x38>
   13c34:	109a80a0 	cmpeqi	r2,r2,27138
   13c38:	1000181e 	bne	r2,zero,13c9c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   13c3c:	00002906 	br	13ce4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13c40:	e0bffd17 	ldw	r2,-12(fp)
   13c44:	10c00117 	ldw	r3,4(r2)
   13c48:	00a00034 	movhi	r2,32768
   13c4c:	10bfffc4 	addi	r2,r2,-1
   13c50:	18802126 	beq	r3,r2,13cd8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   13c54:	e0bfff17 	ldw	r2,-4(fp)
   13c58:	10800017 	ldw	r2,0(r2)
   13c5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13c60:	e0bffc17 	ldw	r2,-16(fp)
   13c64:	10800090 	cmplti	r2,r2,2
   13c68:	1000061e 	bne	r2,zero,13c84 <altera_avalon_jtag_uart_ioctl+0x7c>
   13c6c:	e0fffc17 	ldw	r3,-16(fp)
   13c70:	00a00034 	movhi	r2,32768
   13c74:	10bfffc4 	addi	r2,r2,-1
   13c78:	18800226 	beq	r3,r2,13c84 <altera_avalon_jtag_uart_ioctl+0x7c>
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	00000206 	br	13c8c <altera_avalon_jtag_uart_ioctl+0x84>
   13c84:	00a00034 	movhi	r2,32768
   13c88:	10bfff84 	addi	r2,r2,-2
   13c8c:	e0fffd17 	ldw	r3,-12(fp)
   13c90:	18800115 	stw	r2,4(r3)
      rc = 0;
   13c94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13c98:	00000f06 	br	13cd8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	10c00117 	ldw	r3,4(r2)
   13ca4:	00a00034 	movhi	r2,32768
   13ca8:	10bfffc4 	addi	r2,r2,-1
   13cac:	18800c26 	beq	r3,r2,13ce0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	10c00917 	ldw	r3,36(r2)
   13cb8:	e0bffd17 	ldw	r2,-12(fp)
   13cbc:	10800117 	ldw	r2,4(r2)
   13cc0:	1885803a 	cmpltu	r2,r3,r2
   13cc4:	10c03fcc 	andi	r3,r2,255
   13cc8:	e0bfff17 	ldw	r2,-4(fp)
   13ccc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13cd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13cd4:	00000206 	br	13ce0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   13cd8:	0001883a 	nop
   13cdc:	00000106 	br	13ce4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13ce0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13ce4:	e0bffb17 	ldw	r2,-20(fp)
}
   13ce8:	e037883a 	mov	sp,fp
   13cec:	df000017 	ldw	fp,0(sp)
   13cf0:	dec00104 	addi	sp,sp,4
   13cf4:	f800283a 	ret

00013cf8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13cf8:	defff304 	addi	sp,sp,-52
   13cfc:	dfc00c15 	stw	ra,48(sp)
   13d00:	df000b15 	stw	fp,44(sp)
   13d04:	df000b04 	addi	fp,sp,44
   13d08:	e13ffc15 	stw	r4,-16(fp)
   13d0c:	e17ffd15 	stw	r5,-12(fp)
   13d10:	e1bffe15 	stw	r6,-8(fp)
   13d14:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13d18:	e0bffd17 	ldw	r2,-12(fp)
   13d1c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13d20:	00004706 	br	13e40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13d24:	e0bffc17 	ldw	r2,-16(fp)
   13d28:	10800a17 	ldw	r2,40(r2)
   13d2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13d30:	e0bffc17 	ldw	r2,-16(fp)
   13d34:	10800b17 	ldw	r2,44(r2)
   13d38:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   13d3c:	e0fff717 	ldw	r3,-36(fp)
   13d40:	e0bff817 	ldw	r2,-32(fp)
   13d44:	18800536 	bltu	r3,r2,13d5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13d48:	e0fff717 	ldw	r3,-36(fp)
   13d4c:	e0bff817 	ldw	r2,-32(fp)
   13d50:	1885c83a 	sub	r2,r3,r2
   13d54:	e0bff615 	stw	r2,-40(fp)
   13d58:	00000406 	br	13d6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13d5c:	00c20004 	movi	r3,2048
   13d60:	e0bff817 	ldw	r2,-32(fp)
   13d64:	1885c83a 	sub	r2,r3,r2
   13d68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13d6c:	e0bff617 	ldw	r2,-40(fp)
   13d70:	10001e26 	beq	r2,zero,13dec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   13d74:	e0fffe17 	ldw	r3,-8(fp)
   13d78:	e0bff617 	ldw	r2,-40(fp)
   13d7c:	1880022e 	bgeu	r3,r2,13d88 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   13d80:	e0bffe17 	ldw	r2,-8(fp)
   13d84:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13d88:	e0bffc17 	ldw	r2,-16(fp)
   13d8c:	10c00e04 	addi	r3,r2,56
   13d90:	e0bff817 	ldw	r2,-32(fp)
   13d94:	1885883a 	add	r2,r3,r2
   13d98:	e1bff617 	ldw	r6,-40(fp)
   13d9c:	100b883a 	mov	r5,r2
   13da0:	e13ff517 	ldw	r4,-44(fp)
   13da4:	001514c0 	call	1514c <memcpy>
      ptr   += n;
   13da8:	e0fff517 	ldw	r3,-44(fp)
   13dac:	e0bff617 	ldw	r2,-40(fp)
   13db0:	1885883a 	add	r2,r3,r2
   13db4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13db8:	e0fffe17 	ldw	r3,-8(fp)
   13dbc:	e0bff617 	ldw	r2,-40(fp)
   13dc0:	1885c83a 	sub	r2,r3,r2
   13dc4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13dc8:	e0fff817 	ldw	r3,-32(fp)
   13dcc:	e0bff617 	ldw	r2,-40(fp)
   13dd0:	1885883a 	add	r2,r3,r2
   13dd4:	10c1ffcc 	andi	r3,r2,2047
   13dd8:	e0bffc17 	ldw	r2,-16(fp)
   13ddc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13de0:	e0bffe17 	ldw	r2,-8(fp)
   13de4:	00bfcf16 	blt	zero,r2,13d24 <altera_avalon_jtag_uart_read+0x2c>
   13de8:	00000106 	br	13df0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   13dec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   13df0:	e0fff517 	ldw	r3,-44(fp)
   13df4:	e0bffd17 	ldw	r2,-12(fp)
   13df8:	1880141e 	bne	r3,r2,13e4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13dfc:	e0bfff17 	ldw	r2,-4(fp)
   13e00:	1090000c 	andi	r2,r2,16384
   13e04:	1000131e 	bne	r2,zero,13e54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13e08:	0001883a 	nop
   13e0c:	e0bffc17 	ldw	r2,-16(fp)
   13e10:	10c00a17 	ldw	r3,40(r2)
   13e14:	e0bff717 	ldw	r2,-36(fp)
   13e18:	1880051e 	bne	r3,r2,13e30 <altera_avalon_jtag_uart_read+0x138>
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	10c00917 	ldw	r3,36(r2)
   13e24:	e0bffc17 	ldw	r2,-16(fp)
   13e28:	10800117 	ldw	r2,4(r2)
   13e2c:	18bff736 	bltu	r3,r2,13e0c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13e30:	e0bffc17 	ldw	r2,-16(fp)
   13e34:	10c00a17 	ldw	r3,40(r2)
   13e38:	e0bff717 	ldw	r2,-36(fp)
   13e3c:	18800726 	beq	r3,r2,13e5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13e40:	e0bffe17 	ldw	r2,-8(fp)
   13e44:	00bfb716 	blt	zero,r2,13d24 <altera_avalon_jtag_uart_read+0x2c>
   13e48:	00000506 	br	13e60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   13e4c:	0001883a 	nop
   13e50:	00000306 	br	13e60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   13e54:	0001883a 	nop
   13e58:	00000106 	br	13e60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   13e5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13e60:	e0fff517 	ldw	r3,-44(fp)
   13e64:	e0bffd17 	ldw	r2,-12(fp)
   13e68:	18801826 	beq	r3,r2,13ecc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e6c:	0005303a 	rdctl	r2,status
   13e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e74:	e0fffb17 	ldw	r3,-20(fp)
   13e78:	00bfff84 	movi	r2,-2
   13e7c:	1884703a 	and	r2,r3,r2
   13e80:	1001703a 	wrctl	status,r2
  
  return context;
   13e84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13e88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13e8c:	e0bffc17 	ldw	r2,-16(fp)
   13e90:	10800817 	ldw	r2,32(r2)
   13e94:	10c00054 	ori	r3,r2,1
   13e98:	e0bffc17 	ldw	r2,-16(fp)
   13e9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ea0:	e0bffc17 	ldw	r2,-16(fp)
   13ea4:	10800017 	ldw	r2,0(r2)
   13ea8:	10800104 	addi	r2,r2,4
   13eac:	1007883a 	mov	r3,r2
   13eb0:	e0bffc17 	ldw	r2,-16(fp)
   13eb4:	10800817 	ldw	r2,32(r2)
   13eb8:	18800035 	stwio	r2,0(r3)
   13ebc:	e0bffa17 	ldw	r2,-24(fp)
   13ec0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ec4:	e0bff917 	ldw	r2,-28(fp)
   13ec8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13ecc:	e0fff517 	ldw	r3,-44(fp)
   13ed0:	e0bffd17 	ldw	r2,-12(fp)
   13ed4:	18800426 	beq	r3,r2,13ee8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   13ed8:	e0fff517 	ldw	r3,-44(fp)
   13edc:	e0bffd17 	ldw	r2,-12(fp)
   13ee0:	1885c83a 	sub	r2,r3,r2
   13ee4:	00000606 	br	13f00 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   13ee8:	e0bfff17 	ldw	r2,-4(fp)
   13eec:	1090000c 	andi	r2,r2,16384
   13ef0:	10000226 	beq	r2,zero,13efc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13ef4:	00bffd44 	movi	r2,-11
   13ef8:	00000106 	br	13f00 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   13efc:	00bffec4 	movi	r2,-5
}
   13f00:	e037883a 	mov	sp,fp
   13f04:	dfc00117 	ldw	ra,4(sp)
   13f08:	df000017 	ldw	fp,0(sp)
   13f0c:	dec00204 	addi	sp,sp,8
   13f10:	f800283a 	ret

00013f14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13f14:	defff304 	addi	sp,sp,-52
   13f18:	dfc00c15 	stw	ra,48(sp)
   13f1c:	df000b15 	stw	fp,44(sp)
   13f20:	df000b04 	addi	fp,sp,44
   13f24:	e13ffc15 	stw	r4,-16(fp)
   13f28:	e17ffd15 	stw	r5,-12(fp)
   13f2c:	e1bffe15 	stw	r6,-8(fp)
   13f30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13f34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13f38:	e0bffd17 	ldw	r2,-12(fp)
   13f3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13f40:	00003706 	br	14020 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13f44:	e0bffc17 	ldw	r2,-16(fp)
   13f48:	10800c17 	ldw	r2,48(r2)
   13f4c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   13f50:	e0bffc17 	ldw	r2,-16(fp)
   13f54:	10800d17 	ldw	r2,52(r2)
   13f58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   13f5c:	e0fff917 	ldw	r3,-28(fp)
   13f60:	e0bff517 	ldw	r2,-44(fp)
   13f64:	1880062e 	bgeu	r3,r2,13f80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   13f68:	e0fff517 	ldw	r3,-44(fp)
   13f6c:	e0bff917 	ldw	r2,-28(fp)
   13f70:	1885c83a 	sub	r2,r3,r2
   13f74:	10bfffc4 	addi	r2,r2,-1
   13f78:	e0bff615 	stw	r2,-40(fp)
   13f7c:	00000b06 	br	13fac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   13f80:	e0bff517 	ldw	r2,-44(fp)
   13f84:	10000526 	beq	r2,zero,13f9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   13f88:	00c20004 	movi	r3,2048
   13f8c:	e0bff917 	ldw	r2,-28(fp)
   13f90:	1885c83a 	sub	r2,r3,r2
   13f94:	e0bff615 	stw	r2,-40(fp)
   13f98:	00000406 	br	13fac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   13f9c:	00c1ffc4 	movi	r3,2047
   13fa0:	e0bff917 	ldw	r2,-28(fp)
   13fa4:	1885c83a 	sub	r2,r3,r2
   13fa8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13fac:	e0bff617 	ldw	r2,-40(fp)
   13fb0:	10001e26 	beq	r2,zero,1402c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   13fb4:	e0fffe17 	ldw	r3,-8(fp)
   13fb8:	e0bff617 	ldw	r2,-40(fp)
   13fbc:	1880022e 	bgeu	r3,r2,13fc8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13fc8:	e0bffc17 	ldw	r2,-16(fp)
   13fcc:	10c20e04 	addi	r3,r2,2104
   13fd0:	e0bff917 	ldw	r2,-28(fp)
   13fd4:	1885883a 	add	r2,r3,r2
   13fd8:	e1bff617 	ldw	r6,-40(fp)
   13fdc:	e17ffd17 	ldw	r5,-12(fp)
   13fe0:	1009883a 	mov	r4,r2
   13fe4:	001514c0 	call	1514c <memcpy>
      ptr   += n;
   13fe8:	e0fffd17 	ldw	r3,-12(fp)
   13fec:	e0bff617 	ldw	r2,-40(fp)
   13ff0:	1885883a 	add	r2,r3,r2
   13ff4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   13ff8:	e0fffe17 	ldw	r3,-8(fp)
   13ffc:	e0bff617 	ldw	r2,-40(fp)
   14000:	1885c83a 	sub	r2,r3,r2
   14004:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14008:	e0fff917 	ldw	r3,-28(fp)
   1400c:	e0bff617 	ldw	r2,-40(fp)
   14010:	1885883a 	add	r2,r3,r2
   14014:	10c1ffcc 	andi	r3,r2,2047
   14018:	e0bffc17 	ldw	r2,-16(fp)
   1401c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14020:	e0bffe17 	ldw	r2,-8(fp)
   14024:	00bfc716 	blt	zero,r2,13f44 <altera_avalon_jtag_uart_write+0x30>
   14028:	00000106 	br	14030 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1402c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14030:	0005303a 	rdctl	r2,status
   14034:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14038:	e0fffb17 	ldw	r3,-20(fp)
   1403c:	00bfff84 	movi	r2,-2
   14040:	1884703a 	and	r2,r3,r2
   14044:	1001703a 	wrctl	status,r2
  
  return context;
   14048:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1404c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14050:	e0bffc17 	ldw	r2,-16(fp)
   14054:	10800817 	ldw	r2,32(r2)
   14058:	10c00094 	ori	r3,r2,2
   1405c:	e0bffc17 	ldw	r2,-16(fp)
   14060:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14064:	e0bffc17 	ldw	r2,-16(fp)
   14068:	10800017 	ldw	r2,0(r2)
   1406c:	10800104 	addi	r2,r2,4
   14070:	1007883a 	mov	r3,r2
   14074:	e0bffc17 	ldw	r2,-16(fp)
   14078:	10800817 	ldw	r2,32(r2)
   1407c:	18800035 	stwio	r2,0(r3)
   14080:	e0bffa17 	ldw	r2,-24(fp)
   14084:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14088:	e0bff817 	ldw	r2,-32(fp)
   1408c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14090:	e0bffe17 	ldw	r2,-8(fp)
   14094:	0080100e 	bge	zero,r2,140d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14098:	e0bfff17 	ldw	r2,-4(fp)
   1409c:	1090000c 	andi	r2,r2,16384
   140a0:	1000101e 	bne	r2,zero,140e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   140a4:	0001883a 	nop
   140a8:	e0bffc17 	ldw	r2,-16(fp)
   140ac:	10c00d17 	ldw	r3,52(r2)
   140b0:	e0bff517 	ldw	r2,-44(fp)
   140b4:	1880051e 	bne	r3,r2,140cc <altera_avalon_jtag_uart_write+0x1b8>
   140b8:	e0bffc17 	ldw	r2,-16(fp)
   140bc:	10c00917 	ldw	r3,36(r2)
   140c0:	e0bffc17 	ldw	r2,-16(fp)
   140c4:	10800117 	ldw	r2,4(r2)
   140c8:	18bff736 	bltu	r3,r2,140a8 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   140cc:	e0bffc17 	ldw	r2,-16(fp)
   140d0:	10800917 	ldw	r2,36(r2)
   140d4:	1000051e 	bne	r2,zero,140ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   140d8:	e0bffe17 	ldw	r2,-8(fp)
   140dc:	00bfd016 	blt	zero,r2,14020 <altera_avalon_jtag_uart_write+0x10c>
   140e0:	00000306 	br	140f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   140e4:	0001883a 	nop
   140e8:	00000106 	br	140f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   140ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   140f0:	e0fffd17 	ldw	r3,-12(fp)
   140f4:	e0bff717 	ldw	r2,-36(fp)
   140f8:	18800426 	beq	r3,r2,1410c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   140fc:	e0fffd17 	ldw	r3,-12(fp)
   14100:	e0bff717 	ldw	r2,-36(fp)
   14104:	1885c83a 	sub	r2,r3,r2
   14108:	00000606 	br	14124 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1410c:	e0bfff17 	ldw	r2,-4(fp)
   14110:	1090000c 	andi	r2,r2,16384
   14114:	10000226 	beq	r2,zero,14120 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14118:	00bffd44 	movi	r2,-11
   1411c:	00000106 	br	14124 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14120:	00bffec4 	movi	r2,-5
}
   14124:	e037883a 	mov	sp,fp
   14128:	dfc00117 	ldw	ra,4(sp)
   1412c:	df000017 	ldw	fp,0(sp)
   14130:	dec00204 	addi	sp,sp,8
   14134:	f800283a 	ret

00014138 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14138:	defff904 	addi	sp,sp,-28
   1413c:	dfc00615 	stw	ra,24(sp)
   14140:	df000515 	stw	fp,20(sp)
   14144:	df000504 	addi	fp,sp,20
   14148:	e13ffe15 	stw	r4,-8(fp)
   1414c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14150:	0007883a 	mov	r3,zero
   14154:	e0bffe17 	ldw	r2,-8(fp)
   14158:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1415c:	e0bffe17 	ldw	r2,-8(fp)
   14160:	10800104 	addi	r2,r2,4
   14164:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14168:	0005303a 	rdctl	r2,status
   1416c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14170:	e0fffc17 	ldw	r3,-16(fp)
   14174:	00bfff84 	movi	r2,-2
   14178:	1884703a 	and	r2,r3,r2
   1417c:	1001703a 	wrctl	status,r2
  
  return context;
   14180:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14184:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   14188:	0014ebc0 	call	14ebc <alt_tick>
   1418c:	e0bffb17 	ldw	r2,-20(fp)
   14190:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14194:	e0bffd17 	ldw	r2,-12(fp)
   14198:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1419c:	0001883a 	nop
   141a0:	e037883a 	mov	sp,fp
   141a4:	dfc00117 	ldw	ra,4(sp)
   141a8:	df000017 	ldw	fp,0(sp)
   141ac:	dec00204 	addi	sp,sp,8
   141b0:	f800283a 	ret

000141b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   141b4:	defff904 	addi	sp,sp,-28
   141b8:	dfc00615 	stw	ra,24(sp)
   141bc:	df000515 	stw	fp,20(sp)
   141c0:	df000504 	addi	fp,sp,20
   141c4:	e13ffc15 	stw	r4,-16(fp)
   141c8:	e17ffd15 	stw	r5,-12(fp)
   141cc:	e1bffe15 	stw	r6,-8(fp)
   141d0:	e1ffff15 	stw	r7,-4(fp)
   141d4:	e0bfff17 	ldw	r2,-4(fp)
   141d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   141dc:	d0a6bc17 	ldw	r2,-25872(gp)
   141e0:	1000021e 	bne	r2,zero,141ec <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   141e4:	e0bffb17 	ldw	r2,-20(fp)
   141e8:	d0a6bc15 	stw	r2,-25872(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   141ec:	e0bffc17 	ldw	r2,-16(fp)
   141f0:	10800104 	addi	r2,r2,4
   141f4:	00c001c4 	movi	r3,7
   141f8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   141fc:	01800074 	movhi	r6,1
   14200:	31904e04 	addi	r6,r6,16696
   14204:	e17ffc17 	ldw	r5,-16(fp)
   14208:	e13ffe17 	ldw	r4,-8(fp)
   1420c:	0014ca00 	call	14ca0 <alt_irq_register>
#endif  
}
   14210:	0001883a 	nop
   14214:	e037883a 	mov	sp,fp
   14218:	dfc00117 	ldw	ra,4(sp)
   1421c:	df000017 	ldw	fp,0(sp)
   14220:	dec00204 	addi	sp,sp,8
   14224:	f800283a 	ret

00014228 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   14228:	defffc04 	addi	sp,sp,-16
   1422c:	dfc00315 	stw	ra,12(sp)
   14230:	df000215 	stw	fp,8(sp)
   14234:	df000204 	addi	fp,sp,8
   14238:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   1423c:	d1600604 	addi	r5,gp,-32744
   14240:	e13fff17 	ldw	r4,-4(fp)
   14244:	00148c40 	call	148c4 <alt_find_dev>
   14248:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1424c:	e0bffe17 	ldw	r2,-8(fp)
}
   14250:	e037883a 	mov	sp,fp
   14254:	dfc00117 	ldw	ra,4(sp)
   14258:	df000017 	ldw	fp,0(sp)
   1425c:	dec00204 	addi	sp,sp,8
   14260:	f800283a 	ret

00014264 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   14264:	defffd04 	addi	sp,sp,-12
   14268:	df000215 	stw	fp,8(sp)
   1426c:	df000204 	addi	fp,sp,8
   14270:	e13ffe15 	stw	r4,-8(fp)
   14274:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   14278:	e0bffe17 	ldw	r2,-8(fp)
   1427c:	10800a17 	ldw	r2,40(r2)
   14280:	10800023 	ldbuio	r2,0(r2)
   14284:	10803fcc 	andi	r2,r2,255
   14288:	1007883a 	mov	r3,r2
   1428c:	e0bfff17 	ldw	r2,-4(fp)
   14290:	10c00005 	stb	r3,0(r2)

	return 0;
   14294:	0005883a 	mov	r2,zero
}
   14298:	e037883a 	mov	sp,fp
   1429c:	df000017 	ldw	fp,0(sp)
   142a0:	dec00104 	addi	sp,sp,4
   142a4:	f800283a 	ret

000142a8 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   142a8:	defffc04 	addi	sp,sp,-16
   142ac:	df000315 	stw	fp,12(sp)
   142b0:	df000304 	addi	fp,sp,12
   142b4:	e13ffd15 	stw	r4,-12(fp)
   142b8:	2805883a 	mov	r2,r5
   142bc:	e1bfff15 	stw	r6,-4(fp)
   142c0:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   142c4:	e0bffd17 	ldw	r2,-12(fp)
   142c8:	10800a17 	ldw	r2,40(r2)
   142cc:	1007883a 	mov	r3,r2
   142d0:	e0bffe03 	ldbu	r2,-8(fp)
   142d4:	10800fcc 	andi	r2,r2,63
   142d8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	10800a17 	ldw	r2,40(r2)
   142e4:	10800044 	addi	r2,r2,1
   142e8:	10800023 	ldbuio	r2,0(r2)
   142ec:	10803fcc 	andi	r2,r2,255
   142f0:	1007883a 	mov	r3,r2
   142f4:	e0bfff17 	ldw	r2,-4(fp)
   142f8:	10c00005 	stb	r3,0(r2)

	return 0;
   142fc:	0005883a 	mov	r2,zero
}
   14300:	e037883a 	mov	sp,fp
   14304:	df000017 	ldw	fp,0(sp)
   14308:	dec00104 	addi	sp,sp,4
   1430c:	f800283a 	ret

00014310 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   14310:	defffc04 	addi	sp,sp,-16
   14314:	df000315 	stw	fp,12(sp)
   14318:	df000304 	addi	fp,sp,12
   1431c:	e13ffd15 	stw	r4,-12(fp)
   14320:	2807883a 	mov	r3,r5
   14324:	3005883a 	mov	r2,r6
   14328:	e0fffe05 	stb	r3,-8(fp)
   1432c:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	10800a17 	ldw	r2,40(r2)
   14338:	1007883a 	mov	r3,r2
   1433c:	e0bffe03 	ldbu	r2,-8(fp)
   14340:	10800fcc 	andi	r2,r2,63
   14344:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   14348:	e0bffd17 	ldw	r2,-12(fp)
   1434c:	10800a17 	ldw	r2,40(r2)
   14350:	10800044 	addi	r2,r2,1
   14354:	1007883a 	mov	r3,r2
   14358:	e0bfff03 	ldbu	r2,-4(fp)
   1435c:	18800025 	stbio	r2,0(r3)

	return 0;
   14360:	0005883a 	mov	r2,zero
}
   14364:	e037883a 	mov	sp,fp
   14368:	df000017 	ldw	fp,0(sp)
   1436c:	dec00104 	addi	sp,sp,4
   14370:	f800283a 	ret

00014374 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   14374:	defffd04 	addi	sp,sp,-12
   14378:	df000215 	stw	fp,8(sp)
   1437c:	df000204 	addi	fp,sp,8
   14380:	e13ffe15 	stw	r4,-8(fp)
   14384:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14388:	e0bffe17 	ldw	r2,-8(fp)
   1438c:	10800a17 	ldw	r2,40(r2)
   14390:	1007883a 	mov	r3,r2
   14394:	00800c84 	movi	r2,50
   14398:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1439c:	e0bffe17 	ldw	r2,-8(fp)
   143a0:	10800a17 	ldw	r2,40(r2)
   143a4:	10800044 	addi	r2,r2,1
   143a8:	10800023 	ldbuio	r2,0(r2)
   143ac:	10803fcc 	andi	r2,r2,255
   143b0:	10ffffcc 	andi	r3,r2,65535
   143b4:	e0bfff17 	ldw	r2,-4(fp)
   143b8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   143bc:	e0bffe17 	ldw	r2,-8(fp)
   143c0:	10800a17 	ldw	r2,40(r2)
   143c4:	1007883a 	mov	r3,r2
   143c8:	00800cc4 	movi	r2,51
   143cc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   143d0:	e0bffe17 	ldw	r2,-8(fp)
   143d4:	10800a17 	ldw	r2,40(r2)
   143d8:	10800044 	addi	r2,r2,1
   143dc:	10800023 	ldbuio	r2,0(r2)
   143e0:	10803fcc 	andi	r2,r2,255
   143e4:	10bfffcc 	andi	r2,r2,65535
   143e8:	1004923a 	slli	r2,r2,8
   143ec:	e0ffff17 	ldw	r3,-4(fp)
   143f0:	18c00017 	ldw	r3,0(r3)
   143f4:	1885883a 	add	r2,r3,r2
   143f8:	1007883a 	mov	r3,r2
   143fc:	e0bfff17 	ldw	r2,-4(fp)
   14400:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   14404:	e0bfff17 	ldw	r2,-4(fp)
   14408:	10800017 	ldw	r2,0(r2)
   1440c:	10a0000c 	andi	r2,r2,32768
   14410:	10000626 	beq	r2,zero,1442c <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	10800017 	ldw	r2,0(r2)
   1441c:	10bffff4 	orhi	r2,r2,65535
   14420:	1007883a 	mov	r3,r2
   14424:	e0bfff17 	ldw	r2,-4(fp)
   14428:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   1442c:	0005883a 	mov	r2,zero
}
   14430:	e037883a 	mov	sp,fp
   14434:	df000017 	ldw	fp,0(sp)
   14438:	dec00104 	addi	sp,sp,4
   1443c:	f800283a 	ret

00014440 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   14440:	defffd04 	addi	sp,sp,-12
   14444:	df000215 	stw	fp,8(sp)
   14448:	df000204 	addi	fp,sp,8
   1444c:	e13ffe15 	stw	r4,-8(fp)
   14450:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14454:	e0bffe17 	ldw	r2,-8(fp)
   14458:	10800a17 	ldw	r2,40(r2)
   1445c:	1007883a 	mov	r3,r2
   14460:	00800d04 	movi	r2,52
   14464:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   14468:	e0bffe17 	ldw	r2,-8(fp)
   1446c:	10800a17 	ldw	r2,40(r2)
   14470:	10800044 	addi	r2,r2,1
   14474:	10800023 	ldbuio	r2,0(r2)
   14478:	10803fcc 	andi	r2,r2,255
   1447c:	10ffffcc 	andi	r3,r2,65535
   14480:	e0bfff17 	ldw	r2,-4(fp)
   14484:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14488:	e0bffe17 	ldw	r2,-8(fp)
   1448c:	10800a17 	ldw	r2,40(r2)
   14490:	1007883a 	mov	r3,r2
   14494:	00800d44 	movi	r2,53
   14498:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1449c:	e0bffe17 	ldw	r2,-8(fp)
   144a0:	10800a17 	ldw	r2,40(r2)
   144a4:	10800044 	addi	r2,r2,1
   144a8:	10800023 	ldbuio	r2,0(r2)
   144ac:	10803fcc 	andi	r2,r2,255
   144b0:	10bfffcc 	andi	r2,r2,65535
   144b4:	1004923a 	slli	r2,r2,8
   144b8:	e0ffff17 	ldw	r3,-4(fp)
   144bc:	18c00017 	ldw	r3,0(r3)
   144c0:	1885883a 	add	r2,r3,r2
   144c4:	1007883a 	mov	r3,r2
   144c8:	e0bfff17 	ldw	r2,-4(fp)
   144cc:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   144d0:	e0bfff17 	ldw	r2,-4(fp)
   144d4:	10800017 	ldw	r2,0(r2)
   144d8:	10a0000c 	andi	r2,r2,32768
   144dc:	10000626 	beq	r2,zero,144f8 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   144e0:	e0bfff17 	ldw	r2,-4(fp)
   144e4:	10800017 	ldw	r2,0(r2)
   144e8:	10bffff4 	orhi	r2,r2,65535
   144ec:	1007883a 	mov	r3,r2
   144f0:	e0bfff17 	ldw	r2,-4(fp)
   144f4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   144f8:	0005883a 	mov	r2,zero
}
   144fc:	e037883a 	mov	sp,fp
   14500:	df000017 	ldw	fp,0(sp)
   14504:	dec00104 	addi	sp,sp,4
   14508:	f800283a 	ret

0001450c <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   1450c:	defffd04 	addi	sp,sp,-12
   14510:	df000215 	stw	fp,8(sp)
   14514:	df000204 	addi	fp,sp,8
   14518:	e13ffe15 	stw	r4,-8(fp)
   1451c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14520:	e0bffe17 	ldw	r2,-8(fp)
   14524:	10800a17 	ldw	r2,40(r2)
   14528:	1007883a 	mov	r3,r2
   1452c:	00800d84 	movi	r2,54
   14530:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   14534:	e0bffe17 	ldw	r2,-8(fp)
   14538:	10800a17 	ldw	r2,40(r2)
   1453c:	10800044 	addi	r2,r2,1
   14540:	10800023 	ldbuio	r2,0(r2)
   14544:	10803fcc 	andi	r2,r2,255
   14548:	10ffffcc 	andi	r3,r2,65535
   1454c:	e0bfff17 	ldw	r2,-4(fp)
   14550:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   14554:	e0bffe17 	ldw	r2,-8(fp)
   14558:	10800a17 	ldw	r2,40(r2)
   1455c:	1007883a 	mov	r3,r2
   14560:	00800dc4 	movi	r2,55
   14564:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   14568:	e0bffe17 	ldw	r2,-8(fp)
   1456c:	10800a17 	ldw	r2,40(r2)
   14570:	10800044 	addi	r2,r2,1
   14574:	10800023 	ldbuio	r2,0(r2)
   14578:	10803fcc 	andi	r2,r2,255
   1457c:	10bfffcc 	andi	r2,r2,65535
   14580:	1004923a 	slli	r2,r2,8
   14584:	e0ffff17 	ldw	r3,-4(fp)
   14588:	18c00017 	ldw	r3,0(r3)
   1458c:	1885883a 	add	r2,r3,r2
   14590:	1007883a 	mov	r3,r2
   14594:	e0bfff17 	ldw	r2,-4(fp)
   14598:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   1459c:	e0bfff17 	ldw	r2,-4(fp)
   145a0:	10800017 	ldw	r2,0(r2)
   145a4:	10a0000c 	andi	r2,r2,32768
   145a8:	10000626 	beq	r2,zero,145c4 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   145ac:	e0bfff17 	ldw	r2,-4(fp)
   145b0:	10800017 	ldw	r2,0(r2)
   145b4:	10bffff4 	orhi	r2,r2,65535
   145b8:	1007883a 	mov	r3,r2
   145bc:	e0bfff17 	ldw	r2,-4(fp)
   145c0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   145c4:	0005883a 	mov	r2,zero
}
   145c8:	e037883a 	mov	sp,fp
   145cc:	df000017 	ldw	fp,0(sp)
   145d0:	dec00104 	addi	sp,sp,4
   145d4:	f800283a 	ret

000145d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   145d8:	defff504 	addi	sp,sp,-44
   145dc:	df000a15 	stw	fp,40(sp)
   145e0:	df000a04 	addi	fp,sp,40
   145e4:	e13ffc15 	stw	r4,-16(fp)
   145e8:	e17ffd15 	stw	r5,-12(fp)
   145ec:	e1bffe15 	stw	r6,-8(fp)
   145f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   145f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   145f8:	d0a6bc17 	ldw	r2,-25872(gp)
  
  if (alt_ticks_per_second ())
   145fc:	10003c26 	beq	r2,zero,146f0 <alt_alarm_start+0x118>
  {
    if (alarm)
   14600:	e0bffc17 	ldw	r2,-16(fp)
   14604:	10003826 	beq	r2,zero,146e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14608:	e0bffc17 	ldw	r2,-16(fp)
   1460c:	e0fffe17 	ldw	r3,-8(fp)
   14610:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14614:	e0bffc17 	ldw	r2,-16(fp)
   14618:	e0ffff17 	ldw	r3,-4(fp)
   1461c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14620:	0005303a 	rdctl	r2,status
   14624:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14628:	e0fff917 	ldw	r3,-28(fp)
   1462c:	00bfff84 	movi	r2,-2
   14630:	1884703a 	and	r2,r3,r2
   14634:	1001703a 	wrctl	status,r2
  
  return context;
   14638:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1463c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14640:	d0a6bd17 	ldw	r2,-25868(gp)
      
      current_nticks = alt_nticks();
   14644:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14648:	e0fffd17 	ldw	r3,-12(fp)
   1464c:	e0bff617 	ldw	r2,-40(fp)
   14650:	1885883a 	add	r2,r3,r2
   14654:	10c00044 	addi	r3,r2,1
   14658:	e0bffc17 	ldw	r2,-16(fp)
   1465c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14660:	e0bffc17 	ldw	r2,-16(fp)
   14664:	10c00217 	ldw	r3,8(r2)
   14668:	e0bff617 	ldw	r2,-40(fp)
   1466c:	1880042e 	bgeu	r3,r2,14680 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14670:	e0bffc17 	ldw	r2,-16(fp)
   14674:	00c00044 	movi	r3,1
   14678:	10c00405 	stb	r3,16(r2)
   1467c:	00000206 	br	14688 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14680:	e0bffc17 	ldw	r2,-16(fp)
   14684:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14688:	e0bffc17 	ldw	r2,-16(fp)
   1468c:	d0e00c04 	addi	r3,gp,-32720
   14690:	e0fffa15 	stw	r3,-24(fp)
   14694:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14698:	e0bffb17 	ldw	r2,-20(fp)
   1469c:	e0fffa17 	ldw	r3,-24(fp)
   146a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   146a4:	e0bffa17 	ldw	r2,-24(fp)
   146a8:	10c00017 	ldw	r3,0(r2)
   146ac:	e0bffb17 	ldw	r2,-20(fp)
   146b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   146b4:	e0bffa17 	ldw	r2,-24(fp)
   146b8:	10800017 	ldw	r2,0(r2)
   146bc:	e0fffb17 	ldw	r3,-20(fp)
   146c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   146c4:	e0bffa17 	ldw	r2,-24(fp)
   146c8:	e0fffb17 	ldw	r3,-20(fp)
   146cc:	10c00015 	stw	r3,0(r2)
   146d0:	e0bff817 	ldw	r2,-32(fp)
   146d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146d8:	e0bff717 	ldw	r2,-36(fp)
   146dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   146e0:	0005883a 	mov	r2,zero
   146e4:	00000306 	br	146f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   146e8:	00bffa84 	movi	r2,-22
   146ec:	00000106 	br	146f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   146f0:	00bfde84 	movi	r2,-134
  }
}
   146f4:	e037883a 	mov	sp,fp
   146f8:	df000017 	ldw	fp,0(sp)
   146fc:	dec00104 	addi	sp,sp,4
   14700:	f800283a 	ret

00014704 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14704:	deffff04 	addi	sp,sp,-4
   14708:	df000015 	stw	fp,0(sp)
   1470c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14710:	0001883a 	nop
   14714:	e037883a 	mov	sp,fp
   14718:	df000017 	ldw	fp,0(sp)
   1471c:	dec00104 	addi	sp,sp,4
   14720:	f800283a 	ret

00014724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14724:	defffe04 	addi	sp,sp,-8
   14728:	dfc00115 	stw	ra,4(sp)
   1472c:	df000015 	stw	fp,0(sp)
   14730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14734:	d0a00917 	ldw	r2,-32732(gp)
   14738:	10000326 	beq	r2,zero,14748 <alt_get_errno+0x24>
   1473c:	d0a00917 	ldw	r2,-32732(gp)
   14740:	103ee83a 	callr	r2
   14744:	00000106 	br	1474c <alt_get_errno+0x28>
   14748:	d0a6b404 	addi	r2,gp,-25904
}
   1474c:	e037883a 	mov	sp,fp
   14750:	dfc00117 	ldw	ra,4(sp)
   14754:	df000017 	ldw	fp,0(sp)
   14758:	dec00204 	addi	sp,sp,8
   1475c:	f800283a 	ret

00014760 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14760:	defffa04 	addi	sp,sp,-24
   14764:	dfc00515 	stw	ra,20(sp)
   14768:	df000415 	stw	fp,16(sp)
   1476c:	df000404 	addi	fp,sp,16
   14770:	e13ffe15 	stw	r4,-8(fp)
   14774:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14778:	e0bffe17 	ldw	r2,-8(fp)
   1477c:	10000326 	beq	r2,zero,1478c <alt_dev_llist_insert+0x2c>
   14780:	e0bffe17 	ldw	r2,-8(fp)
   14784:	10800217 	ldw	r2,8(r2)
   14788:	1000061e 	bne	r2,zero,147a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1478c:	00147240 	call	14724 <alt_get_errno>
   14790:	1007883a 	mov	r3,r2
   14794:	00800584 	movi	r2,22
   14798:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1479c:	00bffa84 	movi	r2,-22
   147a0:	00001306 	br	147f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   147a4:	e0bffe17 	ldw	r2,-8(fp)
   147a8:	e0ffff17 	ldw	r3,-4(fp)
   147ac:	e0fffc15 	stw	r3,-16(fp)
   147b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   147b4:	e0bffd17 	ldw	r2,-12(fp)
   147b8:	e0fffc17 	ldw	r3,-16(fp)
   147bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   147c0:	e0bffc17 	ldw	r2,-16(fp)
   147c4:	10c00017 	ldw	r3,0(r2)
   147c8:	e0bffd17 	ldw	r2,-12(fp)
   147cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   147d0:	e0bffc17 	ldw	r2,-16(fp)
   147d4:	10800017 	ldw	r2,0(r2)
   147d8:	e0fffd17 	ldw	r3,-12(fp)
   147dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	e0fffd17 	ldw	r3,-12(fp)
   147e8:	10c00015 	stw	r3,0(r2)

  return 0;  
   147ec:	0005883a 	mov	r2,zero
}
   147f0:	e037883a 	mov	sp,fp
   147f4:	dfc00117 	ldw	ra,4(sp)
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00204 	addi	sp,sp,8
   14800:	f800283a 	ret

00014804 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14804:	defffd04 	addi	sp,sp,-12
   14808:	dfc00215 	stw	ra,8(sp)
   1480c:	df000115 	stw	fp,4(sp)
   14810:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14814:	00800074 	movhi	r2,1
   14818:	10968204 	addi	r2,r2,23048
   1481c:	e0bfff15 	stw	r2,-4(fp)
   14820:	00000606 	br	1483c <_do_ctors+0x38>
        (*ctor) (); 
   14824:	e0bfff17 	ldw	r2,-4(fp)
   14828:	10800017 	ldw	r2,0(r2)
   1482c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14830:	e0bfff17 	ldw	r2,-4(fp)
   14834:	10bfff04 	addi	r2,r2,-4
   14838:	e0bfff15 	stw	r2,-4(fp)
   1483c:	e0ffff17 	ldw	r3,-4(fp)
   14840:	00800074 	movhi	r2,1
   14844:	10968304 	addi	r2,r2,23052
   14848:	18bff62e 	bgeu	r3,r2,14824 <_do_ctors+0x20>
        (*ctor) (); 
}
   1484c:	0001883a 	nop
   14850:	e037883a 	mov	sp,fp
   14854:	dfc00117 	ldw	ra,4(sp)
   14858:	df000017 	ldw	fp,0(sp)
   1485c:	dec00204 	addi	sp,sp,8
   14860:	f800283a 	ret

00014864 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14864:	defffd04 	addi	sp,sp,-12
   14868:	dfc00215 	stw	ra,8(sp)
   1486c:	df000115 	stw	fp,4(sp)
   14870:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14874:	00800074 	movhi	r2,1
   14878:	10968204 	addi	r2,r2,23048
   1487c:	e0bfff15 	stw	r2,-4(fp)
   14880:	00000606 	br	1489c <_do_dtors+0x38>
        (*dtor) (); 
   14884:	e0bfff17 	ldw	r2,-4(fp)
   14888:	10800017 	ldw	r2,0(r2)
   1488c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14890:	e0bfff17 	ldw	r2,-4(fp)
   14894:	10bfff04 	addi	r2,r2,-4
   14898:	e0bfff15 	stw	r2,-4(fp)
   1489c:	e0ffff17 	ldw	r3,-4(fp)
   148a0:	00800074 	movhi	r2,1
   148a4:	10968304 	addi	r2,r2,23052
   148a8:	18bff62e 	bgeu	r3,r2,14884 <_do_dtors+0x20>
        (*dtor) (); 
}
   148ac:	0001883a 	nop
   148b0:	e037883a 	mov	sp,fp
   148b4:	dfc00117 	ldw	ra,4(sp)
   148b8:	df000017 	ldw	fp,0(sp)
   148bc:	dec00204 	addi	sp,sp,8
   148c0:	f800283a 	ret

000148c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   148c4:	defffa04 	addi	sp,sp,-24
   148c8:	dfc00515 	stw	ra,20(sp)
   148cc:	df000415 	stw	fp,16(sp)
   148d0:	df000404 	addi	fp,sp,16
   148d4:	e13ffe15 	stw	r4,-8(fp)
   148d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   148dc:	e0bfff17 	ldw	r2,-4(fp)
   148e0:	10800017 	ldw	r2,0(r2)
   148e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   148e8:	e13ffe17 	ldw	r4,-8(fp)
   148ec:	00153fc0 	call	153fc <strlen>
   148f0:	10800044 	addi	r2,r2,1
   148f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   148f8:	00000d06 	br	14930 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   148fc:	e0bffc17 	ldw	r2,-16(fp)
   14900:	10800217 	ldw	r2,8(r2)
   14904:	e0fffd17 	ldw	r3,-12(fp)
   14908:	180d883a 	mov	r6,r3
   1490c:	e17ffe17 	ldw	r5,-8(fp)
   14910:	1009883a 	mov	r4,r2
   14914:	00150d00 	call	150d0 <memcmp>
   14918:	1000021e 	bne	r2,zero,14924 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1491c:	e0bffc17 	ldw	r2,-16(fp)
   14920:	00000706 	br	14940 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14924:	e0bffc17 	ldw	r2,-16(fp)
   14928:	10800017 	ldw	r2,0(r2)
   1492c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14930:	e0fffc17 	ldw	r3,-16(fp)
   14934:	e0bfff17 	ldw	r2,-4(fp)
   14938:	18bff01e 	bne	r3,r2,148fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1493c:	0005883a 	mov	r2,zero
}
   14940:	e037883a 	mov	sp,fp
   14944:	dfc00117 	ldw	ra,4(sp)
   14948:	df000017 	ldw	fp,0(sp)
   1494c:	dec00204 	addi	sp,sp,8
   14950:	f800283a 	ret

00014954 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14954:	defffb04 	addi	sp,sp,-20
   14958:	dfc00415 	stw	ra,16(sp)
   1495c:	df000315 	stw	fp,12(sp)
   14960:	df000304 	addi	fp,sp,12
   14964:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14968:	d0a00417 	ldw	r2,-32752(gp)
   1496c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14970:	00003106 	br	14a38 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   14974:	e0bffd17 	ldw	r2,-12(fp)
   14978:	10800217 	ldw	r2,8(r2)
   1497c:	1009883a 	mov	r4,r2
   14980:	00153fc0 	call	153fc <strlen>
   14984:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14988:	e0bffd17 	ldw	r2,-12(fp)
   1498c:	10c00217 	ldw	r3,8(r2)
   14990:	e0bffe17 	ldw	r2,-8(fp)
   14994:	10bfffc4 	addi	r2,r2,-1
   14998:	1885883a 	add	r2,r3,r2
   1499c:	10800003 	ldbu	r2,0(r2)
   149a0:	10803fcc 	andi	r2,r2,255
   149a4:	1080201c 	xori	r2,r2,128
   149a8:	10bfe004 	addi	r2,r2,-128
   149ac:	10800bd8 	cmpnei	r2,r2,47
   149b0:	1000031e 	bne	r2,zero,149c0 <alt_find_file+0x6c>
    {
      len -= 1;
   149b4:	e0bffe17 	ldw	r2,-8(fp)
   149b8:	10bfffc4 	addi	r2,r2,-1
   149bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   149c0:	e0bffe17 	ldw	r2,-8(fp)
   149c4:	e0ffff17 	ldw	r3,-4(fp)
   149c8:	1885883a 	add	r2,r3,r2
   149cc:	10800003 	ldbu	r2,0(r2)
   149d0:	10803fcc 	andi	r2,r2,255
   149d4:	1080201c 	xori	r2,r2,128
   149d8:	10bfe004 	addi	r2,r2,-128
   149dc:	10800be0 	cmpeqi	r2,r2,47
   149e0:	1000081e 	bne	r2,zero,14a04 <alt_find_file+0xb0>
   149e4:	e0bffe17 	ldw	r2,-8(fp)
   149e8:	e0ffff17 	ldw	r3,-4(fp)
   149ec:	1885883a 	add	r2,r3,r2
   149f0:	10800003 	ldbu	r2,0(r2)
   149f4:	10803fcc 	andi	r2,r2,255
   149f8:	1080201c 	xori	r2,r2,128
   149fc:	10bfe004 	addi	r2,r2,-128
   14a00:	10000a1e 	bne	r2,zero,14a2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   14a04:	e0bffd17 	ldw	r2,-12(fp)
   14a08:	10800217 	ldw	r2,8(r2)
   14a0c:	e0fffe17 	ldw	r3,-8(fp)
   14a10:	180d883a 	mov	r6,r3
   14a14:	e17fff17 	ldw	r5,-4(fp)
   14a18:	1009883a 	mov	r4,r2
   14a1c:	00150d00 	call	150d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14a20:	1000021e 	bne	r2,zero,14a2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14a24:	e0bffd17 	ldw	r2,-12(fp)
   14a28:	00000706 	br	14a48 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   14a2c:	e0bffd17 	ldw	r2,-12(fp)
   14a30:	10800017 	ldw	r2,0(r2)
   14a34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14a38:	e0fffd17 	ldw	r3,-12(fp)
   14a3c:	d0a00404 	addi	r2,gp,-32752
   14a40:	18bfcc1e 	bne	r3,r2,14974 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   14a44:	0005883a 	mov	r2,zero
}
   14a48:	e037883a 	mov	sp,fp
   14a4c:	dfc00117 	ldw	ra,4(sp)
   14a50:	df000017 	ldw	fp,0(sp)
   14a54:	dec00204 	addi	sp,sp,8
   14a58:	f800283a 	ret

00014a5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14a5c:	defffa04 	addi	sp,sp,-24
   14a60:	dfc00515 	stw	ra,20(sp)
   14a64:	df000415 	stw	fp,16(sp)
   14a68:	dc000315 	stw	r16,12(sp)
   14a6c:	df000404 	addi	fp,sp,16
   14a70:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   14a74:	00bffa04 	movi	r2,-24
   14a78:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14a7c:	e03ffc15 	stw	zero,-16(fp)
   14a80:	00001d06 	br	14af8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   14a84:	04000074 	movhi	r16,1
   14a88:	8418b904 	addi	r16,r16,25316
   14a8c:	e0bffc17 	ldw	r2,-16(fp)
   14a90:	01400304 	movi	r5,12
   14a94:	1009883a 	mov	r4,r2
   14a98:	00127580 	call	12758 <__mulsi3>
   14a9c:	8085883a 	add	r2,r16,r2
   14aa0:	10800017 	ldw	r2,0(r2)
   14aa4:	1000111e 	bne	r2,zero,14aec <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   14aa8:	04000074 	movhi	r16,1
   14aac:	8418b904 	addi	r16,r16,25316
   14ab0:	e0bffc17 	ldw	r2,-16(fp)
   14ab4:	01400304 	movi	r5,12
   14ab8:	1009883a 	mov	r4,r2
   14abc:	00127580 	call	12758 <__mulsi3>
   14ac0:	8085883a 	add	r2,r16,r2
   14ac4:	e0fffe17 	ldw	r3,-8(fp)
   14ac8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14acc:	d0e00817 	ldw	r3,-32736(gp)
   14ad0:	e0bffc17 	ldw	r2,-16(fp)
   14ad4:	1880020e 	bge	r3,r2,14ae0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   14ad8:	e0bffc17 	ldw	r2,-16(fp)
   14adc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   14ae0:	e0bffc17 	ldw	r2,-16(fp)
   14ae4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14ae8:	00000606 	br	14b04 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14aec:	e0bffc17 	ldw	r2,-16(fp)
   14af0:	10800044 	addi	r2,r2,1
   14af4:	e0bffc15 	stw	r2,-16(fp)
   14af8:	e0bffc17 	ldw	r2,-16(fp)
   14afc:	10800810 	cmplti	r2,r2,32
   14b00:	103fe01e 	bne	r2,zero,14a84 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14b04:	e0bffd17 	ldw	r2,-12(fp)
}
   14b08:	e6ffff04 	addi	sp,fp,-4
   14b0c:	dfc00217 	ldw	ra,8(sp)
   14b10:	df000117 	ldw	fp,4(sp)
   14b14:	dc000017 	ldw	r16,0(sp)
   14b18:	dec00304 	addi	sp,sp,12
   14b1c:	f800283a 	ret

00014b20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14b20:	deffff04 	addi	sp,sp,-4
   14b24:	df000015 	stw	fp,0(sp)
   14b28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14b2c:	0001883a 	nop
   14b30:	e037883a 	mov	sp,fp
   14b34:	df000017 	ldw	fp,0(sp)
   14b38:	dec00104 	addi	sp,sp,4
   14b3c:	f800283a 	ret

00014b40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14b40:	defff804 	addi	sp,sp,-32
   14b44:	dfc00715 	stw	ra,28(sp)
   14b48:	df000615 	stw	fp,24(sp)
   14b4c:	dc000515 	stw	r16,20(sp)
   14b50:	df000604 	addi	fp,sp,24
   14b54:	e13ffb15 	stw	r4,-20(fp)
   14b58:	e17ffc15 	stw	r5,-16(fp)
   14b5c:	e1bffd15 	stw	r6,-12(fp)
   14b60:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   14b64:	e1bffe17 	ldw	r6,-8(fp)
   14b68:	e17ffd17 	ldw	r5,-12(fp)
   14b6c:	e13ffc17 	ldw	r4,-16(fp)
   14b70:	0012e8c0 	call	12e8c <open>
   14b74:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   14b78:	e0bffa17 	ldw	r2,-24(fp)
   14b7c:	10002216 	blt	r2,zero,14c08 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14b80:	04000074 	movhi	r16,1
   14b84:	8418b904 	addi	r16,r16,25316
   14b88:	e0bffa17 	ldw	r2,-24(fp)
   14b8c:	01400304 	movi	r5,12
   14b90:	1009883a 	mov	r4,r2
   14b94:	00127580 	call	12758 <__mulsi3>
   14b98:	8085883a 	add	r2,r16,r2
   14b9c:	10c00017 	ldw	r3,0(r2)
   14ba0:	e0bffb17 	ldw	r2,-20(fp)
   14ba4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14ba8:	04000074 	movhi	r16,1
   14bac:	8418b904 	addi	r16,r16,25316
   14bb0:	e0bffa17 	ldw	r2,-24(fp)
   14bb4:	01400304 	movi	r5,12
   14bb8:	1009883a 	mov	r4,r2
   14bbc:	00127580 	call	12758 <__mulsi3>
   14bc0:	8085883a 	add	r2,r16,r2
   14bc4:	10800104 	addi	r2,r2,4
   14bc8:	10c00017 	ldw	r3,0(r2)
   14bcc:	e0bffb17 	ldw	r2,-20(fp)
   14bd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14bd4:	04000074 	movhi	r16,1
   14bd8:	8418b904 	addi	r16,r16,25316
   14bdc:	e0bffa17 	ldw	r2,-24(fp)
   14be0:	01400304 	movi	r5,12
   14be4:	1009883a 	mov	r4,r2
   14be8:	00127580 	call	12758 <__mulsi3>
   14bec:	8085883a 	add	r2,r16,r2
   14bf0:	10800204 	addi	r2,r2,8
   14bf4:	10c00017 	ldw	r3,0(r2)
   14bf8:	e0bffb17 	ldw	r2,-20(fp)
   14bfc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14c00:	e13ffa17 	ldw	r4,-24(fp)
   14c04:	00133900 	call	13390 <alt_release_fd>
  }
} 
   14c08:	0001883a 	nop
   14c0c:	e6ffff04 	addi	sp,fp,-4
   14c10:	dfc00217 	ldw	ra,8(sp)
   14c14:	df000117 	ldw	fp,4(sp)
   14c18:	dc000017 	ldw	r16,0(sp)
   14c1c:	dec00304 	addi	sp,sp,12
   14c20:	f800283a 	ret

00014c24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14c24:	defffb04 	addi	sp,sp,-20
   14c28:	dfc00415 	stw	ra,16(sp)
   14c2c:	df000315 	stw	fp,12(sp)
   14c30:	df000304 	addi	fp,sp,12
   14c34:	e13ffd15 	stw	r4,-12(fp)
   14c38:	e17ffe15 	stw	r5,-8(fp)
   14c3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14c40:	01c07fc4 	movi	r7,511
   14c44:	01800044 	movi	r6,1
   14c48:	e17ffd17 	ldw	r5,-12(fp)
   14c4c:	01000074 	movhi	r4,1
   14c50:	2118bc04 	addi	r4,r4,25328
   14c54:	0014b400 	call	14b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14c58:	01c07fc4 	movi	r7,511
   14c5c:	000d883a 	mov	r6,zero
   14c60:	e17ffe17 	ldw	r5,-8(fp)
   14c64:	01000074 	movhi	r4,1
   14c68:	2118b904 	addi	r4,r4,25316
   14c6c:	0014b400 	call	14b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14c70:	01c07fc4 	movi	r7,511
   14c74:	01800044 	movi	r6,1
   14c78:	e17fff17 	ldw	r5,-4(fp)
   14c7c:	01000074 	movhi	r4,1
   14c80:	2118bf04 	addi	r4,r4,25340
   14c84:	0014b400 	call	14b40 <alt_open_fd>
}  
   14c88:	0001883a 	nop
   14c8c:	e037883a 	mov	sp,fp
   14c90:	dfc00117 	ldw	ra,4(sp)
   14c94:	df000017 	ldw	fp,0(sp)
   14c98:	dec00204 	addi	sp,sp,8
   14c9c:	f800283a 	ret

00014ca0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   14ca0:	defff004 	addi	sp,sp,-64
   14ca4:	df000f15 	stw	fp,60(sp)
   14ca8:	df000f04 	addi	fp,sp,60
   14cac:	e13ffd15 	stw	r4,-12(fp)
   14cb0:	e17ffe15 	stw	r5,-8(fp)
   14cb4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   14cb8:	00bffa84 	movi	r2,-22
   14cbc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14cc0:	e0bffd17 	ldw	r2,-12(fp)
   14cc4:	10800828 	cmpgeui	r2,r2,32
   14cc8:	1000501e 	bne	r2,zero,14e0c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ccc:	0005303a 	rdctl	r2,status
   14cd0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cd4:	e0fff617 	ldw	r3,-40(fp)
   14cd8:	00bfff84 	movi	r2,-2
   14cdc:	1884703a 	and	r2,r3,r2
   14ce0:	1001703a 	wrctl	status,r2
  
  return context;
   14ce4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   14ce8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   14cec:	008000b4 	movhi	r2,2
   14cf0:	10a40504 	addi	r2,r2,-28652
   14cf4:	e0fffd17 	ldw	r3,-12(fp)
   14cf8:	180690fa 	slli	r3,r3,3
   14cfc:	10c5883a 	add	r2,r2,r3
   14d00:	e0ffff17 	ldw	r3,-4(fp)
   14d04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   14d08:	008000b4 	movhi	r2,2
   14d0c:	10a40504 	addi	r2,r2,-28652
   14d10:	e0fffd17 	ldw	r3,-12(fp)
   14d14:	180690fa 	slli	r3,r3,3
   14d18:	10c5883a 	add	r2,r2,r3
   14d1c:	10800104 	addi	r2,r2,4
   14d20:	e0fffe17 	ldw	r3,-8(fp)
   14d24:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   14d28:	e0bfff17 	ldw	r2,-4(fp)
   14d2c:	10001926 	beq	r2,zero,14d94 <alt_irq_register+0xf4>
   14d30:	e0bffd17 	ldw	r2,-12(fp)
   14d34:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d38:	0005303a 	rdctl	r2,status
   14d3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d40:	e0fff717 	ldw	r3,-36(fp)
   14d44:	00bfff84 	movi	r2,-2
   14d48:	1884703a 	and	r2,r3,r2
   14d4c:	1001703a 	wrctl	status,r2
  
  return context;
   14d50:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14d54:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   14d58:	00c00044 	movi	r3,1
   14d5c:	e0bff217 	ldw	r2,-56(fp)
   14d60:	1884983a 	sll	r2,r3,r2
   14d64:	1007883a 	mov	r3,r2
   14d68:	d0a6bb17 	ldw	r2,-25876(gp)
   14d6c:	1884b03a 	or	r2,r3,r2
   14d70:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14d74:	d0a6bb17 	ldw	r2,-25876(gp)
   14d78:	100170fa 	wrctl	ienable,r2
   14d7c:	e0bff817 	ldw	r2,-32(fp)
   14d80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d84:	e0bff917 	ldw	r2,-28(fp)
   14d88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14d8c:	0005883a 	mov	r2,zero
   14d90:	00001906 	br	14df8 <alt_irq_register+0x158>
   14d94:	e0bffd17 	ldw	r2,-12(fp)
   14d98:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d9c:	0005303a 	rdctl	r2,status
   14da0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14da4:	e0fffa17 	ldw	r3,-24(fp)
   14da8:	00bfff84 	movi	r2,-2
   14dac:	1884703a 	and	r2,r3,r2
   14db0:	1001703a 	wrctl	status,r2
  
  return context;
   14db4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14db8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   14dbc:	00c00044 	movi	r3,1
   14dc0:	e0bff417 	ldw	r2,-48(fp)
   14dc4:	1884983a 	sll	r2,r3,r2
   14dc8:	0084303a 	nor	r2,zero,r2
   14dcc:	1007883a 	mov	r3,r2
   14dd0:	d0a6bb17 	ldw	r2,-25876(gp)
   14dd4:	1884703a 	and	r2,r3,r2
   14dd8:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14ddc:	d0a6bb17 	ldw	r2,-25876(gp)
   14de0:	100170fa 	wrctl	ienable,r2
   14de4:	e0bffb17 	ldw	r2,-20(fp)
   14de8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dec:	e0bffc17 	ldw	r2,-16(fp)
   14df0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14df4:	0005883a 	mov	r2,zero
   14df8:	e0bff115 	stw	r2,-60(fp)
   14dfc:	e0bff317 	ldw	r2,-52(fp)
   14e00:	e0bff515 	stw	r2,-44(fp)
   14e04:	e0bff517 	ldw	r2,-44(fp)
   14e08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   14e0c:	e0bff117 	ldw	r2,-60(fp)
}
   14e10:	e037883a 	mov	sp,fp
   14e14:	df000017 	ldw	fp,0(sp)
   14e18:	dec00104 	addi	sp,sp,4
   14e1c:	f800283a 	ret

00014e20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14e20:	defffa04 	addi	sp,sp,-24
   14e24:	df000515 	stw	fp,20(sp)
   14e28:	df000504 	addi	fp,sp,20
   14e2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e30:	0005303a 	rdctl	r2,status
   14e34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e38:	e0fffc17 	ldw	r3,-16(fp)
   14e3c:	00bfff84 	movi	r2,-2
   14e40:	1884703a 	and	r2,r3,r2
   14e44:	1001703a 	wrctl	status,r2
  
  return context;
   14e48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14e4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14e50:	e0bfff17 	ldw	r2,-4(fp)
   14e54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14e58:	e0bffd17 	ldw	r2,-12(fp)
   14e5c:	10800017 	ldw	r2,0(r2)
   14e60:	e0fffd17 	ldw	r3,-12(fp)
   14e64:	18c00117 	ldw	r3,4(r3)
   14e68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14e6c:	e0bffd17 	ldw	r2,-12(fp)
   14e70:	10800117 	ldw	r2,4(r2)
   14e74:	e0fffd17 	ldw	r3,-12(fp)
   14e78:	18c00017 	ldw	r3,0(r3)
   14e7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14e80:	e0bffd17 	ldw	r2,-12(fp)
   14e84:	e0fffd17 	ldw	r3,-12(fp)
   14e88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14e8c:	e0bffd17 	ldw	r2,-12(fp)
   14e90:	e0fffd17 	ldw	r3,-12(fp)
   14e94:	10c00015 	stw	r3,0(r2)
   14e98:	e0bffb17 	ldw	r2,-20(fp)
   14e9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ea0:	e0bffe17 	ldw	r2,-8(fp)
   14ea4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14ea8:	0001883a 	nop
   14eac:	e037883a 	mov	sp,fp
   14eb0:	df000017 	ldw	fp,0(sp)
   14eb4:	dec00104 	addi	sp,sp,4
   14eb8:	f800283a 	ret

00014ebc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14ebc:	defffb04 	addi	sp,sp,-20
   14ec0:	dfc00415 	stw	ra,16(sp)
   14ec4:	df000315 	stw	fp,12(sp)
   14ec8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14ecc:	d0a00c17 	ldw	r2,-32720(gp)
   14ed0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14ed4:	d0a6bd17 	ldw	r2,-25868(gp)
   14ed8:	10800044 	addi	r2,r2,1
   14edc:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14ee0:	00002e06 	br	14f9c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14ee4:	e0bffd17 	ldw	r2,-12(fp)
   14ee8:	10800017 	ldw	r2,0(r2)
   14eec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	10800403 	ldbu	r2,16(r2)
   14ef8:	10803fcc 	andi	r2,r2,255
   14efc:	10000426 	beq	r2,zero,14f10 <alt_tick+0x54>
   14f00:	d0a6bd17 	ldw	r2,-25868(gp)
   14f04:	1000021e 	bne	r2,zero,14f10 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14f08:	e0bffd17 	ldw	r2,-12(fp)
   14f0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	10800217 	ldw	r2,8(r2)
   14f18:	d0e6bd17 	ldw	r3,-25868(gp)
   14f1c:	18801d36 	bltu	r3,r2,14f94 <alt_tick+0xd8>
   14f20:	e0bffd17 	ldw	r2,-12(fp)
   14f24:	10800403 	ldbu	r2,16(r2)
   14f28:	10803fcc 	andi	r2,r2,255
   14f2c:	1000191e 	bne	r2,zero,14f94 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	10800317 	ldw	r2,12(r2)
   14f38:	e0fffd17 	ldw	r3,-12(fp)
   14f3c:	18c00517 	ldw	r3,20(r3)
   14f40:	1809883a 	mov	r4,r3
   14f44:	103ee83a 	callr	r2
   14f48:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	1000031e 	bne	r2,zero,14f60 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14f54:	e13ffd17 	ldw	r4,-12(fp)
   14f58:	0014e200 	call	14e20 <alt_alarm_stop>
   14f5c:	00000d06 	br	14f94 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14f60:	e0bffd17 	ldw	r2,-12(fp)
   14f64:	10c00217 	ldw	r3,8(r2)
   14f68:	e0bfff17 	ldw	r2,-4(fp)
   14f6c:	1887883a 	add	r3,r3,r2
   14f70:	e0bffd17 	ldw	r2,-12(fp)
   14f74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14f78:	e0bffd17 	ldw	r2,-12(fp)
   14f7c:	10c00217 	ldw	r3,8(r2)
   14f80:	d0a6bd17 	ldw	r2,-25868(gp)
   14f84:	1880032e 	bgeu	r3,r2,14f94 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14f88:	e0bffd17 	ldw	r2,-12(fp)
   14f8c:	00c00044 	movi	r3,1
   14f90:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14f94:	e0bffe17 	ldw	r2,-8(fp)
   14f98:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14f9c:	e0fffd17 	ldw	r3,-12(fp)
   14fa0:	d0a00c04 	addi	r2,gp,-32720
   14fa4:	18bfcf1e 	bne	r3,r2,14ee4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14fa8:	0001883a 	nop
}
   14fac:	0001883a 	nop
   14fb0:	e037883a 	mov	sp,fp
   14fb4:	dfc00117 	ldw	ra,4(sp)
   14fb8:	df000017 	ldw	fp,0(sp)
   14fbc:	dec00204 	addi	sp,sp,8
   14fc0:	f800283a 	ret

00014fc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14fc4:	deffff04 	addi	sp,sp,-4
   14fc8:	df000015 	stw	fp,0(sp)
   14fcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14fd0:	000170fa 	wrctl	ienable,zero
}
   14fd4:	0001883a 	nop
   14fd8:	e037883a 	mov	sp,fp
   14fdc:	df000017 	ldw	fp,0(sp)
   14fe0:	dec00104 	addi	sp,sp,4
   14fe4:	f800283a 	ret

00014fe8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   14fe8:	defffe04 	addi	sp,sp,-8
   14fec:	df000115 	stw	fp,4(sp)
   14ff0:	df000104 	addi	fp,sp,4
   14ff4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   14ff8:	e0bfff17 	ldw	r2,-4(fp)
   14ffc:	10bffe84 	addi	r2,r2,-6
   15000:	10c00428 	cmpgeui	r3,r2,16
   15004:	18001a1e 	bne	r3,zero,15070 <alt_exception_cause_generated_bad_addr+0x88>
   15008:	100690ba 	slli	r3,r2,2
   1500c:	00800074 	movhi	r2,1
   15010:	10940804 	addi	r2,r2,20512
   15014:	1885883a 	add	r2,r3,r2
   15018:	10800017 	ldw	r2,0(r2)
   1501c:	1000683a 	jmp	r2
   15020:	00015060 	cmpeqi	zero,zero,1345
   15024:	00015060 	cmpeqi	zero,zero,1345
   15028:	00015070 	cmpltui	zero,zero,1345
   1502c:	00015070 	cmpltui	zero,zero,1345
   15030:	00015070 	cmpltui	zero,zero,1345
   15034:	00015060 	cmpeqi	zero,zero,1345
   15038:	00015068 	cmpgeui	zero,zero,1345
   1503c:	00015070 	cmpltui	zero,zero,1345
   15040:	00015060 	cmpeqi	zero,zero,1345
   15044:	00015060 	cmpeqi	zero,zero,1345
   15048:	00015070 	cmpltui	zero,zero,1345
   1504c:	00015060 	cmpeqi	zero,zero,1345
   15050:	00015068 	cmpgeui	zero,zero,1345
   15054:	00015070 	cmpltui	zero,zero,1345
   15058:	00015070 	cmpltui	zero,zero,1345
   1505c:	00015060 	cmpeqi	zero,zero,1345
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15060:	00800044 	movi	r2,1
   15064:	00000306 	br	15074 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15068:	0005883a 	mov	r2,zero
   1506c:	00000106 	br	15074 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15070:	0005883a 	mov	r2,zero
  }
}
   15074:	e037883a 	mov	sp,fp
   15078:	df000017 	ldw	fp,0(sp)
   1507c:	dec00104 	addi	sp,sp,4
   15080:	f800283a 	ret

00015084 <atexit>:
   15084:	200b883a 	mov	r5,r4
   15088:	000f883a 	mov	r7,zero
   1508c:	000d883a 	mov	r6,zero
   15090:	0009883a 	mov	r4,zero
   15094:	00157401 	jmpi	15740 <__register_exitproc>

00015098 <exit>:
   15098:	defffe04 	addi	sp,sp,-8
   1509c:	000b883a 	mov	r5,zero
   150a0:	dc000015 	stw	r16,0(sp)
   150a4:	dfc00115 	stw	ra,4(sp)
   150a8:	2021883a 	mov	r16,r4
   150ac:	00158580 	call	15858 <__call_exitprocs>
   150b0:	00800074 	movhi	r2,1
   150b4:	109d3c04 	addi	r2,r2,29936
   150b8:	11000017 	ldw	r4,0(r2)
   150bc:	20800f17 	ldw	r2,60(r4)
   150c0:	10000126 	beq	r2,zero,150c8 <exit+0x30>
   150c4:	103ee83a 	callr	r2
   150c8:	8009883a 	mov	r4,r16
   150cc:	00159d80 	call	159d8 <_exit>

000150d0 <memcmp>:
   150d0:	01c000c4 	movi	r7,3
   150d4:	3980192e 	bgeu	r7,r6,1513c <memcmp+0x6c>
   150d8:	2144b03a 	or	r2,r4,r5
   150dc:	11c4703a 	and	r2,r2,r7
   150e0:	10000f26 	beq	r2,zero,15120 <memcmp+0x50>
   150e4:	20800003 	ldbu	r2,0(r4)
   150e8:	28c00003 	ldbu	r3,0(r5)
   150ec:	10c0151e 	bne	r2,r3,15144 <memcmp+0x74>
   150f0:	31bfff84 	addi	r6,r6,-2
   150f4:	01ffffc4 	movi	r7,-1
   150f8:	00000406 	br	1510c <memcmp+0x3c>
   150fc:	20800003 	ldbu	r2,0(r4)
   15100:	28c00003 	ldbu	r3,0(r5)
   15104:	31bfffc4 	addi	r6,r6,-1
   15108:	10c00e1e 	bne	r2,r3,15144 <memcmp+0x74>
   1510c:	21000044 	addi	r4,r4,1
   15110:	29400044 	addi	r5,r5,1
   15114:	31fff91e 	bne	r6,r7,150fc <memcmp+0x2c>
   15118:	0005883a 	mov	r2,zero
   1511c:	f800283a 	ret
   15120:	20c00017 	ldw	r3,0(r4)
   15124:	28800017 	ldw	r2,0(r5)
   15128:	18bfee1e 	bne	r3,r2,150e4 <memcmp+0x14>
   1512c:	31bfff04 	addi	r6,r6,-4
   15130:	21000104 	addi	r4,r4,4
   15134:	29400104 	addi	r5,r5,4
   15138:	39bff936 	bltu	r7,r6,15120 <memcmp+0x50>
   1513c:	303fe91e 	bne	r6,zero,150e4 <memcmp+0x14>
   15140:	003ff506 	br	15118 <memcmp+0x48>
   15144:	10c5c83a 	sub	r2,r2,r3
   15148:	f800283a 	ret

0001514c <memcpy>:
   1514c:	defffd04 	addi	sp,sp,-12
   15150:	dfc00215 	stw	ra,8(sp)
   15154:	dc400115 	stw	r17,4(sp)
   15158:	dc000015 	stw	r16,0(sp)
   1515c:	00c003c4 	movi	r3,15
   15160:	2005883a 	mov	r2,r4
   15164:	1980452e 	bgeu	r3,r6,1527c <memcpy+0x130>
   15168:	2906b03a 	or	r3,r5,r4
   1516c:	18c000cc 	andi	r3,r3,3
   15170:	1800441e 	bne	r3,zero,15284 <memcpy+0x138>
   15174:	347ffc04 	addi	r17,r6,-16
   15178:	8822d13a 	srli	r17,r17,4
   1517c:	28c00104 	addi	r3,r5,4
   15180:	23400104 	addi	r13,r4,4
   15184:	8820913a 	slli	r16,r17,4
   15188:	2b000204 	addi	r12,r5,8
   1518c:	22c00204 	addi	r11,r4,8
   15190:	84000504 	addi	r16,r16,20
   15194:	2a800304 	addi	r10,r5,12
   15198:	22400304 	addi	r9,r4,12
   1519c:	2c21883a 	add	r16,r5,r16
   151a0:	2811883a 	mov	r8,r5
   151a4:	200f883a 	mov	r7,r4
   151a8:	41000017 	ldw	r4,0(r8)
   151ac:	1fc00017 	ldw	ra,0(r3)
   151b0:	63c00017 	ldw	r15,0(r12)
   151b4:	39000015 	stw	r4,0(r7)
   151b8:	53800017 	ldw	r14,0(r10)
   151bc:	6fc00015 	stw	ra,0(r13)
   151c0:	5bc00015 	stw	r15,0(r11)
   151c4:	4b800015 	stw	r14,0(r9)
   151c8:	18c00404 	addi	r3,r3,16
   151cc:	39c00404 	addi	r7,r7,16
   151d0:	42000404 	addi	r8,r8,16
   151d4:	6b400404 	addi	r13,r13,16
   151d8:	63000404 	addi	r12,r12,16
   151dc:	5ac00404 	addi	r11,r11,16
   151e0:	52800404 	addi	r10,r10,16
   151e4:	4a400404 	addi	r9,r9,16
   151e8:	1c3fef1e 	bne	r3,r16,151a8 <memcpy+0x5c>
   151ec:	89c00044 	addi	r7,r17,1
   151f0:	380e913a 	slli	r7,r7,4
   151f4:	310003cc 	andi	r4,r6,15
   151f8:	02c000c4 	movi	r11,3
   151fc:	11c7883a 	add	r3,r2,r7
   15200:	29cb883a 	add	r5,r5,r7
   15204:	5900212e 	bgeu	r11,r4,1528c <memcpy+0x140>
   15208:	1813883a 	mov	r9,r3
   1520c:	2811883a 	mov	r8,r5
   15210:	200f883a 	mov	r7,r4
   15214:	42800017 	ldw	r10,0(r8)
   15218:	4a400104 	addi	r9,r9,4
   1521c:	39ffff04 	addi	r7,r7,-4
   15220:	4abfff15 	stw	r10,-4(r9)
   15224:	42000104 	addi	r8,r8,4
   15228:	59fffa36 	bltu	r11,r7,15214 <memcpy+0xc8>
   1522c:	213fff04 	addi	r4,r4,-4
   15230:	2008d0ba 	srli	r4,r4,2
   15234:	318000cc 	andi	r6,r6,3
   15238:	21000044 	addi	r4,r4,1
   1523c:	2109883a 	add	r4,r4,r4
   15240:	2109883a 	add	r4,r4,r4
   15244:	1907883a 	add	r3,r3,r4
   15248:	290b883a 	add	r5,r5,r4
   1524c:	30000626 	beq	r6,zero,15268 <memcpy+0x11c>
   15250:	198d883a 	add	r6,r3,r6
   15254:	29c00003 	ldbu	r7,0(r5)
   15258:	18c00044 	addi	r3,r3,1
   1525c:	29400044 	addi	r5,r5,1
   15260:	19ffffc5 	stb	r7,-1(r3)
   15264:	19bffb1e 	bne	r3,r6,15254 <memcpy+0x108>
   15268:	dfc00217 	ldw	ra,8(sp)
   1526c:	dc400117 	ldw	r17,4(sp)
   15270:	dc000017 	ldw	r16,0(sp)
   15274:	dec00304 	addi	sp,sp,12
   15278:	f800283a 	ret
   1527c:	2007883a 	mov	r3,r4
   15280:	003ff206 	br	1524c <memcpy+0x100>
   15284:	2007883a 	mov	r3,r4
   15288:	003ff106 	br	15250 <memcpy+0x104>
   1528c:	200d883a 	mov	r6,r4
   15290:	003fee06 	br	1524c <memcpy+0x100>

00015294 <_putc_r>:
   15294:	defffc04 	addi	sp,sp,-16
   15298:	dc000215 	stw	r16,8(sp)
   1529c:	dfc00315 	stw	ra,12(sp)
   152a0:	2021883a 	mov	r16,r4
   152a4:	20000226 	beq	r4,zero,152b0 <_putc_r+0x1c>
   152a8:	20800e17 	ldw	r2,56(r4)
   152ac:	10001b26 	beq	r2,zero,1531c <_putc_r+0x88>
   152b0:	30800217 	ldw	r2,8(r6)
   152b4:	10bfffc4 	addi	r2,r2,-1
   152b8:	30800215 	stw	r2,8(r6)
   152bc:	10000a16 	blt	r2,zero,152e8 <_putc_r+0x54>
   152c0:	30800017 	ldw	r2,0(r6)
   152c4:	11400005 	stb	r5,0(r2)
   152c8:	30800017 	ldw	r2,0(r6)
   152cc:	10c00044 	addi	r3,r2,1
   152d0:	30c00015 	stw	r3,0(r6)
   152d4:	10800003 	ldbu	r2,0(r2)
   152d8:	dfc00317 	ldw	ra,12(sp)
   152dc:	dc000217 	ldw	r16,8(sp)
   152e0:	dec00404 	addi	sp,sp,16
   152e4:	f800283a 	ret
   152e8:	30c00617 	ldw	r3,24(r6)
   152ec:	10c00616 	blt	r2,r3,15308 <_putc_r+0x74>
   152f0:	30800017 	ldw	r2,0(r6)
   152f4:	00c00284 	movi	r3,10
   152f8:	11400005 	stb	r5,0(r2)
   152fc:	30800017 	ldw	r2,0(r6)
   15300:	11400003 	ldbu	r5,0(r2)
   15304:	28fff11e 	bne	r5,r3,152cc <_putc_r+0x38>
   15308:	8009883a 	mov	r4,r16
   1530c:	dfc00317 	ldw	ra,12(sp)
   15310:	dc000217 	ldw	r16,8(sp)
   15314:	dec00404 	addi	sp,sp,16
   15318:	00154941 	jmpi	15494 <__swbuf_r>
   1531c:	d9400015 	stw	r5,0(sp)
   15320:	d9800115 	stw	r6,4(sp)
   15324:	0011e880 	call	11e88 <__sinit>
   15328:	d9800117 	ldw	r6,4(sp)
   1532c:	d9400017 	ldw	r5,0(sp)
   15330:	003fdf06 	br	152b0 <_putc_r+0x1c>

00015334 <putc>:
   15334:	00800074 	movhi	r2,1
   15338:	defffc04 	addi	sp,sp,-16
   1533c:	109d3d04 	addi	r2,r2,29940
   15340:	dc000115 	stw	r16,4(sp)
   15344:	14000017 	ldw	r16,0(r2)
   15348:	dc400215 	stw	r17,8(sp)
   1534c:	dfc00315 	stw	ra,12(sp)
   15350:	2023883a 	mov	r17,r4
   15354:	80000226 	beq	r16,zero,15360 <putc+0x2c>
   15358:	80800e17 	ldw	r2,56(r16)
   1535c:	10001a26 	beq	r2,zero,153c8 <putc+0x94>
   15360:	28800217 	ldw	r2,8(r5)
   15364:	10bfffc4 	addi	r2,r2,-1
   15368:	28800215 	stw	r2,8(r5)
   1536c:	10000b16 	blt	r2,zero,1539c <putc+0x68>
   15370:	28800017 	ldw	r2,0(r5)
   15374:	14400005 	stb	r17,0(r2)
   15378:	28800017 	ldw	r2,0(r5)
   1537c:	10c00044 	addi	r3,r2,1
   15380:	28c00015 	stw	r3,0(r5)
   15384:	10800003 	ldbu	r2,0(r2)
   15388:	dfc00317 	ldw	ra,12(sp)
   1538c:	dc400217 	ldw	r17,8(sp)
   15390:	dc000117 	ldw	r16,4(sp)
   15394:	dec00404 	addi	sp,sp,16
   15398:	f800283a 	ret
   1539c:	28c00617 	ldw	r3,24(r5)
   153a0:	10c00e16 	blt	r2,r3,153dc <putc+0xa8>
   153a4:	28800017 	ldw	r2,0(r5)
   153a8:	01000284 	movi	r4,10
   153ac:	14400005 	stb	r17,0(r2)
   153b0:	28800017 	ldw	r2,0(r5)
   153b4:	10c00003 	ldbu	r3,0(r2)
   153b8:	193ff01e 	bne	r3,r4,1537c <putc+0x48>
   153bc:	280d883a 	mov	r6,r5
   153c0:	180b883a 	mov	r5,r3
   153c4:	00000706 	br	153e4 <putc+0xb0>
   153c8:	8009883a 	mov	r4,r16
   153cc:	d9400015 	stw	r5,0(sp)
   153d0:	0011e880 	call	11e88 <__sinit>
   153d4:	d9400017 	ldw	r5,0(sp)
   153d8:	003fe106 	br	15360 <putc+0x2c>
   153dc:	280d883a 	mov	r6,r5
   153e0:	880b883a 	mov	r5,r17
   153e4:	8009883a 	mov	r4,r16
   153e8:	dfc00317 	ldw	ra,12(sp)
   153ec:	dc400217 	ldw	r17,8(sp)
   153f0:	dc000117 	ldw	r16,4(sp)
   153f4:	dec00404 	addi	sp,sp,16
   153f8:	00154941 	jmpi	15494 <__swbuf_r>

000153fc <strlen>:
   153fc:	208000cc 	andi	r2,r4,3
   15400:	10002026 	beq	r2,zero,15484 <strlen+0x88>
   15404:	20800007 	ldb	r2,0(r4)
   15408:	10002026 	beq	r2,zero,1548c <strlen+0x90>
   1540c:	2005883a 	mov	r2,r4
   15410:	00000206 	br	1541c <strlen+0x20>
   15414:	10c00007 	ldb	r3,0(r2)
   15418:	18001826 	beq	r3,zero,1547c <strlen+0x80>
   1541c:	10800044 	addi	r2,r2,1
   15420:	10c000cc 	andi	r3,r2,3
   15424:	183ffb1e 	bne	r3,zero,15414 <strlen+0x18>
   15428:	10c00017 	ldw	r3,0(r2)
   1542c:	01ffbff4 	movhi	r7,65279
   15430:	39ffbfc4 	addi	r7,r7,-257
   15434:	00ca303a 	nor	r5,zero,r3
   15438:	01a02074 	movhi	r6,32897
   1543c:	19c7883a 	add	r3,r3,r7
   15440:	31a02004 	addi	r6,r6,-32640
   15444:	1946703a 	and	r3,r3,r5
   15448:	1986703a 	and	r3,r3,r6
   1544c:	1800091e 	bne	r3,zero,15474 <strlen+0x78>
   15450:	10800104 	addi	r2,r2,4
   15454:	10c00017 	ldw	r3,0(r2)
   15458:	19cb883a 	add	r5,r3,r7
   1545c:	00c6303a 	nor	r3,zero,r3
   15460:	28c6703a 	and	r3,r5,r3
   15464:	1986703a 	and	r3,r3,r6
   15468:	183ff926 	beq	r3,zero,15450 <strlen+0x54>
   1546c:	00000106 	br	15474 <strlen+0x78>
   15470:	10800044 	addi	r2,r2,1
   15474:	10c00007 	ldb	r3,0(r2)
   15478:	183ffd1e 	bne	r3,zero,15470 <strlen+0x74>
   1547c:	1105c83a 	sub	r2,r2,r4
   15480:	f800283a 	ret
   15484:	2005883a 	mov	r2,r4
   15488:	003fe706 	br	15428 <strlen+0x2c>
   1548c:	0005883a 	mov	r2,zero
   15490:	f800283a 	ret

00015494 <__swbuf_r>:
   15494:	defffb04 	addi	sp,sp,-20
   15498:	dcc00315 	stw	r19,12(sp)
   1549c:	dc800215 	stw	r18,8(sp)
   154a0:	dc000015 	stw	r16,0(sp)
   154a4:	dfc00415 	stw	ra,16(sp)
   154a8:	dc400115 	stw	r17,4(sp)
   154ac:	2025883a 	mov	r18,r4
   154b0:	2827883a 	mov	r19,r5
   154b4:	3021883a 	mov	r16,r6
   154b8:	20000226 	beq	r4,zero,154c4 <__swbuf_r+0x30>
   154bc:	20800e17 	ldw	r2,56(r4)
   154c0:	10004226 	beq	r2,zero,155cc <__swbuf_r+0x138>
   154c4:	80800617 	ldw	r2,24(r16)
   154c8:	8100030b 	ldhu	r4,12(r16)
   154cc:	80800215 	stw	r2,8(r16)
   154d0:	2080020c 	andi	r2,r4,8
   154d4:	10003626 	beq	r2,zero,155b0 <__swbuf_r+0x11c>
   154d8:	80c00417 	ldw	r3,16(r16)
   154dc:	18003426 	beq	r3,zero,155b0 <__swbuf_r+0x11c>
   154e0:	2088000c 	andi	r2,r4,8192
   154e4:	9c403fcc 	andi	r17,r19,255
   154e8:	10001a26 	beq	r2,zero,15554 <__swbuf_r+0xc0>
   154ec:	80800017 	ldw	r2,0(r16)
   154f0:	81000517 	ldw	r4,20(r16)
   154f4:	10c7c83a 	sub	r3,r2,r3
   154f8:	1900200e 	bge	r3,r4,1557c <__swbuf_r+0xe8>
   154fc:	18c00044 	addi	r3,r3,1
   15500:	81000217 	ldw	r4,8(r16)
   15504:	11400044 	addi	r5,r2,1
   15508:	81400015 	stw	r5,0(r16)
   1550c:	213fffc4 	addi	r4,r4,-1
   15510:	81000215 	stw	r4,8(r16)
   15514:	14c00005 	stb	r19,0(r2)
   15518:	80800517 	ldw	r2,20(r16)
   1551c:	10c01e26 	beq	r2,r3,15598 <__swbuf_r+0x104>
   15520:	8080030b 	ldhu	r2,12(r16)
   15524:	1080004c 	andi	r2,r2,1
   15528:	10000226 	beq	r2,zero,15534 <__swbuf_r+0xa0>
   1552c:	00800284 	movi	r2,10
   15530:	88801926 	beq	r17,r2,15598 <__swbuf_r+0x104>
   15534:	8805883a 	mov	r2,r17
   15538:	dfc00417 	ldw	ra,16(sp)
   1553c:	dcc00317 	ldw	r19,12(sp)
   15540:	dc800217 	ldw	r18,8(sp)
   15544:	dc400117 	ldw	r17,4(sp)
   15548:	dc000017 	ldw	r16,0(sp)
   1554c:	dec00504 	addi	sp,sp,20
   15550:	f800283a 	ret
   15554:	81401917 	ldw	r5,100(r16)
   15558:	00b7ffc4 	movi	r2,-8193
   1555c:	21080014 	ori	r4,r4,8192
   15560:	2884703a 	and	r2,r5,r2
   15564:	80801915 	stw	r2,100(r16)
   15568:	80800017 	ldw	r2,0(r16)
   1556c:	8100030d 	sth	r4,12(r16)
   15570:	81000517 	ldw	r4,20(r16)
   15574:	10c7c83a 	sub	r3,r2,r3
   15578:	193fe016 	blt	r3,r4,154fc <__swbuf_r+0x68>
   1557c:	800b883a 	mov	r5,r16
   15580:	9009883a 	mov	r4,r18
   15584:	0011a9c0 	call	11a9c <_fflush_r>
   15588:	1000071e 	bne	r2,zero,155a8 <__swbuf_r+0x114>
   1558c:	80800017 	ldw	r2,0(r16)
   15590:	00c00044 	movi	r3,1
   15594:	003fda06 	br	15500 <__swbuf_r+0x6c>
   15598:	800b883a 	mov	r5,r16
   1559c:	9009883a 	mov	r4,r18
   155a0:	0011a9c0 	call	11a9c <_fflush_r>
   155a4:	103fe326 	beq	r2,zero,15534 <__swbuf_r+0xa0>
   155a8:	00bfffc4 	movi	r2,-1
   155ac:	003fe206 	br	15538 <__swbuf_r+0xa4>
   155b0:	800b883a 	mov	r5,r16
   155b4:	9009883a 	mov	r4,r18
   155b8:	00155ec0 	call	155ec <__swsetup_r>
   155bc:	103ffa1e 	bne	r2,zero,155a8 <__swbuf_r+0x114>
   155c0:	8100030b 	ldhu	r4,12(r16)
   155c4:	80c00417 	ldw	r3,16(r16)
   155c8:	003fc506 	br	154e0 <__swbuf_r+0x4c>
   155cc:	0011e880 	call	11e88 <__sinit>
   155d0:	003fbc06 	br	154c4 <__swbuf_r+0x30>

000155d4 <__swbuf>:
   155d4:	00800074 	movhi	r2,1
   155d8:	109d3d04 	addi	r2,r2,29940
   155dc:	280d883a 	mov	r6,r5
   155e0:	200b883a 	mov	r5,r4
   155e4:	11000017 	ldw	r4,0(r2)
   155e8:	00154941 	jmpi	15494 <__swbuf_r>

000155ec <__swsetup_r>:
   155ec:	00800074 	movhi	r2,1
   155f0:	defffd04 	addi	sp,sp,-12
   155f4:	109d3d04 	addi	r2,r2,29940
   155f8:	dc400115 	stw	r17,4(sp)
   155fc:	2023883a 	mov	r17,r4
   15600:	11000017 	ldw	r4,0(r2)
   15604:	dc000015 	stw	r16,0(sp)
   15608:	dfc00215 	stw	ra,8(sp)
   1560c:	2821883a 	mov	r16,r5
   15610:	20000226 	beq	r4,zero,1561c <__swsetup_r+0x30>
   15614:	20800e17 	ldw	r2,56(r4)
   15618:	10003126 	beq	r2,zero,156e0 <__swsetup_r+0xf4>
   1561c:	8080030b 	ldhu	r2,12(r16)
   15620:	10c0020c 	andi	r3,r2,8
   15624:	1009883a 	mov	r4,r2
   15628:	18000f26 	beq	r3,zero,15668 <__swsetup_r+0x7c>
   1562c:	80c00417 	ldw	r3,16(r16)
   15630:	18001526 	beq	r3,zero,15688 <__swsetup_r+0x9c>
   15634:	1100004c 	andi	r4,r2,1
   15638:	20001c1e 	bne	r4,zero,156ac <__swsetup_r+0xc0>
   1563c:	1080008c 	andi	r2,r2,2
   15640:	1000291e 	bne	r2,zero,156e8 <__swsetup_r+0xfc>
   15644:	80800517 	ldw	r2,20(r16)
   15648:	80800215 	stw	r2,8(r16)
   1564c:	18001c26 	beq	r3,zero,156c0 <__swsetup_r+0xd4>
   15650:	0005883a 	mov	r2,zero
   15654:	dfc00217 	ldw	ra,8(sp)
   15658:	dc400117 	ldw	r17,4(sp)
   1565c:	dc000017 	ldw	r16,0(sp)
   15660:	dec00304 	addi	sp,sp,12
   15664:	f800283a 	ret
   15668:	2080040c 	andi	r2,r4,16
   1566c:	10002e26 	beq	r2,zero,15728 <__swsetup_r+0x13c>
   15670:	2080010c 	andi	r2,r4,4
   15674:	10001e1e 	bne	r2,zero,156f0 <__swsetup_r+0x104>
   15678:	80c00417 	ldw	r3,16(r16)
   1567c:	20800214 	ori	r2,r4,8
   15680:	8080030d 	sth	r2,12(r16)
   15684:	183feb1e 	bne	r3,zero,15634 <__swsetup_r+0x48>
   15688:	1100a00c 	andi	r4,r2,640
   1568c:	01408004 	movi	r5,512
   15690:	217fe826 	beq	r4,r5,15634 <__swsetup_r+0x48>
   15694:	800b883a 	mov	r5,r16
   15698:	8809883a 	mov	r4,r17
   1569c:	00108fc0 	call	108fc <__smakebuf_r>
   156a0:	8080030b 	ldhu	r2,12(r16)
   156a4:	80c00417 	ldw	r3,16(r16)
   156a8:	003fe206 	br	15634 <__swsetup_r+0x48>
   156ac:	80800517 	ldw	r2,20(r16)
   156b0:	80000215 	stw	zero,8(r16)
   156b4:	0085c83a 	sub	r2,zero,r2
   156b8:	80800615 	stw	r2,24(r16)
   156bc:	183fe41e 	bne	r3,zero,15650 <__swsetup_r+0x64>
   156c0:	80c0030b 	ldhu	r3,12(r16)
   156c4:	0005883a 	mov	r2,zero
   156c8:	1900200c 	andi	r4,r3,128
   156cc:	203fe126 	beq	r4,zero,15654 <__swsetup_r+0x68>
   156d0:	18c01014 	ori	r3,r3,64
   156d4:	80c0030d 	sth	r3,12(r16)
   156d8:	00bfffc4 	movi	r2,-1
   156dc:	003fdd06 	br	15654 <__swsetup_r+0x68>
   156e0:	0011e880 	call	11e88 <__sinit>
   156e4:	003fcd06 	br	1561c <__swsetup_r+0x30>
   156e8:	0005883a 	mov	r2,zero
   156ec:	003fd606 	br	15648 <__swsetup_r+0x5c>
   156f0:	81400c17 	ldw	r5,48(r16)
   156f4:	28000626 	beq	r5,zero,15710 <__swsetup_r+0x124>
   156f8:	80801004 	addi	r2,r16,64
   156fc:	28800326 	beq	r5,r2,1570c <__swsetup_r+0x120>
   15700:	8809883a 	mov	r4,r17
   15704:	00120a80 	call	120a8 <_free_r>
   15708:	8100030b 	ldhu	r4,12(r16)
   1570c:	80000c15 	stw	zero,48(r16)
   15710:	80c00417 	ldw	r3,16(r16)
   15714:	00bff6c4 	movi	r2,-37
   15718:	1108703a 	and	r4,r2,r4
   1571c:	80000115 	stw	zero,4(r16)
   15720:	80c00015 	stw	r3,0(r16)
   15724:	003fd506 	br	1567c <__swsetup_r+0x90>
   15728:	00800244 	movi	r2,9
   1572c:	88800015 	stw	r2,0(r17)
   15730:	20801014 	ori	r2,r4,64
   15734:	8080030d 	sth	r2,12(r16)
   15738:	00bfffc4 	movi	r2,-1
   1573c:	003fc506 	br	15654 <__swsetup_r+0x68>

00015740 <__register_exitproc>:
   15740:	defffa04 	addi	sp,sp,-24
   15744:	dc000315 	stw	r16,12(sp)
   15748:	04000074 	movhi	r16,1
   1574c:	841d3c04 	addi	r16,r16,29936
   15750:	80c00017 	ldw	r3,0(r16)
   15754:	dc400415 	stw	r17,16(sp)
   15758:	dfc00515 	stw	ra,20(sp)
   1575c:	18805217 	ldw	r2,328(r3)
   15760:	2023883a 	mov	r17,r4
   15764:	10003726 	beq	r2,zero,15844 <__register_exitproc+0x104>
   15768:	10c00117 	ldw	r3,4(r2)
   1576c:	010007c4 	movi	r4,31
   15770:	20c00e16 	blt	r4,r3,157ac <__register_exitproc+0x6c>
   15774:	1a000044 	addi	r8,r3,1
   15778:	8800221e 	bne	r17,zero,15804 <__register_exitproc+0xc4>
   1577c:	18c00084 	addi	r3,r3,2
   15780:	18c7883a 	add	r3,r3,r3
   15784:	18c7883a 	add	r3,r3,r3
   15788:	12000115 	stw	r8,4(r2)
   1578c:	10c7883a 	add	r3,r2,r3
   15790:	19400015 	stw	r5,0(r3)
   15794:	0005883a 	mov	r2,zero
   15798:	dfc00517 	ldw	ra,20(sp)
   1579c:	dc400417 	ldw	r17,16(sp)
   157a0:	dc000317 	ldw	r16,12(sp)
   157a4:	dec00604 	addi	sp,sp,24
   157a8:	f800283a 	ret
   157ac:	00800034 	movhi	r2,0
   157b0:	10800004 	addi	r2,r2,0
   157b4:	10002626 	beq	r2,zero,15850 <__register_exitproc+0x110>
   157b8:	01006404 	movi	r4,400
   157bc:	d9400015 	stw	r5,0(sp)
   157c0:	d9800115 	stw	r6,4(sp)
   157c4:	d9c00215 	stw	r7,8(sp)
   157c8:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   157cc:	d9400017 	ldw	r5,0(sp)
   157d0:	d9800117 	ldw	r6,4(sp)
   157d4:	d9c00217 	ldw	r7,8(sp)
   157d8:	10001d26 	beq	r2,zero,15850 <__register_exitproc+0x110>
   157dc:	81000017 	ldw	r4,0(r16)
   157e0:	10000115 	stw	zero,4(r2)
   157e4:	02000044 	movi	r8,1
   157e8:	22405217 	ldw	r9,328(r4)
   157ec:	0007883a 	mov	r3,zero
   157f0:	12400015 	stw	r9,0(r2)
   157f4:	20805215 	stw	r2,328(r4)
   157f8:	10006215 	stw	zero,392(r2)
   157fc:	10006315 	stw	zero,396(r2)
   15800:	883fde26 	beq	r17,zero,1577c <__register_exitproc+0x3c>
   15804:	18c9883a 	add	r4,r3,r3
   15808:	2109883a 	add	r4,r4,r4
   1580c:	1109883a 	add	r4,r2,r4
   15810:	21802215 	stw	r6,136(r4)
   15814:	01800044 	movi	r6,1
   15818:	12406217 	ldw	r9,392(r2)
   1581c:	30cc983a 	sll	r6,r6,r3
   15820:	4992b03a 	or	r9,r9,r6
   15824:	12406215 	stw	r9,392(r2)
   15828:	21c04215 	stw	r7,264(r4)
   1582c:	01000084 	movi	r4,2
   15830:	893fd21e 	bne	r17,r4,1577c <__register_exitproc+0x3c>
   15834:	11006317 	ldw	r4,396(r2)
   15838:	218cb03a 	or	r6,r4,r6
   1583c:	11806315 	stw	r6,396(r2)
   15840:	003fce06 	br	1577c <__register_exitproc+0x3c>
   15844:	18805304 	addi	r2,r3,332
   15848:	18805215 	stw	r2,328(r3)
   1584c:	003fc606 	br	15768 <__register_exitproc+0x28>
   15850:	00bfffc4 	movi	r2,-1
   15854:	003fd006 	br	15798 <__register_exitproc+0x58>

00015858 <__call_exitprocs>:
   15858:	defff504 	addi	sp,sp,-44
   1585c:	df000915 	stw	fp,36(sp)
   15860:	dd400615 	stw	r21,24(sp)
   15864:	dc800315 	stw	r18,12(sp)
   15868:	dfc00a15 	stw	ra,40(sp)
   1586c:	ddc00815 	stw	r23,32(sp)
   15870:	dd800715 	stw	r22,28(sp)
   15874:	dd000515 	stw	r20,20(sp)
   15878:	dcc00415 	stw	r19,16(sp)
   1587c:	dc400215 	stw	r17,8(sp)
   15880:	dc000115 	stw	r16,4(sp)
   15884:	d9000015 	stw	r4,0(sp)
   15888:	2839883a 	mov	fp,r5
   1588c:	04800044 	movi	r18,1
   15890:	057fffc4 	movi	r21,-1
   15894:	00800074 	movhi	r2,1
   15898:	109d3c04 	addi	r2,r2,29936
   1589c:	12000017 	ldw	r8,0(r2)
   158a0:	45005217 	ldw	r20,328(r8)
   158a4:	44c05204 	addi	r19,r8,328
   158a8:	a0001c26 	beq	r20,zero,1591c <__call_exitprocs+0xc4>
   158ac:	a0800117 	ldw	r2,4(r20)
   158b0:	15ffffc4 	addi	r23,r2,-1
   158b4:	b8000d16 	blt	r23,zero,158ec <__call_exitprocs+0x94>
   158b8:	14000044 	addi	r16,r2,1
   158bc:	8421883a 	add	r16,r16,r16
   158c0:	8421883a 	add	r16,r16,r16
   158c4:	84402004 	addi	r17,r16,128
   158c8:	a463883a 	add	r17,r20,r17
   158cc:	a421883a 	add	r16,r20,r16
   158d0:	e0001e26 	beq	fp,zero,1594c <__call_exitprocs+0xf4>
   158d4:	80804017 	ldw	r2,256(r16)
   158d8:	e0801c26 	beq	fp,r2,1594c <__call_exitprocs+0xf4>
   158dc:	bdffffc4 	addi	r23,r23,-1
   158e0:	843fff04 	addi	r16,r16,-4
   158e4:	8c7fff04 	addi	r17,r17,-4
   158e8:	bd7ff91e 	bne	r23,r21,158d0 <__call_exitprocs+0x78>
   158ec:	00800034 	movhi	r2,0
   158f0:	10800004 	addi	r2,r2,0
   158f4:	10000926 	beq	r2,zero,1591c <__call_exitprocs+0xc4>
   158f8:	a0800117 	ldw	r2,4(r20)
   158fc:	1000301e 	bne	r2,zero,159c0 <__call_exitprocs+0x168>
   15900:	a0800017 	ldw	r2,0(r20)
   15904:	10003226 	beq	r2,zero,159d0 <__call_exitprocs+0x178>
   15908:	a009883a 	mov	r4,r20
   1590c:	98800015 	stw	r2,0(r19)
   15910:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   15914:	9d000017 	ldw	r20,0(r19)
   15918:	a03fe41e 	bne	r20,zero,158ac <__call_exitprocs+0x54>
   1591c:	dfc00a17 	ldw	ra,40(sp)
   15920:	df000917 	ldw	fp,36(sp)
   15924:	ddc00817 	ldw	r23,32(sp)
   15928:	dd800717 	ldw	r22,28(sp)
   1592c:	dd400617 	ldw	r21,24(sp)
   15930:	dd000517 	ldw	r20,20(sp)
   15934:	dcc00417 	ldw	r19,16(sp)
   15938:	dc800317 	ldw	r18,12(sp)
   1593c:	dc400217 	ldw	r17,8(sp)
   15940:	dc000117 	ldw	r16,4(sp)
   15944:	dec00b04 	addi	sp,sp,44
   15948:	f800283a 	ret
   1594c:	a0800117 	ldw	r2,4(r20)
   15950:	80c00017 	ldw	r3,0(r16)
   15954:	10bfffc4 	addi	r2,r2,-1
   15958:	15c01426 	beq	r2,r23,159ac <__call_exitprocs+0x154>
   1595c:	80000015 	stw	zero,0(r16)
   15960:	183fde26 	beq	r3,zero,158dc <__call_exitprocs+0x84>
   15964:	95c8983a 	sll	r4,r18,r23
   15968:	a0806217 	ldw	r2,392(r20)
   1596c:	a5800117 	ldw	r22,4(r20)
   15970:	2084703a 	and	r2,r4,r2
   15974:	10000b26 	beq	r2,zero,159a4 <__call_exitprocs+0x14c>
   15978:	a0806317 	ldw	r2,396(r20)
   1597c:	2088703a 	and	r4,r4,r2
   15980:	20000c1e 	bne	r4,zero,159b4 <__call_exitprocs+0x15c>
   15984:	89400017 	ldw	r5,0(r17)
   15988:	d9000017 	ldw	r4,0(sp)
   1598c:	183ee83a 	callr	r3
   15990:	a0800117 	ldw	r2,4(r20)
   15994:	15bfbf1e 	bne	r2,r22,15894 <__call_exitprocs+0x3c>
   15998:	98800017 	ldw	r2,0(r19)
   1599c:	153fcf26 	beq	r2,r20,158dc <__call_exitprocs+0x84>
   159a0:	003fbc06 	br	15894 <__call_exitprocs+0x3c>
   159a4:	183ee83a 	callr	r3
   159a8:	003ff906 	br	15990 <__call_exitprocs+0x138>
   159ac:	a5c00115 	stw	r23,4(r20)
   159b0:	003feb06 	br	15960 <__call_exitprocs+0x108>
   159b4:	89000017 	ldw	r4,0(r17)
   159b8:	183ee83a 	callr	r3
   159bc:	003ff406 	br	15990 <__call_exitprocs+0x138>
   159c0:	a0800017 	ldw	r2,0(r20)
   159c4:	a027883a 	mov	r19,r20
   159c8:	1029883a 	mov	r20,r2
   159cc:	003fb606 	br	158a8 <__call_exitprocs+0x50>
   159d0:	0005883a 	mov	r2,zero
   159d4:	003ffb06 	br	159c4 <__call_exitprocs+0x16c>

000159d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   159d8:	defffd04 	addi	sp,sp,-12
   159dc:	df000215 	stw	fp,8(sp)
   159e0:	df000204 	addi	fp,sp,8
   159e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   159e8:	0001883a 	nop
   159ec:	e0bfff17 	ldw	r2,-4(fp)
   159f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   159f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   159f8:	10000226 	beq	r2,zero,15a04 <_exit+0x2c>
    ALT_SIM_FAIL();
   159fc:	002af070 	cmpltui	zero,zero,43969
   15a00:	00000106 	br	15a08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15a04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15a08:	003fff06 	br	15a08 <_exit+0x30>
